package org.activiti.springdatajpa.pojo;
// Generated Nov 21, 2015 11:41:58 AM by Hibernate Tools 3.2.2.GA


import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Execution generated by hbm2java
 */
@Entity
@Table(name = "act_ru_execution"
        , schema = "public"
)
public class Execution implements java.io.Serializable {

    private String id;
    private Execution executionByParentId;
    private ProcessDefinition processDefinition;
    private Execution executionBySuperExec;
    private Execution executionByProcInstId;
    private Integer rev;
    private String businessKey;
    private String activityId;
    private Boolean isActive;
    private Boolean isConcurrent;
    private Boolean isScope;
    private Boolean isEventScope;
    private Integer suspensionState;
    private Integer cachedEntState;
    private String tenantId;
    private String name;
    private Date lockTime;
    private Set<Execution> executionsForProcInstId = new HashSet<Execution>(0);
    private Set<Execution> executionsForParentId = new HashSet<Execution>(0);
    private Set<Execution> executionsForSuperExec = new HashSet<Execution>(0);
    private Set<IdentityLink> identityLinks = new HashSet<IdentityLink>(0);
    private Set<Task> tasksForExecutionId = new HashSet<Task>(0);
    private Set<VariableInstance> variablesForExecutionIdInstance = new HashSet<VariableInstance>(0);
    private Set<EventSubscription> eventSubscriptions = new HashSet<EventSubscription>(0);
    private Set<Task> tasksForProcInstId = new HashSet<Task>(0);
    private Set<VariableInstance> variablesForProcInstIdInstance = new HashSet<VariableInstance>(0);

    public Execution() {
    }

    public Execution(String id) {
        this.id = id;
    }

    public Execution(String id, Execution executionByParentId, ProcessDefinition processDefinition, Execution executionBySuperExec, Execution executionByProcInstId, Integer rev, String businessKey, String activityId, Boolean isActive, Boolean isConcurrent, Boolean isScope, Boolean isEventScope, Integer suspensionState, Integer cachedEntState, String tenantId, String name, Date lockTime, Set<Execution> executionsForProcInstId, Set<Execution> executionsForParentId, Set<Execution> executionsForSuperExec, Set<IdentityLink> identityLinks, Set<Task> tasksForExecutionId, Set<VariableInstance> variablesForExecutionIdInstance, Set<EventSubscription> eventSubscriptions, Set<Task> tasksForProcInstId, Set<VariableInstance> variablesForProcInstIdInstance) {
        this.id = id;
        this.executionByParentId = executionByParentId;
        this.processDefinition = processDefinition;
        this.executionBySuperExec = executionBySuperExec;
        this.executionByProcInstId = executionByProcInstId;
        this.rev = rev;
        this.businessKey = businessKey;
        this.activityId = activityId;
        this.isActive = isActive;
        this.isConcurrent = isConcurrent;
        this.isScope = isScope;
        this.isEventScope = isEventScope;
        this.suspensionState = suspensionState;
        this.cachedEntState = cachedEntState;
        this.tenantId = tenantId;
        this.name = name;
        this.lockTime = lockTime;
        this.executionsForProcInstId = executionsForProcInstId;
        this.executionsForParentId = executionsForParentId;
        this.executionsForSuperExec = executionsForSuperExec;
        this.identityLinks = identityLinks;
        this.tasksForExecutionId = tasksForExecutionId;
        this.variablesForExecutionIdInstance = variablesForExecutionIdInstance;
        this.eventSubscriptions = eventSubscriptions;
        this.tasksForProcInstId = tasksForProcInstId;
        this.variablesForProcInstIdInstance = variablesForProcInstIdInstance;
    }

    @Id
    @Column(name = "id_", unique = true, nullable = false, length = 64)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_id_")
    public Execution getExecutionByParentId() {
        return this.executionByParentId;
    }

    public void setExecutionByParentId(Execution executionByParentId) {
        this.executionByParentId = executionByParentId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "proc_def_id_")
    public ProcessDefinition getProcessDefinition() {
        return this.processDefinition;
    }

    public void setProcessDefinition(ProcessDefinition processDefinition) {
        this.processDefinition = processDefinition;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "super_exec_")
    public Execution getExecutionBySuperExec() {
        return this.executionBySuperExec;
    }

    public void setExecutionBySuperExec(Execution executionBySuperExec) {
        this.executionBySuperExec = executionBySuperExec;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "proc_inst_id_")
    public Execution getExecutionByProcInstId() {
        return this.executionByProcInstId;
    }

    public void setExecutionByProcInstId(Execution executionByProcInstId) {
        this.executionByProcInstId = executionByProcInstId;
    }

    @Column(name = "rev_")
    public Integer getRev() {
        return this.rev;
    }

    public void setRev(Integer rev) {
        this.rev = rev;
    }

    @Column(name = "business_key_")
    public String getBusinessKey() {
        return this.businessKey;
    }

    public void setBusinessKey(String businessKey) {
        this.businessKey = businessKey;
    }

    @Column(name = "act_id_")
    public String getActivityId() {
        return this.activityId;
    }

    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    @Column(name = "is_active_")
    public Boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    @Column(name = "is_concurrent_")
    public Boolean getIsConcurrent() {
        return this.isConcurrent;
    }

    public void setIsConcurrent(Boolean isConcurrent) {
        this.isConcurrent = isConcurrent;
    }

    @Column(name = "is_scope_")
    public Boolean getIsScope() {
        return this.isScope;
    }

    public void setIsScope(Boolean isScope) {
        this.isScope = isScope;
    }

    @Column(name = "is_event_scope_")
    public Boolean getIsEventScope() {
        return this.isEventScope;
    }

    public void setIsEventScope(Boolean isEventScope) {
        this.isEventScope = isEventScope;
    }

    @Column(name = "suspension_state_")
    public Integer getSuspensionState() {
        return this.suspensionState;
    }

    public void setSuspensionState(Integer suspensionState) {
        this.suspensionState = suspensionState;
    }

    @Column(name = "cached_ent_state_")
    public Integer getCachedEntState() {
        return this.cachedEntState;
    }

    public void setCachedEntState(Integer cachedEntState) {
        this.cachedEntState = cachedEntState;
    }

    @Column(name = "tenant_id_")
    public String getTenantId() {
        return this.tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    @Column(name = "name_")
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "lock_time_", length = 29)
    public Date getLockTime() {
        return this.lockTime;
    }

    public void setLockTime(Date lockTime) {
        this.lockTime = lockTime;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "executionByProcInstId")
    public Set<Execution> getExecutionsForProcInstId() {
        return this.executionsForProcInstId;
    }

    public void setExecutionsForProcInstId(Set<Execution> executionsForProcInstId) {
        this.executionsForProcInstId = executionsForProcInstId;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "executionByParentId")
    public Set<Execution> getExecutionsForParentId() {
        return this.executionsForParentId;
    }

    public void setExecutionsForParentId(Set<Execution> executionsForParentId) {
        this.executionsForParentId = executionsForParentId;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "executionBySuperExec")
    public Set<Execution> getExecutionsForSuperExec() {
        return this.executionsForSuperExec;
    }

    public void setExecutionsForSuperExec(Set<Execution> executionsForSuperExec) {
        this.executionsForSuperExec = executionsForSuperExec;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "actRuExecution")
    public Set<IdentityLink> getIdentityLinks() {
        return this.identityLinks;
    }

    public void setIdentityLinks(Set<IdentityLink> identityLinks) {
        this.identityLinks = identityLinks;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "actRuExecutionByExecutionId")
    public Set<Task> getTasksForExecutionId() {
        return this.tasksForExecutionId;
    }

    public void setTasksForExecutionId(Set<Task> tasksForExecutionId) {
        this.tasksForExecutionId = tasksForExecutionId;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "actRuExecutionByExecutionId")
    public Set<VariableInstance> getVariablesForExecutionIdInstance() {
        return this.variablesForExecutionIdInstance;
    }

    public void setVariablesForExecutionIdInstance(Set<VariableInstance> variablesForExecutionIdInstance) {
        this.variablesForExecutionIdInstance = variablesForExecutionIdInstance;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "actRuExecution")
    public Set<EventSubscription> getEventSubscriptions() {
        return this.eventSubscriptions;
    }

    public void setEventSubscriptions(Set<EventSubscription> eventSubscriptions) {
        this.eventSubscriptions = eventSubscriptions;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "executionByProcInstId")
    public Set<Task> getTasksForProcInstId() {
        return this.tasksForProcInstId;
    }

    public void setTasksForProcInstId(Set<Task> tasksForProcInstId) {
        this.tasksForProcInstId = tasksForProcInstId;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "executionByProcInstId")
    public Set<VariableInstance> getVariablesForProcInstIdInstance() {
        return this.variablesForProcInstIdInstance;
    }

    public void setVariablesForProcInstIdInstance(Set<VariableInstance> variablesForProcInstIdInstance) {
        this.variablesForProcInstIdInstance = variablesForProcInstIdInstance;
    }
}


