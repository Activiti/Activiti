
import java.text.SimpleDateFormat;
import java.util.Date;

def getDateTime() {
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd-HHmm");
		return format.format(new Date());
}


buildscript {

    ext {
			activiti.version = '6.0.0'
			spring.version = '4.1.6.RELEASE '
			spring.security.version = '4.0.1.RELEASE'
			hibernate.version = '4.2.16.Final'
			jackson.version = '2.3.3'
			codahale.metrics.version = '3.0.2'
			hazelcastcache.version = '3.1.5'
			batik.version = '1.7'
			jetty.version = '9.1.3.v20140225'

    }
	
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
    }
}



allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'org.springframework.boot'
	
	
  eclipse {
    classpath {
  
    }
  }
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'


	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	ext {
		currentTime = getDateTime()
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}
	
	repositories {
		maven { url 'http://maven.aliyun.com/nexus/content/repositories/central/' }
		maven { url "http://www.datanucleus.org/downloads/maven2" }
		maven { url 'http://maven.ibiblio.org/maven2/' }
	    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
	    mavenCentral()
	    
	}

}


project(':activiti-app-conf') {
	apply plugin: 'war'
	
 	dependencies {
 		compile project(":activiti-app-logic")
 		compile project(":activiti-app-rest")
 		compile project(":content-storage-api")
 		compile project(":content-storage-fs")
 		compile project(":editor-image-generator")
 	}

}

project(':activiti-app-logic') {
	

 	dependencies {

 		compile project(":content-storage-api")
 		compile project(":content-storage-fs")
 		compile project(":editor-image-generator")

 	}

}

project(':activiti-app-rest') {
 	dependencies {
 		compile	project(":activiti-app-logic")
 		compile project(":content-storage-api")
 		compile project(":content-storage-fs")
 		compile project(":editor-image-generator")

 	}

}

project(':content-storage-api') {
 	dependencies {

 	}

}

project(':content-storage-fs') {
 	dependencies {
 
 	}

}

project(':editor-image-generator') {
	dependencies {



		compile("org.activiti:content-storage-api:${project.version}")
		compile("org.activiti:content-storage-fs:${project.version}")
		compile("org.activiti:activiti-app-logic:${project.version}")
		compile("org.activiti:activiti-app-rest:${project.version}")
		compile("org.activiti:activiti-app-conf:${project.version}")
		compile("org.activiti:editor-image-generator:${project.version}")

		////  Activiti Enterprise Engine 
		compile("org.activiti:activiti-engine:${activiti.version}")
		compile("org.activiti:activiti-spring:${activiti.version}")
		compile("org.activiti:activiti-bpmn-model:${activiti.version}")
		compile("org.activiti:activiti-bpmn-converter:${activiti.version}")
		compile("org.activiti:activiti-json-converter:${activiti.version}")
		compile("org.activiti:activiti-process-validation:${activiti.version}")
		compile("org.activiti:activiti-bpmn-layout:${activiti.version}")
		compile("org.activiti:activiti-form-engine-configurator:${activiti.version}")
		compile("org.activiti:activiti-form-engine:${activiti.version}")
		compile("org.activiti:activiti-form-model:${activiti.version}")
		compile("org.activiti:activiti-form-json-converter:${activiti.version}")
		compile("org.activiti:activiti-image-generator:${activiti.version}")
		compile("org.activiti:activiti-rest:${activiti.version}")

		////  Xerces is needed (eg by jboss, which ships with an old version), for process definition parsing 
		compile("xerces:xercesImpl:2.11.0")


		////  LOGGING 
		compile("org.slf4j:slf4j-api:1.7.5")
		compile("org.slf4j:slf4j-log4j12:1.7.5")
		compile("org.slf4j:jcl-over-slf4j:1.7.5")

		////  JSON 
		compile("com.fasterxml.jackson.core:jackson-core:${jackson.version}")
		compile("com.fasterxml.jackson.core:jackson-databind:${jackson.version}")
		compile("com.fasterxml.jackson.core:jackson-annotations:${jackson.version}")
		compile("com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson.version}")
		compile("com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jackson.version}")
		compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson.version}")

		////  DATABASE 
		compile("org.liquibase:liquibase-core:3.1.0")
		compile("com.mchange:c3p0:0.9.2.1")
		compile("org.hsqldb:hsqldb:2.3.1")
		compile("mysql:mysql-connector-java:5.1.30")
		compile("org.hibernate:hibernate-core:${hibernate.version}")
		compile("org.hibernate:hibernate-entitymanager:${hibernate.version}")
		compile("org.hibernate:hibernate-validator:5.0.2.Final")


		////  COMMON dependencies 
		compile("commons-fileupload:commons-fileupload:1.3")
		compile("commons-io:commons-io:2.4")
		compile("org.apache.commons:commons-lang3:3.3.2")
		compile("commons-codec:commons-codec:1.9")
		compile("com.google.guava:guava:17.0")
		compile("javax.annotation:jsr250-api:1.0")
		compile("javax.inject:javax.inject:1")
		compile("javax.servlet:javax.servlet-api:3.1.0")
		<scope>provided</scope

		compile("javax.servlet:jstl:1.2")
		compile("javax.validation:validation-api:1.1.0.Final")

		////  JODA TIME 
		compile("joda-time:joda-time:2.3")
		compile("joda-time:joda-time-hibernate:1.3")
		compile("org.jadira.usertype:usertype.core:3.1.0.CR10")

		////  SPRING 
		compile("org.aspectj:aspectjweaver:1.7.4")
		compile("org.springframework:spring-aop:${spring.version}")
		compile("org.springframework:spring-beans:${spring.version}")
		compile("org.springframework:spring-context:${spring.version}")
		compile("org.springframework:spring-context-support:${spring.version}")
		compile("org.springframework:spring-core:${spring.version}")
		compile("org.springframework:spring-expression:${spring.version}")
		compile("org.springframework:spring-orm:${spring.version}")
		compile("org.springframework:spring-tx:${spring.version}")
		compile("org.springframework:spring-web:${spring.version}")
		compile("org.springframework:spring-webmvc:${spring.version}")
		compile("org.springframework.data:spring-data-jpa:1.7.1.RELEASE")
		compile("org.springframework.security:spring-security-core:${spring.security.version}")
		compile("org.springframework.security:spring-security-config:${spring.security.version}")
		compile("org.springframework.security:spring-security-crypto:${spring.security.version}")
		compile("org.springframework.security:spring-security-web:${spring.security.version}")
		compile("org.springframework.security:spring-security-ldap:${spring.security.version}")

		////  EMAIL 
		compile("org.freemarker:freemarker:2.3.20")
		compile("javax.mail:mail:1.4.7")
		compile("commons-validator:commons-validator:1.4.0")

		////  Groovy needed for embedded scripting 
		compile("org.codehaus.groovy:groovy-all:2.3.5")

		////  HTTPCLIENT 
		compile("org.apache.httpcomponents:httpclient:4.3.2"

		////  TEST
		testCompile("junit:junit:4.11")
		testCompile("com.jayway.jsonpath:json-path:1.2.0")
		testCompile("org.hamcrest:hamcrest-core:1.3")
		testCompile("org.hamcrest:hamcrest-library:1.3")
		testCompile("org.mockito:mockito-all:1.9.5")
		testCompile("org.springframework:spring-test:${spring.version}")
		testCompile("org.eclipse.jetty:jetty-webapp:${jetty.version}")
		testCompile("org.apache.httpcomponents:httpmime:4.3.5")

	}
}



project(':activiti-app') {
	apply plugin: 'java'
	apply plugin: 'war'
	apply plugin: 'eclipse-wtp'
	
	
	jar {
	    baseName = 'activiti-app'  
	    version =  '6.0.0-' + currentTime
	}
	
	dependencies {

		compile project(":activiti-app-conf") 
		//compile("org.springframework.boot:spring-boot-starter-web")
		compile("mysql:mysql-connector-java:5.1.43")
		compile("com.h2database:h2:1.4.194")
	}
}


project(':activiti-ui') {
	
	dependencies {
		compile project(":activiti-app-rest")
		compile	project(":activiti-app-logic")
 		compile project(":content-storage-api")
 		compile project(":content-storage-fs")
 		compile project(":editor-image-generator")
		compile project(":activiti-app-conf") 
		compile project(':activiti-app')
	}
}

 
 
