{
  "title" : "BPMN 2.0",
  "namespace" : "http://b3mn.org/stencilset/bpmn2.0#",
  "description" : "This is the BPMN 2.0 stencil set specification.",
  "propertyPackages" : [ {
    "name" : "elementbase",
    "properties" : [ {
      "id" : "overrideid",
      "type" : "String",
      "title" : "Id",
      "value" : "",
      "description" : "Unique identifier of the element.",
      "popular" : true
    } ]
  }, {
    "name" : "baseattributes",
    "properties" : [ {
      "id" : "name",
      "type" : "String",
      "title" : "Name",
      "value" : "",
      "description" : "The descriptive name of the BPMN element.",
      "popular" : true,
      "refToView" : "text_name"
    }, {
      "id" : "documentation",
      "type" : "Text",
      "title" : "Documentation",
      "value" : "",
      "description" : "The descriptive name of the BPMN element.",
      "popular" : true
    } ]
  }, {
    "name" : "diagrambase",
    "properties" : [ {
      "id" : "process_id",
      "type" : "String",
      "title" : "Process identifier",
      "value" : "process",
      "description" : "Unique identifier of the process definition.",
      "popular" : true
    }, {
      "id" : "process_author",
      "type" : "String",
      "title" : "Process author",
      "value" : "",
      "description" : "Author of the process definition.",
      "popular" : false
    }, {
      "id" : "process_version",
      "type" : "String",
      "title" : "Process version string (documentation only)",
      "value" : "",
      "description" : "Version identifier for documentation purpose.",
      "popular" : false
    }, {
      "id" : "process_namespace",
      "type" : "String",
      "title" : "Target namespace",
      "value" : "http://www.activiti.org/processdef",
      "description" : "Target namespace for the process definition.",
      "popular" : false
    } ]
  }, {
    "name" : "usertaskbase",
    "properties" : [ {
      "id" : "formkeydefinition",
      "type" : "String",
      "title" : "Form key",
      "value" : "",
      "description" : "Form key of the user task.",
      "popular" : true
    }, {
      "id" : "duedatedefinition",
      "type" : "String",
      "title" : "Due date",
      "value" : "",
      "description" : "Due date of the user task.",
      "popular" : true
    }, {
      "id" : "prioritydefinition",
      "type" : "String",
      "title" : "Priority",
      "value" : "",
      "description" : "Priority of the user task.",
      "popular" : true
    } ]
  }, {
    "name" : "usertaskassignment",
    "properties" : [ {
      "id" : "usertaskassignment",
      "type" : "Complex",
      "title" : "Assignments",
      "value" : "",
      "description" : "Assignment definition for the user task",
      "popular" : true,
      "complexItems" : [ {
        "id" : "assignment_type",
        "name" : "Type",
        "name_de" : "Typ",
        "type" : "Choice",
        "value" : "",
        "width" : 100,
        "optional" : false,
        "items" : [ {
          "id" : "c1",
          "title" : "Assignee",
          "title_de" : "Performer",
          "value" : "assignee",
          "refToView" : ""
        }, {
          "id" : "c2",
          "title" : "Candidate users",
          "title_de" : "HumanPerformer",
          "value" : "candidateUsers",
          "refToView" : ""
        }, {
          "id" : "c3",
          "title" : "Candidate groups",
          "title_de" : "PotentialOwner",
          "value" : "candidateGroups",
          "refToView" : ""
        } ]
      }, {
        "id" : "resourceassignmentexpr",
        "name" : "Resource assignment expression",
        "name_de" : "Zuordnungs-Ausdruck",
        "type" : "String",
        "description" : "This defines the expression used for the resource assignment.",
        "description_de" : "Definiert den Ausdruck, der fr die Zordung von Ressourcen genutzt wird.",
        "value" : "",
        "width" : 200,
        "optional" : true
      } ]
    } ]
  }, {
    "name" : "formdefinition",
    "properties" : [ {
      "id" : "formproperties",
      "type" : "Complex",
      "title" : "Form properties",
      "value" : "",
      "description" : "Definition of the form with a list of form properties",
      "popular" : true,
      "complexItems" : [ {
        "id" : "formproperty_id",
        "name" : "Id",
        "name_de" : "Typ",
        "type" : "String",
        "description" : "This defines the expression used for the resource assignment.",
        "description_de" : "Definiert den Ausdruck, der fr die Zordung von Ressourcen genutzt wird.",
        "value" : "",
        "width" : 150,
        "optional" : false
      }, {
        "id" : "formproperty_name",
        "name" : "Name",
        "name_de" : "Typ",
        "type" : "String",
        "description" : "This defines the expression used for the resource assignment.",
        "description_de" : "Definiert den Ausdruck, der fr die Zordung von Ressourcen genutzt wird.",
        "value" : "",
        "width" : 150,
        "optional" : false
      }, {
        "id" : "formproperty_type",
        "name" : "Type",
        "name_de" : "Typ",
        "type" : "Choice",
        "value" : "",
        "width" : 100,
        "optional" : false,
        "items" : [ {
          "id" : "c1",
          "title" : "String",
          "title_de" : "String",
          "value" : "string",
          "refToView" : ""
        }, {
          "id" : "c2",
          "title" : "Date",
          "title_de" : "Date",
          "value" : "date",
          "refToView" : ""
        }, {
          "id" : "c3",
          "title" : "Long",
          "title_de" : "Long",
          "value" : "long",
          "refToView" : ""
        }, {
          "id" : "c3",
          "title" : "Boolean",
          "title_de" : "Boolean",
          "value" : "boolean",
          "refToView" : ""
        } ]
      }, {
        "id" : "formproperty_expression",
        "name" : "Expression",
        "name_de" : "Typ",
        "type" : "String",
        "description" : "This defines the expression used for the resource assignment.",
        "description_de" : "Definiert den Ausdruck, der fr die Zordung von Ressourcen genutzt wird.",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "formproperty_variable",
        "name" : "Variable",
        "name_de" : "Typ",
        "type" : "String",
        "description" : "This defines the expression used for the resource assignment.",
        "description_de" : "Definiert den Ausdruck, der fr die Zordung von Ressourcen genutzt wird.",
        "value" : "",
        "width" : 200,
        "optional" : false
      } ]
    } ]
  }, {
    "name" : "tasklistenersbase",
    "properties" : [ {
      "id" : "tasklisteners",
      "type" : "multiplecomplex",
      "title" : "Task listeners",
      "value" : "",
      "description" : "Listeners for a user task",
      "popular" : true,
      "complexItems" : [ {
        "id" : "task_listener_event_type",
        "name" : "Event",
        "type" : "Choice",
        "value" : "",
        "width" : 100,
        "optional" : false,
        "items" : [ {
          "id" : "c1",
          "title" : "Create",
          "value" : "create",
          "refToView" : ""
        }, {
          "id" : "c2",
          "title" : "Assignment",
          "value" : "assignment",
          "refToView" : ""
        }, {
          "id" : "c3",
          "title" : "Complete",
          "value" : "complete",
          "refToView" : ""
        }, {
          "id" : "c4",
          "title" : "All Events",
          "value" : "all",
          "refToView" : ""
        } ]
      }, {
        "id" : "task_listener_class",
        "name" : "Class",
        "type" : "String",
        "description" : "Listener class.",
        "value" : "",
        "width" : 200,
        "optional" : true
      }, {
        "id" : "task_listener_expression",
        "name" : "Expression",
        "type" : "String",
        "description" : "Listener expression definition.",
        "value" : "",
        "width" : 200,
        "optional" : true
      }, {
        "id" : "task_listener_delegate_expression",
        "name" : "Delegate expression",
        "type" : "String",
        "description" : "Listener delegate expression definition.",
        "value" : "",
        "width" : 200,
        "optional" : true
      }, {
        "id" : "task_listener_fields",
        "name" : "Fields",
        "type" : "Complex",
        "width" : 100,
        "optional" : false,
        "complexItems" : [ {
          "id" : "task_listener_field_name",
          "name" : "Name",
          "type" : "String",
          "value" : "",
          "width" : 200,
          "optional" : false
        }, {
          "id" : "task_listener_field_value",
          "name" : "String value",
          "type" : "String",
          "value" : "",
          "width" : 200,
          "optional" : false
        }, {
          "id" : "task_listener_field_expression",
          "name" : "Expression",
          "type" : "String",
          "value" : "",
          "width" : 200,
          "optional" : false
        } ]
      } ]
    } ]
  }, {
    "name" : "servicetaskbase",
    "properties" : [ {
      "id" : "servicetaskclass",
      "type" : "String",
      "title" : "Class",
      "value" : "",
      "description" : "Class that implements the service task logic.",
      "popular" : true
    }, {
      "id" : "servicetaskexpression",
      "type" : "String",
      "title" : "Expression",
      "value" : "",
      "description" : "Service task logic defined with an expression.",
      "popular" : true
    }, {
      "id" : "servicetaskdelegateexpression",
      "type" : "String",
      "title" : "Delegate expression",
      "value" : "",
      "description" : "Service task logic defined with a delegate expression.",
      "popular" : true
    }, {
      "id" : "servicetaskresultvariable",
      "type" : "String",
      "title" : "Result variable name",
      "value" : "",
      "description" : "Process variable name to store the service task result.",
      "popular" : true
    }, {
      "id" : "servicetaskfields",
      "type" : "Complex",
      "title" : "Class fields",
      "value" : "",
      "description" : "Field extensions",
      "popular" : true,
      "complexItems" : [ {
        "id" : "servicetask_field_name",
        "name" : "Name",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "servicetask_field_value",
        "name" : "String value",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "servicetask_field_expression",
        "name" : "Expression",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      } ]
    } ]
  }, {
    "name" : "scripttaskbase",
    "properties" : [ {
      "id" : "scriptformat",
      "type" : "String",
      "title" : "Script format",
      "value" : "",
      "description" : "Script format of the script task.",
      "popular" : true
    }, {
      "id" : "scripttext",
      "type" : "Text",
      "title" : "Script",
      "value" : "",
      "description" : "Script text of the script task.",
      "popular" : true
    } ]
  }, {
    "name" : "ruletaskbase",
    "properties" : [ {
      "id" : "ruletask_class",
      "type" : "String",
      "title" : "Class",
      "value" : "",
      "description" : "Class of the rule task.",
      "popular" : true
    }, {
      "id" : "ruletask_variables_input",
      "type" : "String",
      "title" : "Input variables",
      "value" : "",
      "description" : "Input variables of the rule task.",
      "popular" : true
    }, {
      "id" : "ruletask_result",
      "type" : "String",
      "title" : "Result variable",
      "value" : "",
      "description" : "Result variable of the rule task.",
      "popular" : true
    }, {
      "id" : "ruletask_rules",
      "type" : "String",
      "title" : "Rules",
      "value" : "",
      "description" : "Rules of the rule task.",
      "popular" : true
    }, {
      "id" : "ruletask_exclude",
      "type" : "Choice",
      "title" : "Exclude",
      "value" : "No",
      "description" : "Use the rules property as exclusion.",
      "popular" : true,
      "items" : [ {
        "id" : "no",
        "title" : "No",
        "value" : "No"
      }, {
        "id" : "yes",
        "title" : "Yes",
        "value" : "Yes"
      } ]
    } ]
  }, {
    "name" : "mailtaskbase",
    "properties" : [ {
      "id" : "mailtaskto",
      "type" : "Text",
      "title" : "To",
      "value" : "",
      "description" : "The recipients if the e-mail. Multiple recipients are defined in a comma-separated list.",
      "popular" : true
    }, {
      "id" : "mailtaskfrom",
      "type" : "Text",
      "title" : "From",
      "value" : "",
      "description" : "The sender e-mail address. If not provided, the default configured from address is used.",
      "popular" : true
    }, {
      "id" : "mailtasksubject",
      "type" : "Text",
      "title" : "Subject",
      "value" : "",
      "description" : "The subject of the e-mail.",
      "popular" : true
    }, {
      "id" : "mailtaskcc",
      "type" : "Text",
      "title" : "Cc",
      "value" : "",
      "description" : "The cc's of the e-mail. Multiple recipients are defined in a comma-separated list",
      "popular" : true
    }, {
      "id" : "mailtaskbcc",
      "type" : "Text",
      "title" : "Bcc",
      "value" : "",
      "description" : "The bcc's of the e-mail. Multiple recipients are defined in a comma-separated list",
      "popular" : true
    }, {
      "id" : "mailtasktext",
      "type" : "Text",
      "title" : "Text",
      "value" : "",
      "description" : "The content of the e-mail, in case one needs to send plain none-rich e-mails. Can be used in combination with html, for e-mail clients that don't support rich content. The client will then fall back to this text-only alternative.",
      "popular" : true
    }, {
      "id" : "mailtaskhtml",
      "type" : "Text",
      "title" : "Html",
      "value" : "",
      "description" : "A piece of HTML that is the content of the e-mail.",
      "popular" : true
    }, {
      "id" : "mailtaskcharset",
      "type" : "String",
      "title" : "Charset",
      "value" : "",
      "description" : "Allows to change the charset of the email, which is necessary for many non-English languages. ",
      "popular" : true
    } ]
  }, {
    "name" : "callactivitybase",
    "properties" : [ {
      "id" : "callactivitycalledelement",
      "type" : "String",
      "title" : "Called element",
      "value" : "",
      "description" : "Process reference.",
      "popular" : true
    }, {
      "id" : "callactivityinparameters",
      "type" : "Complex",
      "title" : "In parameters",
      "value" : "",
      "description" : "Definition of the input parameters",
      "popular" : true,
      "complexItems" : [ {
        "id" : "ioparameter_source",
        "name" : "Source",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "ioparameter_sourceexpression",
        "name" : "Source expression",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "ioparameter_target",
        "name" : "Target",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      } ]
    }, {
      "id" : "callactivityoutparameters",
      "type" : "Complex",
      "title" : "Out parameters",
      "value" : "",
      "description" : "Definition of the output parameters",
      "popular" : true,
      "complexItems" : [ {
        "id" : "ioparameter_source",
        "name" : "Source",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "ioparameter_sourceexpression",
        "name" : "Source expression",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      }, {
        "id" : "ioparameter_target",
        "name" : "Target",
        "type" : "String",
        "value" : "",
        "width" : 200,
        "optional" : false
      } ]
    } ]
  }, {
    "name" : "sequenceflowbase",
    "properties" : [ {
      "id" : "conditionsequenceflow",
      "type" : "Text",
      "title" : "Flow condition",
      "value" : "",
      "description" : "The condition of the sequence flow",
      "popular" : true
    }, {
      "id" : "defaultflow",
      "type" : "Choice",
      "title" : "Default flow",
      "value" : "None",
      "description" : "Define the sequence flow as default",
      "popular" : true,
      "items" : [ {
        "id" : "none",
        "title" : "Standard",
        "title_de" : "Standard",
        "value" : "None"
      }, {
        "id" : "default",
        "title" : "Default Flow",
        "title_de" : "Standardfluss",
        "value" : "Default",
        "icon" : "connector/list/type.default.png",
        "refToView" : "default"
      } ]
    }, {
      "id" : "conditionalflow",
      "type" : "Choice",
      "title" : "Conditional flow",
      "value" : "None",
      "description" : "Define the sequence flow with a condition",
      "popular" : true,
      "items" : [ {
        "id" : "none",
        "title" : "Standard",
        "title_de" : "Standard",
        "value" : "None"
      }, {
        "id" : "default",
        "title" : "Conditional Flow",
        "value" : "Conditional",
        "icon" : "connector/list/type.expression.png",
        "refToView" : "conditional"
      } ]
    } ]
  }, {
    "name" : "timerdefinition",
    "properties" : [ {
      "id" : "timerdurationdefinition",
      "type" : "String",
      "title" : "Time duration (e.g. PT5M)",
      "value" : "",
      "description" : "Define the timer with a ISO-8601 duration.",
      "popular" : true
    }, {
      "id" : "timerdatedefinition",
      "type" : "String",
      "title" : "Time date in ISO-8601",
      "value" : "",
      "description" : "Define the timer with a ISO-8601 date definition.",
      "popular" : true
    }, {
      "id" : "timercycledefinition",
      "type" : "String",
      "title" : "Time cycle (e.g. R3/PT10H)",
      "value" : "",
      "description" : "Define the timer with a ISO-8601 cycle.",
      "popular" : true
    } ]
  }, {
    "name" : "messagerefdefinition",
    "properties" : [ {
      "id" : "messageref",
      "type" : "String",
      "title" : "Message reference",
      "value" : "",
      "description" : "Define the message name.",
      "popular" : true
    } ]
  }, {
    "name" : "signalrefdefinition",
    "properties" : [ {
      "id" : "signalref",
      "type" : "String",
      "title" : "Signal reference",
      "value" : "",
      "description" : "Define the signal name.",
      "popular" : true
    } ]
  }, {
    "name" : "errorrefdefinition",
    "properties" : [ {
      "id" : "errorref",
      "type" : "String",
      "title" : "Error reference",
      "value" : "",
      "description" : "Define the error name.",
      "popular" : true
    } ]
  }, {
    "name" : "nonestarteventbase",
    "properties" : [ {
      "id" : "initiator",
      "type" : "String",
      "title" : "Initiator",
      "value" : "",
      "description" : "Initiator of the process.",
      "popular" : true
    } ]
  }, {
    "name" : "textannotationbase",
    "properties" : [ {
      "id" : "text",
      "type" : "String",
      "title" : "Text",
      "value" : "",
      "description" : "The text of the text annotation.",
      "popular" : true,
      "refToView" : "text"
    } ]
  }, {
    "name" : "asynchronousbase",
    "properties" : [ {
      "id" : "asynchronousdefinition",
      "type" : "Choice",
      "title" : "Asynchronous",
      "value" : "No",
      "description" : "Define the activity as asynchronous.",
      "popular" : true,
      "items" : [ {
        "id" : "no",
        "title" : "No",
        "value" : "No"
      }, {
        "id" : "yes",
        "title" : "Yes",
        "value" : "Yes"
      } ]
    }, {
      "id" : "exclusivedefinition",
      "type" : "Choice",
      "title" : "Exclusive",
      "value" : "Yes",
      "description" : "Define the activity as exclusive.",
      "popular" : true,
      "items" : [ {
        "id" : "no",
        "title" : "No",
        "value" : "No"
      }, {
        "id" : "yes",
        "title" : "Yes",
        "value" : "Yes"
      } ]
    } ]
  }, {
    "name" : "executionlistenersbase",
    "properties" : [ {
      "id" : "executionlisteners",
      "type" : "multiplecomplex",
      "title" : "Execution listeners",
      "value" : "",
      "description" : "Listeners for an activity, process, sequence flow, start and end event.",
      "popular" : true,
      "complexItems" : [ {
        "id" : "execution_listener_event_type",
        "name" : "Event",
        "type" : "Choice",
        "value" : "",
        "width" : 200,
        "optional" : false,
        "items" : [ {
          "id" : "c1",
          "title" : "Start",
          "value" : "start",
          "refToView" : ""
        }, {
          "id" : "c2",
          "title" : "End",
          "value" : "end",
          "refToView" : ""
        }, {
          "id" : "c2",
          "title" : "Take (only sequence flows)",
          "value" : "take",
          "refToView" : ""
        } ]
      }, {
        "id" : "execution_listener_class",
        "name" : "Class",
        "type" : "String",
        "description" : "Listener class.",
        "value" : "",
        "width" : 200,
        "optional" : true
      }, {
        "id" : "execution_listener_expression",
        "name" : "Expression",
        "type" : "String",
        "description" : "Listener expression definition.",
        "value" : "",
        "width" : 200,
        "optional" : true
      }, {
        "id" : "execution_listener_delegate_expression",
        "name" : "Delegate expression",
        "type" : "String",
        "description" : "Listener delegate expression definition.",
        "value" : "",
        "width" : 200,
        "optional" : true
      }, {
        "id" : "execution_listener_fields",
        "name" : "Fields",
        "type" : "Complex",
        "width" : 100,
        "optional" : false,
        "complexItems" : [ {
          "id" : "execution_listener_field_name",
          "name" : "Name",
          "type" : "String",
          "value" : "",
          "width" : 200,
          "optional" : false
        }, {
          "id" : "execution_listener_field_value",
          "name" : "String value",
          "type" : "String",
          "value" : "",
          "width" : 200,
          "optional" : false
        }, {
          "id" : "execution_listener_field_expression",
          "name" : "Expression",
          "type" : "String",
          "value" : "",
          "width" : 200,
          "optional" : false
        } ]
      } ]
    } ]
  }, {
    "name" : "customformdefinition",
    "properties" : [ {
      "id" : "customformdefinition",
      "type" : "Choice",
      "title" : "Custom form",
      "value" : "",
      "description" : "Des A",
      "popular" : true,
      "items" : [ {
        "id" : "1",
        "title" : "form 1",
        "value" : "1"
      }, {
        "id" : "2",
        "title" : "form 2",
        "value" : "2"
      }, {
        "id" : "3",
        "title" : "form 3",
        "value" : "3"
      } ]
    } ]
  }, {
    "name" : "loopcharacteristics",
    "properties" : [ {
      "id" : "looptype",
      "type" : "Choice",
      "title" : "Loop type",
      "value" : "None",
      "description" : "Repeated activity execution (parallel or sequential) can be displayed through different loop types",
      "popular" : false,
      "items" : [ {
        "id" : "c1",
        "title" : "None",
        "title_de" : "Keine Schleife",
        "value" : "None",
        "refToView" : "none"
      }, {
        "id" : "c2",
        "title" : "Standard",
        "title_de" : "Standard",
        "value" : "Standard",
        "icon" : "activity/list/looptype.standard.png",
        "refToView" : "loop"
      }, {
        "id" : "c3",
        "title" : "MI Parallel",
        "title_de" : "MI parallel",
        "value" : "Parallel",
        "icon" : "activity/list/mi.parallel.png",
        "refToView" : "parallel"
      }, {
        "id" : "c4",
        "title" : "MI Sequential",
        "title_de" : "MI sequentialisiert",
        "value" : "Sequential",
        "icon" : "activity/list/mi.sequential.png",
        "refToView" : "sequential"
      } ]
    } ]
  }, {
    "name" : "activity",
    "properties" : [ {
      "id" : "multiinstance_sequential",
      "type" : "Choice",
      "title" : "Sequential (Multi-instance)",
      "value" : "Yes",
      "description" : "Define the multi instance as sequential.",
      "popular" : true,
      "items" : [ {
        "id" : "no",
        "title" : "No",
        "value" : "No"
      }, {
        "id" : "yes",
        "title" : "Yes",
        "value" : "Yes"
      } ]
    }, {
      "id" : "multiinstance_cardinality",
      "type" : "String",
      "title" : "Cardinality (Multi-instance)",
      "value" : "",
      "description" : "Define the cardinality of multi instance.",
      "popular" : true
    }, {
      "id" : "multiinstance_collection",
      "type" : "String",
      "title" : "Collection (Multi-instance)",
      "value" : "",
      "description" : "Define the collection for the multi instance.",
      "popular" : true
    }, {
      "id" : "multiinstance_variable",
      "type" : "String",
      "title" : "Element variable (Multi-instance)",
      "value" : "",
      "description" : "Define the element variable for the multi instance.",
      "popular" : true
    }, {
      "id" : "multiinstance_condition",
      "type" : "String",
      "title" : "Completion condition (Multi-instance)",
      "value" : "",
      "description" : "Define the completion condition for the multi instance.",
      "popular" : true
    }, {
      "id" : "isforcompensation",
      "type" : "Boolean",
      "title" : "Is for compensation",
      "value" : "false",
      "description" : "A flag that identifies whether this activity is intended for the purposes of compensation.",
      "popular" : false,
      "refToView" : "compensation"
    } ]
  } ,
 		{
 			"name":"processid",
 			"properties": [
 				{
 					"id":"processid",
 					"type":"String",
 					"title":"ProcessID",
 					"description":"Defines the ID of the container process used in the exported BPMN 2.0 XML. The ID has to be a valid XSD:id string and identifies a process unambiguous.",
 					"value":"",
 					"optional":true,
 					"wraplines":false
 				}
 			]
 		},
		{
			"name" : "bgColor",
			"properties" : [
				{
					"id":"bgcolor",
					"type":"Color",
					"title":"BackgroundColor",
					"value":"#ffffff",
					"description":"Change the background color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView": "fill_el",
					"fill":true,
					"stroke":false
				}
			]
		},
		{
			"name" : "borderColor",
			"properties" : [
				{
					"id":"bordercolor",
					"type":"Color",
					"title":"Border color",
					"value":"#000000",
					"description":"Change the border color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":"bg_frame",
					"fill":false,
					"stroke":true
				}
			]
	    },
		
		
  		// pool property package
  
		{
			"name":"process",
			"properties":[
				{
					"id":"processtype",
					"type":"Choice",
					"title":"Processtype",
					"value":"None",
					"description":"The process type attribute provides additional information about the level of abstraction modeled by this process.",
					"readonly":false,
					"optional":false,
					"popular" : true,
					"items": [
						{
							"id":"c1",
							"title":"None",
							"value":"None"
						},
						{
							"id":"c2",
							"title":"Private",
							"value":"Private"
						},
						{
							"id":"c4",
							"title":"Public",
							"value":"Public"
						}
					]
				},
				{
					"id":"isclosed",
					"type":"Boolean",
					"title":"Is closed",
					"value":false,
					"description":"A boolean value specifying whether interactions, such as sending and receiving messages and events, not modeled in the process can occur when the process is executed or performed. If the value is true, they may not occur. If the value is false, they may occur.",
					"readonly":false,
					"optional":true
				},
				{
					"id":"isexecutable",
					"type":"Boolean",
					"title":"Is executable",
					"value":false,
					"description":"An optional boolean value specifying whether the process is executable.",
					"readonly":false,
					"optional":true
				}
			]
		},
		{
			"name" : "participantmultiplicity",
			"properties" : [
				{
					"id" : "multiinstance",
					"type" : "Boolean",
					"title" : "Is multi instance participant",
					"value" : false,
					"description" : "Is used to define the multiplicity of a participant (multi instance).",
					"readonly" : false,
					"optional" : true,
					"refToView" : "multiInstance"
				},
				{
					"id" : "minimum",
					"type" : "Integer",
					"title" : "Minimum",
					"value" : 2,
					"description" : "The minimum attribute defines minimum number of participants that must be involved in the collaboration.",
					"readonly" : false,
					"optional" : true
				},
				{
					"id" : "maximum",
					"type" : "Integer",
					"title" : "Maximum",
					"value" : 2,
					"description" : "The maximum attribute defines the maximum number of participants that may be involved in the collaboration.",
					"readonly" : false,
					"optional" : true
				}
			]
		},
  
  
		{
			"name" : "pool",
			"properties" : [
				{
					"id":"boundaryvisible",
					"type":"Boolean",
					"title":"Boundary visible",
					"value":true,
					"description":"Defines if the rectangular boundary for the pool is visible.",
					"readonly":false,
					"optional":false,
					"refToView": ["border", "c", "caption", "captionDisableAntialiasing"],
					"visible":false
				},
				{
					"id":"processname",
					"type":"String",
					"title":"Processname",
					"value":"",
					"description":"The name of the participants process.",
					"readonly":false,
					"optional":false,
					"refToView":"",
					"length":"30"
				},
				{
					"id":"status",
					"type":"Choice",
					"title":"State",
					"":"",
					"value":"None",
					"description":"The current state of the participants process execution.",
					"readonly":false,
					"optional":false,
					"popular" : true,
					"items": [
						{
							"id":"c1",
							"title":"None",
							"value":"None"
						},
						{
							"id":"c2",
							"title":"Ready",
							"value":"Ready"
						},
						{
							"id":"c3",
							"title":"Active",
							"value":"Active"
						},
						{
							"id":"c4",
							"title":"Cancelled",
							"value":"Cancelled"
						},
						{
							"id":"c5",
							"title":"Aborting",
							"value":"Aborting"
						},
						{
							"id":"c6",
							"title":"Aborted",
							"value":"Aborted"
						},
						{
							"id":"c7",
							"title":"Completing",
							"value":"Completing"
						},
						{
							"id":"c8",
							"title":"Completed",
							"value":"Completed"
						}
					]
				},
				{
					"id":"adhoc",
					"type":"Boolean",
					"title":"Ad hoc",
					"value":false,
					"description":"Defines whether the Pool acts like an ad-hoc subprocess.",
					"readonly":false,
					"optional":false
				},
				{
					"id":"adhocordering",
					"type":"Choice",
					"title":"Ad hoc ordering",
					"value":"Parallel",
					"description":"This attribute defines if the activities within the subprocess can be performed in parallel or must be performed sequentially. The default is parallel.",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"items": [
						{
							"id":"c1",
							"title":"Sequential",
							"value":"Sequential",
							"refToView":""
						},
						{
							"id":"c2",
							"title":"Parallel",
							"value":"Parallel",
							"refToView":""
						}
					]
				},
				{
					"id":"adhoccompletioncondition",
					"type":"String",
					"title":"Ad hoc completion condition",
					"value":"",
					"description":"This attribute defines a Boolean Expression that, when evaluated to true, cancels the remaining Activity instances and produces a token.",
					"readonly":false,
					"optional":true,
					"refToView":""
				},
				{
					"id":"suppressjoinfailure",
					"type":"Boolean",
					"title":"Suppress join failure",
					"value":false,
					"description":"",
					"readonly":false,
					"optional":false
				},
				{
					"id":"enableinstancecompensation",
					"type":"Boolean",
					"title":"Enable boolean compensation",
					"value":false,
					"description":"",
					"readonly":false,
					"optional":false
				},
				{
					"id":"processcategories",
					"type":"String",
					"title":"Process categories",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"wrapLines":true
				},
				{
					"id":"processdocumentation",
					"type":"String",
					"title":"Process documentation",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"length":"",
					"wrapLines":true
				}
			]
		}
  
  
   ],
  "stencils" : [ {
    "type" : "node",
    "id" : "BPMNDiagram",
    "title" : "BPMN-Diagram",
    "description" : "A BPMN 2.0 diagram.",
    "view" : "diagram.svg",
    "icon" : "diagram.png",
    "groups" : [ "Diagram" ],
    "mayBeRoot" : true,
    "hide" : true,
    "propertyPackages" : [ "baseattributes", "diagrambase", "executionlistenersbase" ],
    "roles" : [ ]
  }, 
  
  
  		// Swimlanes
		
		{
			"type" : 			"node",
			"id" :				"Pool",
			"title" :			"Pool",
			"groups" :			["Swimlanes"],
			"description" :		"Pools and Lanes represent responsibilities for activities in a process. A pool or a lane can be an organization, a role or a system.",
			"view" :			"swimlane/pool.svg",
			"icon" :			"swimlane/pool.png",
			"propertyPackages": [
				"elementbase", "baseattributes",
				"pool",
				"participantmultiplicity",
				"process",
				"bgColor",
				"borderColor",
				"processid"
			],
			"properties" : [
				{
					"id":"bordercolor",
					"type":"Color",
					"title":"Border color",
					"value":"#000000",
					"description":"Change the border color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":["c", "caption", "captionDisableAntialiasing", "multiinstancepath"],
					"fill":false,
					"stroke":true
				}
			],
			"roles" : 			[
				"all",
				"messageflow_start",
				"messageflow_end",
				"fromtoall",
				"canContainArtifacts"				
			],
			"layout" : [{"type" : "layout.bpmn2_0.pool", "orientation" : "horizontal"}]
		}
		
		/* not sure how to store into BPMN file
		,
		{
			"type" : 			"node",
			"id" :				"CollapsedPool",
			"title" :			"Collapsed Pool",
			"groups" :			["Swimlanes"],
			"description" :		"Collapsed pools hide all internals of the contained processes ('black box').",
			"view" :			"swimlane/collapsed.pool.svg",
			"icon" :			"swimlane/lane.png",
			"propertyPackages": [
				"elementbase", "baseattributes",
				"pool",
				"participantmultiplicity",
				"process",
				"bgColor",
				"borderColor",
				"processid"
			],
			"properties" : 		[
				{
					"id":"bgcolor",
					"type":"Color",
					"title":"Background color",
					"value":"#ffffff",
					"description":"Change the background color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":"fill_el",
					"fill":true,
					"stroke":false,
					"lightness" : 0.5
				},
				{
					"id":"bordercolor",
					"type":"Color",
					"title":"Border color",
					"value":"#000000",
					"description":"Change the border color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":["c", "border", "multiinstancepath"],
					"fill":false,
					"stroke":true
				}
				
			],
			"roles" :		 	[
				"all",
				"messageflow_start",
				"messageflow_end",
				"fromtoall"				
			]
		} */
		,
		{
			"type" : 			"node",
			"id" :				"Lane",
			"title" :			"Lane",
			"groups" :			["Swimlanes"],
			"description" :		"Pools and lanes represent responsibilities for activities in a process. A pool or a lane can be an organization, a role or a system. Lanes subdivide pools or other lanes hierarchically.",
			"view" :			"swimlane/lane.svg",
			"icon" :			"swimlane/lane.png",
			"propertyPackages": [
				"elementbase", "baseattributes",
				"borderColor"
			],
			"properties" : 		[
				{
					"id":"parentpool",
					"type":"String",
					"title":"Parent pool",
					"value":"",
					"description":"The specified pool the lane belongs to.",
					"readonly":false,
					"optional":false,
					"refToView":"",
					"length":"30"
				},
				{
					"id":"parentlane",
					"type":"String",
					"title":"Parent lane",
					"value":"",
					"description":"The specified lane the lane belongs to.",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"length":"30"
				},
				{
					"id":"showcaption",
					"type":"Boolean",
					"title":"Show caption",
					"value":"true",
					"description":"",
					"readonly":true,
					"optional":false,
					"refToView": ["caption", "captionDisableAntialiasing", "text_name"],
					"fill":true,
					"visible":false,
					"stroke":false,
					"hidden":true
				},
				{
					"id":"bgcolor",
					"type":"Color",
					"title":"Background color",
					"value":"",
					"description":"Change the background color for a visual differentiation.",
					"readonly":false,
					"optional":true,
					"refToView":["fill_el"],
					"fill":true,
					"stroke":false,
					"lightness": 0.5
				},
				{
					"id":"bordercolor",
					"type":"Color",
					"title":"Border color",
					"value":"#000000",
					"description":"Change the border color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":["border", "captionDisableAntialiasing"],
					"fill":false,
					"stroke":true
				}
				
			],
			"roles": 			[
				"PoolChild",
				"fromtoall",
				"canContainArtifacts"				
			]
		}
		/* Not sure how to store into BPMN file
		,
		
		{
            "type" :            "node",
            "id" :              "processparticipant",
            "title" :           "Additional Participant",
            "groups" :          ["Swimlanes"],
            "description" :     "An additional participant can be connected to a task or sub process. It is used to visualize additional associations of roles or individuals to the respective activity (e.g. responsibility, informed persons, etc.).",
            "view" :            "swimlane/process.participant.svg",
            "icon" :            "swimlane/process.participant.png",
            "defaultAlign" :    [
            						{"align": "northeast"}, 
            						{"parentRole": "VerticalPool", "align": "southeast"},
            						{"orientation": "vertical", "align": "southeast"}
            					],
            "propertyPackages": [
                "elementbase", "baseattributes",
                "flowElement",
                "artifact",
                "bgColor",
				"borderColor"
            ],
            "properties" : [
            	{
					"id":"bordercolor",
					"type":"Color",
					"title":"Border color",
					"value":"#000000",
					"description":"Change the border color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":["bg_frame", "bg_frame2", "circle1", "path1", "path2"],
					"fill":false,
					"stroke":true
				}
			],
            "roles": [
                "all",
                "from_participant",
                "to_participant",
                "fromtoall",
                "eventSubprocessElement"
            ]
        }
        */
  ,
  
   // Start Events
  {
    "type" : "node",
    "id" : "StartNoneEvent",
    "title" : "Start event",
    "description" : "A start event without a specific trigger",
    "view" : "startevent/none.svg",
    "icon" : "startevent/none.png",
    "groups" : [ "Start Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "formdefinition", "nonestarteventbase", "executionlistenersbase" ],
    "roles" : [ "Startevents_all", "sequence_start", "StartEventsMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "StartTimerEvent",
    "title" : "Start timer event",
    "description" : "A start event with a timer trigger",
    "view" : "startevent/timer.svg",
    "icon" : "startevent/timer.png",
    "groups" : [ "Start Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "timerdefinition", "executionlistenersbase" ],
    "roles" : [ "Startevents_all", "sequence_start", "StartEventsMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "StartMessageEvent",
    "title" : "Start message event",
    "description" : "A start event with a message trigger",
    "view" : "startevent/message.svg",
    "icon" : "startevent/message.png",
    "groups" : [ "Start Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "messagerefdefinition", "executionlistenersbase" ],
    "roles" : [ "Startevents_all", "sequence_start", "StartEventsMorph", "messageflow_end", "all" ]
  }, {
    "type" : "node",
    "id" : "StartErrorEvent",
    "title" : "Start error event",
    "description" : "A start event that catches a thrown BPMN error",
    "view" : "startevent/error.svg",
    "icon" : "startevent/error.png",
    "groups" : [ "Start Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "errorrefdefinition", "executionlistenersbase" ],
    "roles" : [ "Startevents_all", "sequence_start", "StartEventsMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "UserTask",
    "title" : "User task",
    "description" : "A manual task assigned to a specific person",
    "view" : "activity/usertask.svg",
    "icon" : "activity/list/type.user.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "usertaskbase", "usertaskassignment", "formdefinition", "tasklistenersbase", "asynchronousbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "ServiceTask",
    "title" : "Service task",
    "description" : "An automatic task with service logic",
    "view" : "activity/servicetask.svg",
    "icon" : "activity/list/type.service.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "servicetaskbase", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "messageflow_start", "all" ]
  }, {
    "type" : "node",
    "id" : "ScriptTask",
    "title" : "Script task",
    "description" : "An automatic task with script logic",
    "view" : "activity/scripttask.svg",
    "icon" : "activity/list/type.script.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "scripttaskbase", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "BusinessRule",
    "title" : "Business rule task",
    "description" : "An automatic task with rule logic",
    "view" : "activity/businessruletask.svg",
    "icon" : "activity/list/type.business.rule.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "ruletaskbase", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "ReceiveTask",
    "title" : "Receive task",
    "description" : "An task that waits for a signal",
    "view" : "activity/receivetask.svg",
    "icon" : "activity/list/type.receive.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "messageflow_end", "all" ]
  }, {
    "type" : "node",
    "id" : "ManualTask",
    "title" : "Manual task",
    "description" : "An automatic task with no logic",
    "view" : "activity/manualtask.svg",
    "icon" : "activity/list/type.manual.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "messageflow_start", "all" ]
  }, {
    "type" : "node",
    "id" : "MailTask",
    "title" : "Mail task",
    "description" : "An mail task",
    "view" : "activity/sendtask.svg",
    "icon" : "activity/list/type.send.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "mailtaskbase", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "messageflow_start", "all" ]
  }, {
    "type" : "node",
    "id" : "SendTask",
    "title" : "Send task",
    "description" : "A send task",
    "view" : "activity/sendtask.svg",
    "icon" : "activity/list/type.send.png",
    "groups" : [ "Activities" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "ActivitiesMorph", "messageflow_start", "all" ]
  }, {
    "type" : "node",
    "id" : "SubProcess",
    "title" : "Sub process",
    "description" : "A sub process scope",
    "view" : "activity/subprocess.expanded.svg",
    "icon" : "activity/expanded.subprocess.png",
    "groups" : [ "Structural" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "asynchronousbase", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "all" ]
  }, {
    "type" : "node",
    "id" : "EventSubProcess",
    "title" : "Event sub process",
    "description" : "A event sub process scope",
    "view" : "activity/event.subprocess.svg",
    "icon" : "activity/event.subprocess.png",
    "groups" : [ "Structural" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "asynchronousbase", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "all" ]
  }, {
    "type" : "node",
    "id" : "CallActivity",
    "title" : "Call activity",
    "description" : "A call activity",
    "view" : "activity/callactivity.svg",
    "icon" : "activity/task.png",
    "groups" : [ "Structural" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "callactivitybase", "asynchronousbase", "executionlistenersbase", "loopcharacteristics", "activity" ],
    "roles" : [ "sequence_start", "Activity", "sequence_end", "all" ]
  }, {
    "type" : "node",
    "id" : "ExclusiveGateway",
    "title" : "Exclusive gateway",
    "description" : "A choice gateway",
    "view" : "gateway/exclusive.databased.svg",
    "icon" : "gateway/exclusive.databased.png",
    "groups" : [ "Gateways" ],
    "propertyPackages" : [ "elementbase", "baseattributes" ],
    "roles" : [ "sequence_start", "sequence_end", "GatewaysMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "ParallelGateway",
    "title" : "Parallel gateway",
    "description" : "A parallel gateway",
    "view" : "gateway/parallel.svg",
    "icon" : "gateway/parallel.png",
    "groups" : [ "Gateways" ],
    "propertyPackages" : [ "elementbase", "baseattributes" ],
    "roles" : [ "sequence_start", "sequence_end", "GatewaysMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "InclusiveGateway",
    "title" : "Inclusive gateway",
    "description" : "An inclusive gateway",
    "view" : "gateway/inclusive.svg",
    "icon" : "gateway/inclusive.png",
    "groups" : [ "Gateways" ],
    "propertyPackages" : [ "elementbase", "baseattributes" ],
    "roles" : [ "sequence_start", "sequence_end", "GatewaysMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "EventGateway",
    "title" : "Event gateway",
    "description" : "An event gateway",
    "view" : "gateway/eventbased.svg",
    "icon" : "gateway/eventbased.png",
    "groups" : [ "Gateways" ],
    "propertyPackages" : [ "elementbase", "baseattributes" ],
    "roles" : [ "sequence_start", "sequence_end", "GatewaysMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "BoundaryErrorEvent",
    "title" : "Boundary error event",
    "description" : "A boundary event that catches a BPMN error",
    "view" : "intermediateevent/error.svg",
    "icon" : "catching/error.png",
    "groups" : [ "Boundary Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "errorrefdefinition" ],
    "roles" : [ "sequence_start", "BoundaryEventsMorph", "IntermediateEventOnActivityBoundary" ]
  }, {
    "type" : "node",
    "id" : "BoundaryTimerEvent",
    "title" : "Boundary timer event",
    "description" : "A boundary event with a timer trigger",
    "view" : "intermediateevent/timer.svg",
    "icon" : "catching/timer.png",
    "groups" : [ "Boundary Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "timerdefinition" ],
    "roles" : [ "sequence_start", "BoundaryEventsMorph", "IntermediateEventOnActivityBoundary" ]
  }, {
    "type" : "node",
    "id" : "BoundarySignalEvent",
    "title" : "Boundary signal event",
    "description" : "A boundary event with a signal trigger",
    "view" : "intermediateevent/signal.catching.svg",
    "icon" : "catching/signal.png",
    "groups" : [ "Boundary Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "signalrefdefinition" ],
    "roles" : [ "sequence_start", "BoundaryEventsMorph", "IntermediateEventOnActivityBoundary" ]
  }, {
    "type" : "node",
    "id" : "CatchTimerEvent",
    "title" : "Intermediate timer catching event",
    "description" : "An intermediate catching event with a timer trigger",
    "view" : "intermediateevent/timer.svg",
    "icon" : "catching/timer.png",
    "groups" : [ "Intermediate Catching Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "timerdefinition", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "sequence_end", "CatchEventsMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "CatchSignalEvent",
    "title" : "Intermediate signal catching event",
    "description" : "An intermediate catching event with a signal trigger",
    "view" : "intermediateevent/signal.catching.svg",
    "icon" : "catching/signal.png",
    "groups" : [ "Intermediate Catching Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "signalrefdefinition", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "sequence_end", "CatchEventsMorph", "all" ]
  }, {
    "type" : "node",
    "id" : "CatchMessageEvent",
    "title" : "Intermediate message catching event",
    "description" : "An intermediate catching event with a message trigger",
    "view" : "intermediateevent/message.catching.svg",
    "icon" : "catching/message.png",
    "groups" : [ "Intermediate Catching Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "messagerefdefinition", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "sequence_end", "CatchEventsMorph", "messageflow_end", "all" ]
  }, {
    "type" : "node",
    "id" : "ThrowNoneEvent",
    "title" : "Intermediate none throwing event",
    "description" : "An intermediate event without a specific trigger",
    "view" : "intermediateevent/none.svg",
    "icon" : "throwing/none.png",
    "groups" : [ "Intermediate Throwing Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "ThrowEventsMorph", "sequence_end", "all" ]
  }, {
    "type" : "node",
    "id" : "ThrowSignalEvent",
    "title" : "Intermediate signal throwing event",
    "description" : "An intermediate event with a signal trigger",
    "view" : "intermediateevent/signal.throwing.svg",
    "icon" : "throwing/signal.png",
    "groups" : [ "Intermediate Throwing Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "signalrefdefinition", "executionlistenersbase" ],
    "roles" : [ "sequence_start", "ThrowEventsMorph", "sequence_end", "all" ]
  }, {
    "type" : "node",
    "id" : "EndNoneEvent",
    "title" : "End event",
    "description" : "An end event without a specific trigger",
    "view" : "endevent/none.svg",
    "icon" : "endevent/none.png",
    "groups" : [ "End Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "executionlistenersbase" ],
    "roles" : [ "EndEventsMorph", "sequence_end", "all" ]
  }, {
    "type" : "node",
    "id" : "EndErrorEvent",
    "title" : "End error event",
    "description" : "An end event that throws an error event",
    "view" : "endevent/error.svg",
    "icon" : "endevent/error.png",
    "groups" : [ "End Events" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "errorrefdefinition", "executionlistenersbase" ],
    "roles" : [ "EndEventsMorph", "sequence_end", "all" ]
  }, {
    "type" : "edge",
    "id" : "SequenceFlow",
    "title" : "Sequence flow",
    "description" : "Sequence flow defines the execution order of activities.",
    "view" : "connector/sequenceflow.svg",
    "icon" : "connector/sequenceflow.png",
    "groups" : [ "Connecting Objects" ],
    "layout" : [ {
      "type" : "layout.bpmn2_0.sequenceflow"
    } ],
    "propertyPackages" : [ "elementbase", "baseattributes", "sequenceflowbase" ],
    "roles" : [ "ConnectingObjectsMorph", "all" ]
  }, {
    "type" : "edge",
    "id" : "Association",
    "title" : "Association",
    "description" : "Associates a text annotation with an element.",
    "view" : "connector/association.undirected.svg",
    "icon" : "connector/association.undirected.png",
    "groups" : [ "Connecting Objects" ],
    "layout" : [ {
      "type" : "layout.bpmn2_0.sequenceflow"
    } ],
    "propertyPackages" : [ "elementbase", "baseattributes" ],
    "roles" : [ "ConnectingObjectsMorph", "all" ]
  }, 
  {
			"type": "edge",
			"id":"MessageFlow",
			"title":"Message Flow",
			"description":"Message flow symbolizes information flow across organizational boundaries. Message flow can be attached to pools, activities or message events. The order of message exchanges can be specified by combining message flow and sequence flow.",
			"groups":["Connecting Objects"],
			"view":"connector/messageflow.svg",
			"icon":"connector/messageflow.png",
			"keepState" : true,
			"propertyPackages":[
				"baseAttributes"
			],
			"properties" : [
				{
					"id":"bordercolor",
					"type":"Color",
					"title":"Border color",
					"value":"#000000",
					"description":"Change the border color for a visual differentiation.",
					"readonly":false,
					"optional":false,
					"refToView":["bg_frame", "arrowhead", "arrowhead2"],
					"fill":false,
					"stroke":true
				}
			],
			"layout" : [{"type" : "layout.bpmn2_0.messageflow"}],
			"roles": [
				"ConnectingObjectsMorph",
				"MessageContainer",
				"fromtoall"
			]
		}
  ,
  
  
  {
    "type" : "node",
    "id" : "TextAnnotation",
    "title" : "Text annotation",
    "description" : "Annotates elements with description text.",
    "view" : "artifact/text.annotation.svg",
    "icon" : "artifact/text.annotation.png",
    "groups" : [ "Artifacts" ],
    "propertyPackages" : [ "elementbase", "baseattributes", "textannotationbase" ],
    "roles" : [ "all" ]
  }
   ],
  "rules" : {
    "cardinalityRules" : [ {
      "role" : "Startevents_all",
      "incomingEdges" : [ {
        "role" : "SequenceFlow",
        "maximum" : 0
      } ]
    }, {
      "role" : "Endevents_all",
      "outgoingEdges" : [ {
        "role" : "SequenceFlow",
        "maximum" : 0
      } ]
    } ],
    
    
    "connectionRules" : [ {
      "role" : "SequenceFlow",
      "connects" : [ {
        "from" : "sequence_start",
        "to" : [ "sequence_end" ]
      } ]
    }, {
      "role" : "Association",
      "connects" : [ {
        "from" : "sequence_start",
        "to" : [ "TextAnnotation" ]
      } ]
    }, {
      "role" : "Association",
      "connects" : [ {
        "from" : "TextAnnotation",
        "to" : [ "sequence_end" ]
      } ]
    }, {
      "role" : "IntermediateEventOnActivityBoundary",
      "connects" : [ {
        "from" : "Activity",
        "to" : [ "IntermediateEventOnActivityBoundary" ]
      } ]
    }, {
	  "role":"MessageFlow",
	  "connects": [ {
		"from":"messageflow_start",
		"to":["messageflow_end"]
	  } ]
	} ],
    
    
    "containmentRules" : [ {
      "role" : "BPMNDiagram",
      "contains" : [ "all" ]
    }, {
      "role" : "SubProcess",
      "contains" : [ "sequence_start", "sequence_end", "from_task_event", "to_task_event", "EventSubprocess", "TextAnnotation" ]
    }, {
      "role" : "EventSubProcess",
      "contains" : [ "sequence_start", "sequence_end", "from_task_event", "to_task_event", "TextAnnotation" ]
    },{
	  "role" : "Pool",
	  "contains" : ["Lane"]
	},{
	  "role" : "Lane",
	  "contains" : ["Lane", "sequence_start", "sequence_end", "DataObjectMorph", "TextAnnotationMorph", "from_participant", "EventSubprocess", "CollapsedEventSubprocess"]
	} ],
	
    "morphingRules" : [ {
      "role" : "ActivitiesMorph",
      "baseMorphs" : [ "UserTask" ],
      "preserveBounds" : true
    }, {
      "role" : "GatewaysMorph",
      "baseMorphs" : [ "ExclusiveGateway" ]
    }, {
      "role" : "StartEventsMorph",
      "baseMorphs" : [ "StartNoneEvent" ]
    }, {
      "role" : "EndEventsMorph",
      "baseMorphs" : [ "StartNoneEvent" ]
    }, {
      "role" : "CatchEventsMorph",
      "baseMorphs" : [ "CatchTimerEvent" ]
    }, {
      "role" : "ThrowEventsMorph",
      "baseMorphs" : [ "ThrowNoneEvent" ]
    }, {
      "role" : "TextAnnotationMorth",
      "baseMorphs" : [ "TextAnnotation" ]
    }, {
	  "role": "DataObjectMorph",
	  "baseMorphs": ["DataObject"]
	} ],
		"layoutRules" : [
			{
				"role": "ActivitiesMorph",
				"outs":[{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1,"r":2,"b":1,"l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}],
				"ins": [{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}]
			},
			{
				"role": "EventActivitiesMorph",
				"outs":[{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1,"r":2,"b":1,"l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}],
				"ins": [{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}]
			},
			{
				"role": "ChoreographyMorph",
				"outs":[{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1,"r":2,"b":1,"l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}],
				"ins": [{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}]
			},
			{
				"role": "GatewaysMorph",
				"outs": [{"t":2, "r":1, "b":2, "l":1},
						 {"orientation":"vertical", "t":1, "r":2, "b":1, "l":2}
				]
			},
			{
				"role": "StartEventsMorph",
				"outs":[{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1,"r":2,"b":1,"l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}],
				"ins": [{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}]
			},
			{
				"role": "IntermediateEventsMorph",
				"outs":[{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1,"r":2,"b":1,"l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}],
				"ins": [{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}]
			},
			{
				"role": "EndEventsMorph",
				"outs":[{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1,"r":2,"b":1,"l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}],
				"ins": [{"edgeRole":"MessageFlow","t":2, "r":1, "b":2, "l":1},
						{"t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "edgeRole":"MessageFlow", "t":1, "r":2, "b":1, "l":2},
						{"orientation":"vertical", "t":2,"r":1,"b":2,"l":1}]
			}
		]
  }
}