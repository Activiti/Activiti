/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.activiti.engine.test.impl.util;

import org.activiti.engine.impl.util.BitMaskUtil;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Method;

public class BitMaskUtilTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: BitMaskUtil.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 82 branch to line 82
   *  - conditional line 82 branch to line 86
   *  - conditional line 86 branch to line 86
   */

  @Test
  public void isBitOnInputPositivePositiveOutputTrue() {

    // Arrange
    final int value = 32;
    final int bitNumber = 6;

    // Act
    final boolean retval = BitMaskUtil.isBitOn(value, bitNumber);

    // Assert result
    Assert.assertEquals(true, retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 82 branch to line 82
   *  - conditional line 82 branch to line 86
   *  - conditional line 86 branch to line 86
   */

  @Test
  public void isBitOnInputZeroPositiveOutputFalse() {

    // Arrange
    final int value = 0;
    final int bitNumber = 6;

    // Act
    final boolean retval = BitMaskUtil.isBitOn(value, bitNumber);

    // Assert result
    Assert.assertEquals(false, retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 100 branch to line 103
   *  - conditional line 103 branch to line 103
   */

  @Test
  public void setBitInputZeroPositiveFalseOutputZero() {

    // Arrange
    final int value = 0;
    final int bitNumber = 8;
    final boolean bitValue = false;

    // Act
    final int retval = BitMaskUtil.setBit(value, bitNumber, bitValue);

    // Assert result
    Assert.assertEquals(0, retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 100 branch to line 101
   *  - conditional line 101 branch to line 101
   */

  @Test
  public void setBitInputZeroPositiveTrueOutputPositive() {

    // Arrange
    final int value = 0;
    final int bitNumber = 8;
    final boolean bitValue = true;

    // Act
    final int retval = BitMaskUtil.setBit(value, bitNumber, bitValue);

    // Assert result
    Assert.assertEquals(128, retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 65 branch to line 65
   *  - conditional line 65 branch to line 70
   */

  @Test
  public void setBitOffInputZeroPositiveOutputZero() {

    // Arrange
    final int value = 0;
    final int bitNumber = 6;

    // Act
    final int retval = BitMaskUtil.setBitOff(value, bitNumber);

    // Assert result
    Assert.assertEquals(0, retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 48 branch to line 48
   *  - conditional line 48 branch to line 53
   */

  @Test
  public void setBitOnInputPositivePositiveOutputPositive() {

    // Arrange
    final int value = 128;
    final int bitNumber = 6;

    // Act
    final int retval = BitMaskUtil.setBitOn(value, bitNumber);

    // Assert result
    Assert.assertEquals(160, retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 82 branch to line 83
   */

  @Test
  public void isBitOnInputPositiveNegativeOutputIllegalArgumentException() {

    // Arrange
    final int value = 32;
    final int bitNumber = -2_147_483_642;

    // Act
    thrown.expect(IllegalArgumentException.class);
    BitMaskUtil.isBitOn(value, bitNumber);

    // Method is not expected to return due to exception thrown
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 100 branch to line 103
   *  - conditional line 103 branch to line 103
   */

  @Test
  public void setBitInputZeroNegativeFalseOutputIllegalArgumentException() {

    // Arrange
    final int value = 0;
    final int bitNumber = -1_611_274_640;
    final boolean bitValue = false;

    // Act
    thrown.expect(IllegalArgumentException.class);
    BitMaskUtil.setBit(value, bitNumber, bitValue);

    // Method is not expected to return due to exception thrown
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 100 branch to line 101
   *  - conditional line 101 branch to line 101
   */

  @Test
  public void setBitInputZeroPositiveTrueOutputIllegalArgumentException() {

    // Arrange
    final int value = 0;
    final int bitNumber = 12;
    final boolean bitValue = true;

    // Act
    thrown.expect(IllegalArgumentException.class);
    BitMaskUtil.setBit(value, bitNumber, bitValue);

    // Method is not expected to return due to exception thrown
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 65 branch to line 66
   */

  @Test
  public void setBitOffInputZeroNegativeOutputIllegalArgumentException() {

    // Arrange
    final int value = 0;
    final int bitNumber = -2_147_483_642;

    // Act
    thrown.expect(IllegalArgumentException.class);
    BitMaskUtil.setBitOff(value, bitNumber);

    // Method is not expected to return due to exception thrown
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 48 branch to line 49
   */

  @Test
  public void setBitOnInputPositiveNegativeOutputIllegalArgumentException() {

    // Arrange
    final int value = 160;
    final int bitNumber = -2_147_483_642;

    // Act
    thrown.expect(IllegalArgumentException.class);
    BitMaskUtil.setBitOn(value, bitNumber);

    // Method is not expected to return due to exception thrown
  }
}
