/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.activiti.engine.test.impl.util.json;

import org.activiti.engine.impl.util.json.Cookie;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class CookieTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Cookie.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - org/activiti/engine/impl/util/json/Cookie.java:49: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 50 branch to line 50
   *     - conditional line 51 branch to line 51
   *     - conditional line 51 branch to line 52
   *     - conditional line 53 branch to line 53
   *     - conditional line 54 branch to line 54
   */

  @Test
  public void escapeInputNotNullOutputNotNull2() {

    // Arrange
    final String string = " + ";

    // Act
    final String retval = Cookie.escape(string);

    // Assert result
    Assert.assertEquals("%2b", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - org/activiti/engine/impl/util/json/Cookie.java:49: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 50 branch to line 50
   *     - conditional line 51 branch to line 51
   *     - conditional line 51 branch to line 52
   *     - conditional line 53 branch to line 53
   *     - conditional line 54 branch to line 54
   */

  @Test
  public void escapeInputNotNullOutputNotNull4() {

    // Arrange
    final String string = " % ";

    // Act
    final String retval = Cookie.escape(string);

    // Assert result
    Assert.assertEquals("%25", retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - org/activiti/engine/impl/util/json/Cookie.java:49: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 50 branch to line 50
   *     - conditional line 51 branch to line 51
   *     - conditional line 51 branch to line 56
   */

  @Test
  public void escapeInputNotNullOutputNotNull3() {

    // Arrange
    final String string = " e ";

    // Act
    final String retval = Cookie.escape(string);

    // Assert result
    Assert.assertEquals("e", retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - org/activiti/engine/impl/util/json/Cookie.java:141: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 142 branch to line 142
   *     - conditional line 143 branch to line 144
   */

  @Test
  public void unescapeInputNotNullOutputNotNull2() {

    // Arrange
    final String s = "+";

    // Act
    final String retval = Cookie.unescape(s);

    // Assert result
    Assert.assertEquals(" ", retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - org/activiti/engine/impl/util/json/Cookie.java:141: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 142 branch to line 142
   *     - conditional line 143 branch to line 145
   *     - conditional line 145 branch to line 145
   *     - conditional line 145 branch to line 146
   *     - conditional line 146 branch to line 146
   *     - conditional line 147 branch to line 147
   *     - conditional line 148 branch to line 148
   *     - conditional line 148 branch to line 149
   */

  @Test
  public void unescapeInputNotNullOutputNotNull3() {

    // Arrange
    final String s = "%0C";

    // Act
    final String retval = Cookie.unescape(s);

    // Assert result
    Assert.assertEquals("\f", retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *
   */

  @Test
  public void escapeInputNotNullOutputNotNull() {

    // Arrange
    final String string = "        ";

    // Act
    final String retval = Cookie.escape(string);

    // Assert result
    Assert.assertEquals("", retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *
   */

  @Test
  public void unescapeInputNotNullOutputNotNull() {

    // Arrange
    final String s = "";

    // Act
    final String retval = Cookie.unescape(s);

    // Assert result
    Assert.assertEquals("", retval);
  }
}
