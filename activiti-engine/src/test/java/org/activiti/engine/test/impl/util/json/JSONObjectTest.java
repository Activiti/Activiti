/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.activiti.engine.test.impl.util.json;

import org.activiti.engine.impl.util.json.JSONObject;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class JSONObjectTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: JSONObject.java */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 1024 branch to line 1024
   *  - conditional line 1024 branch to line 1025
   */

  @Test
  public void quoteInputNotNullOutputNotNull() {

    // Arrange
    final String string = "";

    // Act
    final String retval = JSONObject.quote(string);

    // Assert result
    Assert.assertEquals("\"\"", retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 1107 branch to line 1110
   *  - conditional line 1110 branch to line 1113
   *  - conditional line 1113 branch to line 1116
   *  - conditional line 1116 branch to line 1125
   *  - conditional line 1125 branch to line 1125
   *  - conditional line 1126 branch to line 1126
   *  - conditional line 1126 branch to line 1127
   *  - conditional line 1127 branch to line 1134
   *  - conditional line 1134 branch to line 1134
   *  - conditional line 1134 branch to line 1137
   *  - conditional line 1138 branch to line 1139
   */

  @Test
  public void stringToValueInputNotNullOutputNegative() {

    // Arrange
    final String s = "-79";

    // Act
    final Object retval = JSONObject.stringToValue(s);

    // Assert result
    Assert.assertEquals(new Integer(-79), retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 1107 branch to line 1110
   *  - conditional line 1110 branch to line 1113
   *  - conditional line 1113 branch to line 1116
   *  - conditional line 1116 branch to line 1125
   *  - conditional line 1125 branch to line 1125
   *  - conditional line 1126 branch to line 1126
   *  - conditional line 1126 branch to line 1127
   *  - conditional line 1127 branch to line 1134
   *  - conditional line 1134 branch to line 1134
   *  - conditional line 1134 branch to line 1137
   *  - conditional line 1138 branch to line 1139
   */

  @Test
  public void stringToValueInputNotNullOutputPositive() {

    // Arrange
    final String s = "+79";

    // Act
    final Object retval = JSONObject.stringToValue(s);

    // Assert result
    Assert.assertEquals(new Integer(79), retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 1107 branch to line 1110
   *  - conditional line 1110 branch to line 1113
   *  - conditional line 1113 branch to line 1116
   *  - conditional line 1116 branch to line 1125
   *  - conditional line 1125 branch to line 1125
   *  - conditional line 1126 branch to line 1126
   *  - conditional line 1126 branch to line 1127
   *  - conditional line 1127 branch to line 1127
   *  - conditional line 1127 branch to line 1134
   *  - conditional line 1134 branch to line 1134
   *  - conditional line 1134 branch to line 1137
   *  - conditional line 1138 branch to line 1139
   */

  @Test
  public void stringToValueInputNotNullOutputPositive3() {

    // Arrange
    final String s = "068";

    // Act
    final Object retval = JSONObject.stringToValue(s);

    // Assert result
    Assert.assertEquals(new Integer(68), retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 1107 branch to line 1110
   *  - conditional line 1110 branch to line 1113
   *  - conditional line 1113 branch to line 1116
   *  - conditional line 1116 branch to line 1125
   *  - conditional line 1125 branch to line 1125
   *  - conditional line 1126 branch to line 1126
   *  - conditional line 1126 branch to line 1127
   *  - conditional line 1127 branch to line 1134
   *  - conditional line 1134 branch to line 1134
   *  - conditional line 1134 branch to line 1137
   *  - conditional line 1138 branch to line 1141
   */

  @Test
  public void stringToValueInputNotNullOutputPositive4() {

    // Arrange
    final String s = "9656525116";

    // Act
    final Object retval = JSONObject.stringToValue(s);

    // Assert result
    Assert.assertEquals(new Long(9_656_525_116L), retval);
  }

    /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 1107 branch to line 1110
   *  - conditional line 1110 branch to line 1113
   *  - conditional line 1113 branch to line 1116
   *  - conditional line 1116 branch to line 1125
   *  - conditional line 1125 branch to line 1125
   *  - conditional line 1126 branch to line 1126
   *  - conditional line 1126 branch to line 1127
   *  - conditional line 1127 branch to line 1134
   *  - conditional line 1134 branch to line 1134
   *  - conditional line 1134 branch to line 1137
   *  - conditional line 1138 branch to line 1139
   */

  @Test
  public void stringToValueInputNotNullOutputPositive2() {

    // Arrange
    final String s = "708";

    // Act
    final Object retval = JSONObject.stringToValue(s);

    // Assert result
    Assert.assertEquals(new Integer(708), retval);
  }
}
