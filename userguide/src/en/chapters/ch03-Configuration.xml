<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>Configuration</title>
  
  <section id="configuration">
    <title>Creating a ProcessEngine</title>
    
    <para>
    The Activiti process engine is configured through an XML file called <literal>activiti.cfg.xml</literal>.
    Note that this is <emphasis role="bold">not</emphasis> applicable if you're 
    using <link linkend="springintegration">the Spring style of building a process engine</link>.
    </para>

    <para>
    The easiest way to obtain a <literal>ProcessEngine</literal>, is to use the 
    <literal>org.activiti.engine.ProcessEngines</literal> class:
    <programlisting>ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine()</programlisting>
    This will look for an <literal>activiti.cfg.xml</literal> file on the classpath and
    construct an engine based on the configuration in that file.
    The following snippet shows an example configuration. 
    The following sections will give a detailed overview of the configuration properties.
    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
  
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
    &lt;property name=&quot;jdbcDriver&quot; value=&quot;org.h2.Driver&quot; /&gt;
    &lt;property name=&quot;jdbcUsername&quot; value=&quot;sa&quot; /&gt;
    &lt;property name=&quot;jdbcPassword&quot; value=&quot;&quot; /&gt;
    
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    
    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
    
    &lt;property name=&quot;mailServerHost&quot; value=&quot;mail.my-corp.com&quot; /&gt; 
    &lt;property name=&quot;mailServerPort&quot; value=&quot;5025&quot; /&gt;    
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
    </para> 
    
    <para>
      Note that the configuration XML is in fact a Spring configuration.
      <emphasis role="bold">This does not mean that Activiti can only be used in a Spring environment!</emphasis>
      We are simply leveraging the parsing and dependency injection capabilities of Spring
      internally for building up the engine.
    </para>
    
    <para>
      The ProcessEngineConfiguration object can also be created programmatically using the configuration file.
      It is also possible to use a different bean id (e.g. see line 3).
      <programlisting>
ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();
ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);
ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);
ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);
ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</programlisting>
   It is also possible not to use a configuration file, and create a configuration based on 
   defaults (see <link linkend="configurationClasses">the different supported classes</link> for more information).
   <programlisting>
ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();
ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</programlisting>
   All these <literal>ProcessEngineConfiguration.createXXX()</literal> methods return a 
   <literal>ProcessEngineConfiguration</literal> that can further be tweaked if needed.
   After calling the <literal>buildProcessEngine()</literal> operation, a <literal>ProcessEngine</literal>
   is created:
   <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration()
  .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)
  .setJdbcUrl("jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000")
  .setJobExecutorActivate(true)
  .buildProcessEngine();</programlisting>
    </para>
     
  </section>  
    
  <section id="configurationRoot">
    <title>ProcessEngineConfiguration bean</title>
    <para>
      The <literal>activiti.cfg.xml</literal> must contain a bean that has the id <literal>'processEngineConfiguration'</literal>.
      <programlisting> &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</programlisting>
      This bean is then used to construct the <literal>ProcessEngine</literal>. There are multiple
      classes available that can be used to define the <literal>processEngineConfiguration</literal>.
      These classes represent different environments, and set defaults accordingly. It's a best 
      practice to select the class the matches (the most) your environment, to minimalise the
      number of properties needed to configure the engine. The following classes are currently available
      (more will follow in future releases):
      <itemizedlist id="configurationClasses">
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration</emphasis>:
            the process engine is used in a standalone way. Activiti will take care of the transactions.
            By default, the database will only be checked when the engine boots (and an exception is thrown if there
            is no Activiti schema or the schema version is incorrect). 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</emphasis>:
            this is a convenience class for unit testing purposes. Activiti will take care of the transactions.
            An H2 in-memory database is used by default. The database will be created and dropped when the engine boots and shuts down.
            When using this, probably no additional configuration is needed (except when using for example the job executor or mail capabilities).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.spring.SpringProcessEngineConfiguration</emphasis>:
            To be used when the process engine is used in a Spring environment. 
            See <link linkend="springintegration">the Spring integration section</link> for more information. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration</emphasis>:
            To be used when the engine runs in standalone mode, with JTA transactions.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
    
  <section id="databaseConfiguration">
    <title>Database configuration</title>
    <para>
      There are two ways to configure the database that the Activiti engine will use.
      The first option is to define the JDBC properties of the database:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">jdbcUrl</emphasis>: JDBC URL of the database.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcDriver</emphasis>: implementation of the driver for the specific database type.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcUsername</emphasis>: username to connect to the database.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcPassword</emphasis>: password to connect to the database.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      The data source that is constructed based on the provided JDBC properties
      will have the default <ulink url="http://www.mybatis.org/">MyBatis</ulink> connection pool
      settings. The following attributes can optionally be set to tweak that connection pool (taken from the MyBatis documentation):
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">jdbcMaxActiveConnections</emphasis>: The number of active connections
            that the connection pool at maximum at any time can contain. Default is 10.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxIdleConnections</emphasis>: The number of idle connections
            that the connection pool at maximum at any time can contain.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxCheckoutTime</emphasis>: The amount of time in milliseconds a connection
            can be 'checked out' from the connection pool before it is forcefully returned.
            Default is 20000 (20 seconds).
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxWaitTime</emphasis>: This is a low level setting that gives the pool 
            a chance to print a log status and re-attempt the acquisition of a connection in the 
            case that itâ€™s taking unusually long (to avoid failing silently forever if the pool is misconfigured)
            Default is 20000 (20 seconds).
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      Example database configuration:
      <programlisting>
&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
&lt;property name=&quot;jdbcDriver&quot; value=&quot;org.h2.Driver&quot; /&gt;
&lt;property name=&quot;jdbcUsername&quot; value=&quot;sa&quot; /&gt;
&lt;property name=&quot;jdbcPassword&quot; value=&quot;&quot; /&gt;
      </programlisting>
    </para>
    
    <para>
      Alternatively, a <literal>javax.sql.DataSource</literal> implementation can be used 
      (e.g. DBCP from <ulink url="http://commons.apache.org/dbcp/">Apache Commons</ulink>):
      <programlisting>
&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; &gt;
  &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
  &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activiti&quot; /&gt;
  &lt;property name=&quot;username&quot; value=&quot;activiti&quot; /&gt;
  &lt;property name=&quot;password&quot; value=&quot;activiti&quot; /&gt;
  &lt;property name=&quot;defaultAutoCommit&quot; value=&quot;false&quot; /&gt;
&lt;/bean&gt;      

&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
  
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    ...
      </programlisting>
      Note that Activiti does not ship with a library that allows to define such a data source.
      So you have to make sure that the libraries (e.g. from DBCP) are on your classpath.
    </para>
    
    <para>
      The following properties can be set, regardless of whether you are using the JDBC or data source approach:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">databaseType</emphasis>: it's normally not necessary to 
            specify this property as it is automatically analyzed from the database connection meta data.  
            Should only be specified in case automatic detection fails.
            Possible values: {h2, mysql, oracle, postgres, mssql, db2}.
            <emphasis role="bold">This property is required when not using the default H2 database</emphasis>.
            This setting will determine which create/drop scripts and queries will be used. See 
            <link linkend="supporteddatabases">the 'supported databases' section</link> for 
            an overview of which types are supported.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">databaseSchemaUpdate</emphasis>: allows to set the strategy to handle
            the database schema on process engine boot and shutdown.
            <itemizedlist>
              <listitem>
                <para>
                  <literal>false</literal> (default): Checks the version of the DB schema against the
                  library when the process engine is being created and throws an exception if the 
                  versions don't match.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>true</literal>: Upon building the process engine, a check is performed and 
                  an update of the schema is performed if it is necessary. If the schema doesn't exist,
                  it is created.
                </para>
              </listitem>
               <listitem>
                <para>
                  <literal>create-drop</literal>: Creates the schema when the process engine is being created and 
                  drops the schema when the process engine is being closed.
                </para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section id="jndiDatasourceConfig">
    <title>JNDI Datasource Configuration</title>

    <para>
        By default, the database configuration for Activiti is contained within the db.properties
        files in the WEB-INF/classes of each web application. This isn't always ideal because it
        requires users to either modify the db.properties in the Activiti source and recompile
        the war file, or explode the war and modify the db.properties on every deployment.
    </para>
    
    <para>
       By using JNDI (Java Naming and Directory Interface) to obtain the database connection,
       the connection is fully managed by the Servlet Container and the configuration can be
       managed outside the war deployment. This also allows more control over the connection
       parameters than what is provided by the db.properties file.
    </para>
    
    <section id="jndi_usage">
    
        <title>Usage</title>
        
        <para>
            To switch the Activiti Explorer and Activiti Rest web apps from db.properties
            configuration to JNDI datasource configuration, open the primary Spring configuration
            files (activiti-webapp-explorer2/src/main/webapp/WEB-INF/activiti-standalone-context.xml
            and activiti-webapp-rest2/src/main/resources/activiti-context.xml), and delete the beans
            named "dbProperties" and "dataSource". Then, add the following bean:
            <programlisting>
&lt;bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"&gt;
    &lt;property name="jndiName" value="java:comp/env/jdbc/activitiDB"/&gt;
&lt;/bean&gt;
            </programlisting> 
        </para>
        
        <para>
            Next, we need to add context.xml files that contain the default H2 configuration.
            These will be overridden by your JNDI configuration, if it exists.  For Activiti
            Explorer, replace the file at activiti-webapp-explorer2/src/main/webapp/META-INF/context.xml
            with the following:
            <programlisting>
&lt;Context antiJARLocking="true" path="/activiti-explorer2"&gt;
    &lt;Resource auth="Container"
              name="jdbc/activitiDB"
              type="javax.sql.DataSource"
              scope="Shareable"
              description="JDBC DataSource"
              url="jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"
              driverClassName="org.h2.Driver"
              username="sa"
              password=""
              defaultAutoCommit="false"
              initialSize="5"
              maxWait="5000"
              maxActive="120"
              maxIdle="5"/&gt;
&lt;/Context&gt;
            </programlisting>
            
            For the Activiti REST webapp, add activiti-webapp-rest2/src/main/webapp/META-INF/context.xml
            containing the following:
            <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Context antiJARLocking="true" path="/activiti-rest2"&gt;
    &lt;Resource auth="Container"
              name="jdbc/activitiDB"
              type="javax.sql.DataSource"
              scope="Shareable"
              description="JDBC DataSource"
              url="jdbc:h2:mem:activiti;DB_CLOSE_DELAY=-1"
              driverClassName="org.h2.Driver"
              username="sa"
              password=""
              defaultAutoCommit="false"
              initialSize="5"
              maxWait="5000"
              maxActive="120"
              maxIdle="5"/&gt;
&lt;/Context&gt;
            </programlisting>
        </para>
        
        <para>
            As an optional step, you can now delete the unused db.properties files in both the Activiti
            Explorer and Activiti REST webapp projects.
        </para>
    </section>
    
    <section id="jndi_configuration">

        <title>Configuration</title>

        <para>
            Configuration of the JNDI datasource will differ depending on what servlet container
            application you are using. The instructions below will work for Tomcat, but for other
            container applications, please refer to the documentation for your container app.
        </para>
        
        <para>
            If using Tomcat, the JNDI resource is configured within
            $CATALINA_BASE/conf/[enginename]/[hostname]/[warname].xml (for Activiti Explorer this
            will usually be $CATALINA_BASE/conf/Catalina/localhost/activiti-explorer.war). The default
            context is copied from the Activiti war file when the application is first deployed, so if
            it already exists, you will need to replace it. To change the JNDI resource so that the
            application connects to MySql instead of H2, for example, change the file to the following:
            <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;Context antiJARLocking="true" path="/activiti-explorer2"&gt;
        &lt;Resource auth="Container"
            name="jdbc/activitiDB"
            type="javax.sql.DataSource"
            description="JDBC DataSource"
            url="jdbc:mysql://localhost:3306/activiti"
            driverClassName="com.mysql.jdbc.Driver"
            username="sa"
            password=""
            defaultAutoCommit="false"
            initialSize="5"
            maxWait="5000"
            maxActive="120"
            maxIdle="5"/&gt;
        &lt;/Context&gt;
           </programlisting>
       </para>

    </section>
    
  </section>
  
  <section id="supporteddatabases">
    <title>Supported databases</title>
    <para>Listed below are the types (case sensitive!) that Activiti uses to refer to databases.</para>
    <table id="databaseTypes">
      <title>Supported databases</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>Activiti database type</entry>
            <entry>Example JDBC URL</entry>
            <entry>Notes</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>h2</entry>
            <entry>jdbc:h2:tcp://localhost/activiti</entry>
            <entry>Default configured database</entry>
          </row>
          <row>
            <entry>mysql</entry>
            <entry>jdbc:mysql://localhost:3306/activiti?autoReconnect=true</entry>
            <entry>Tested using mysql-connector-java database driver</entry>
          </row>
          <row>
            <entry>oracle</entry>
            <entry>jdbc:oracle:thin:@localhost:1521:xe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>postgres</entry>
            <entry>jdbc:postgresql://localhost:5432/activiti</entry>
            <entry></entry>
          </row>
          <row>
            <entry>db2</entry>
            <entry>jdbc:db2://localhost:50000/activiti</entry>
            <entry></entry>
          </row>
          <row>
            <entry>mssql</entry>
            <entry>jdbc:sqlserver://localhost:1433/activiti</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  
  <section id="creatingDatabaseTable">
  
    <title>Creating the database tables</title>
    
    <para>
      The easiest way to create the database tables for your database is to:
      <itemizedlist>
        <listitem>
          <para>Add the activiti-engine jars to your classpath</para>
        </listitem>
        <listitem>
          <para>Add a suitable database driver</para>
        </listitem>
        <listitem>
          <para>Add an Activiti configuration file (<emphasis>activiti.cfg.xml</emphasis>) to your classpath, 
          pointing to your database (see <link linkend="databaseConfiguration">database configuration section</link>)</para>
        </listitem>
        <listitem>
          <para>Execute the main method of the <emphasis>DbSchemaCreate</emphasis> class</para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      However, often only database administrators can execute DDL statements on a database.
      On a production system, this is also the wisest of choices.
      The SQL DDL statements can be found on the Activiti downloads page or inside the Activiti distribution folder, in the <literal>database</literal> subdirectory. The scripts are also in 
      the engine jar (<emphasis>activiti-engine-x.jar</emphasis>), in 
      the package <emphasis>org/activiti/db/create</emphasis> (the <emphasis>drop</emphasis> folder contains the drop statements).
      The SQL files are of the form
      <programlisting>activiti.{db}.{create|drop}.{type}.sql</programlisting>
      Where <emphasis>db</emphasis> is any of the <link linkend="supporteddatabases">supported databases</link>
      and <emphasis>type</emphasis> is 
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">engine:</emphasis> the tables needed for engine execution. Required.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">identity:</emphasis> the tables containing users, groups and memberships of users to groups. These tables are optional and should be used when using 
          the default identity management as shipped with the engine.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">history:</emphasis> the tables that contain the history and audit information. Optional: not needed when history level is set to <emphasis>none</emphasis>
          Note that this will also disable some features (such as commenting on tasks) which store the data in the history database.</para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
        <emphasis role="bold">Note for MySQL users:</emphasis> MySQL version lower than 5.6.4 has 
        no support for timestamps or dates with millisecond precision. To make things even worse,
        some version will throw an exception when trying to create such a column but other versions don't.
        When doing auto-creation/upgrade, the engine will change the DDL when executing it.
        When using the DDL file approach, both a regular version and a special file with <emphasis>mysql55</emphasis>
        in it are available (this applies on anything lower than 5.6.4). 
        This latter file will have column types with no millisecond precision it it.
    </para>
    
    <para>
        Concretely, the following applies for MySQL version
        <itemizedlist>
        <listitem>
          <para><emphasis role="bold">&lt;5.6:</emphasis> No millisecond precision available. DDL files available (look for files containing <emphasis>mysql55</emphasis>). Auto creation/update will work out of the box.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">5.6.0 - 5.6.3:</emphasis> No millisecond precision available. Auto creation/update will NOT work. It is advised to upgrade to a newer database version anyway. DDL files for <emphasis>mysql 5.5</emphasis> could be used if really needed.</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">5.6.4+:</emphasis>Millisecond precision available. DDL files available (default file containing <emphasis>mysql</emphasis>). Auto creation/update works out of the box.</para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
        Do note that in the case of upgrading the MySQL database later on and the Activiti tables are
        already created/upgraded, the column type change will have to be done manually!
    </para>
  
  </section>
  
  <section id="database.tables.explained">
    <title>Database table names explained</title>
    <para>
      The database names of Activiti all start with <emphasis role="bold">ACT_</emphasis>. The 
      second part is a two-character identification of the use case of the table. This use case 
      will also roughly match the service API.
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">ACT_RE_*</emphasis>: 'RE' stands for <literal>repository</literal>. 
            Tables with this prefix contain 'static' information such as process definitions and
            process resources (images, rules, etc.).
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_RU_*</emphasis>: 'RU' stands for <literal>runtime</literal>.
            These are the runtime tables, that contain the runtime data of process instances,
            user tasks, variables, jobs, etc. Activiti only stores the runtime data during process instance
            execution, and removes the records when a process instance ends. This keeps 
            the runtime tables small and fast.
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_ID_*</emphasis>: 'ID' stands for <literal>identity</literal>.
            These tables contain identity information, such as users, groups, etc.
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_HI_*</emphasis>: 'HI' stands for <literal>history</literal>.
            These are the tables that contain historic data, such as past process instances,
            variables, tasks, etc.
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_GE_*</emphasis>: <literal>general</literal> data, which is used
            in various use cases.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
    
  <section id="databaseUpgrade">
     <title>Database upgrade</title>
     <para>Make sure you make a backup of your database 
     (using your database backup capabilities) before you run an upgrade.
     </para>
     <para>By default, a version check will be performed each time a process engine is created.
     This typically happens once at boot time of your application or of the Activiti webapps.
     If the Activiti library notices a difference between the library version and the version  
     of the Activiti database tables, then an exception is thrown.
     </para> 
     <para>To upgrade, you have to start with putting the following configuration property in your 
     activiti.cfg.xml configuration file:
     </para>
    <programlisting>&lt;beans ... &gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
    &lt;!-- ... --&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;    
    &lt;!-- ... --&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
     <para> <emphasis role="bold">Also, include a suitable database driver for your database to the classpath.</emphasis>
     Upgrade the Activiti libraries in your application. Or start up a new version 
     of Activiti and point it to a database that contains an older version.  With <literal>databaseSchemaUpdate</literal>
     set to <literal>true</literal>, Activiti will automatically upgrade the DB schema to the newer version
     the first time when it notices that libraries and DB schema are out of sync.
     </para>
     <para> <emphasis role="bold">As an alternative you can also run the upgrade DDL statements.</emphasis>
     It's also possible to run the upgrade database scripts, available on the Activiti downloads page.
     </para>
   </section>
  
  <section id="jobExecutorConfiguration">
    <title>Job executor activation</title>
    <para>The <literal>JobExecutor</literal> is a component that manages a couple of threads to fire timers (and later also asynchronous messages).
    For unit testing scenarios, it is cumbersome to work with multiple threads. Therefore the API allows to query for 
    (<literal>ManagementService.createJobQuery</literal>) and execute jobs (<literal>ManagementService.executeJob</literal>) through 
    the API so that job execution can be controlled from within a unit test.  To avoid interference by the job executor, it can be turned off. 
    </para>
    <para> 
    By default, the <literal>JobExecutor</literal> is activated when the process engine boots. Specify
    <programlisting>&lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /></programlisting>
    when you don't want the <literal>JobExecutor</literal> to be activated upon booting the process engine.
    </para>
  </section>
  
  <section id="mailServerConfiguration">
    <title>Mail server configuration</title>
    <para>
      Configuring a mail server is optional. Activiti supports sending e-mails in business processes. To actually send an e-mail, a valid
      SMTP mail server configuration is required. See the 
      <link linkend="bpmnEmailTaskServerConfiguration">e-mail task</link> for the configuration options.
    </para>
  </section>
  
  <section id="historyConfiguration">
    <title>History configuration</title>
    <para>
      Customizing the configuration of history storage is optional. This allows you to tweak settings that influence the <link linkend="history">history capabilities</link>
      of the engine. See <link linkend="historyConfig">history configuration</link> for more details.
      <programlisting>&lt;property name=&quot;history&quot; value=&quot;audit&quot; /&gt;</programlisting>
    </para>
  </section>
  
  <section id="exposingConfigurationBeans">
    <title>Exposing configuration beans in expressions and scripts</title>
    <para>By default, all beans that you specify in the <literal>activiti.cfg.xml</literal> configuration 
    or in your own Spring configuration file are available to expressions and in the scripts.
    If you want to limit the visibility of beans in your configuration file, you can 
    configure a property called <literal>beans</literal> in your process engine configuration.
    The beans property in <literal>ProcessEngineConfiguration</literal> is a map. When you specify that property,
    only beans specified in that map will be visible to expressions and scripts.  The exposed beans 
    will be exposed with the names as you specify in that map.  
    </para>
  </section>
  <section id="processDefinitionCacheConfiguration">
    <title>Deployment cache configuration</title>
    <para>All process definition are cached (after they're parsed) to avoid hitting
    the database every time a process definition is needed and because process definition data doesn't change.
    By default, there is no limit on this cache. To limit the process definition cache, add following property
    <programlisting>&lt;property name=&quot;processDefinitionCacheLimit&quot; value=&quot;10&quot; /&gt;</programlisting>
    Setting this property will swap the default hashmap cache with a LRU cache that has the provided hard limit.
    Of course, the 'best' value of this property depends on the total amount of process definitions stored and the number of
    process definitions actually used at runtime by all the runtime process instances.</para>
    <para>You can also inject your own cache implementation. This must be a bean that implements the
    org.activiti.engine.impl.persistence.deploy.DeploymentCache interface:
    <programlisting>
&lt;property name=&quot;processDefinitionCache&quot;&gt;
  &lt;bean class=&quot;org.activiti.MyCache&quot; />
&lt;/property&gt;</programlisting></para>
     <para>There is a similar property called <literal>knowledgeBaseCacheLimit</literal> and <literal>knowledgeBaseCache</literal> for configuring the rules cache.
     This is only needed when you use the rules task in your processes.</para>
    </section>
  
  <section id="loggingConfiguration">
    <title>Logging</title>
    <para>As of Activiti 5.12, SLF4J is used as logging framework, replacing the 
    previous used java.util.logging. All logging (activiti, spring, mybatis, ...) is routed through SLF4J and allows for
    selecting the logging-implementation of your choice.</para>
    <para><emphasis role="bold">By default no SFL4J-binding jar is present in the activiti-engine dependencies, this should be added
    in your project in order to use the logging framework of your choice.</emphasis> If no implementation jar is added, SLF4J will use a NOP-logger,
     not logging anything at all, other than a warning that nothing will be logged. For more info on these bindings <ulink url="http://www.slf4j.org/codes.html#StaticLoggerBinder">http://www.slf4j.org/codes.html#StaticLoggerBinder</ulink>.</para>

    <para>With Maven, add for example a dependency like this (here using log4j), note that you still need to add a version:
    <programlisting>
&lt;dependency&gt;
  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting></para>
    
    <para>The activiti-explorer and activiti-rest webapps are configured to use Log4j-binding. Log4j is also used when running the tests for all the activiti-* modules.</para>
  
    <para>
      <emphasis role="bold">Important note when using a container with commons-logging in the classpath:</emphasis>
      In order to route the spring-logging through SLF4J, a bridge is used (see <ulink url="http://www.slf4j.org/legacy.html#jclOverSLF4J">http://www.slf4j.org/legacy.html#jclOverSLF4J</ulink>). If your container provides a commons-logging implementation,
      please follow directions on this page: <ulink url="http://www.slf4j.org/codes.html#release">http://www.slf4j.org/codes.html#release</ulink> to ensure stability.
    </para>
    <para>
      Example when using Maven (version omitted):
      <programlisting>
&lt;dependency&gt;
  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
  &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
    </para>
  </section>
  
    <section id="MDC">
  
  <title>Mapped Diagnostic Contexts</title>
    
    <para> 
        As of version 5.13, activiti supports Mapped Diagnostic Contexts feature of sl4j.
        These basic information are passed to the underlying logger along with what is going to be logged:
      <itemizedlist>
        <listitem>
            <para>
            processDefinition Id as mdcProcessDefinitionID
            </para>        
        </listitem>
          
        <listitem>
        <para>
            processInstance Id as mdcProcessInstanceID
            </para>
        </listitem>
           
        <listitem>
        <para>
            execution Id as mdcexecutionId
        </para>
        </listitem>
      </itemizedlist>
      
      
      None of these information are logged by default. The logger can be configured to show them in desired format, extra to the usual logged messages.
      For example in log4j the following sample layout definition  causes the logger to show the above mentioned information:
     <programlisting>
 log4j.appender.consoleAppender.layout.ConversionPattern =ProcessDefinitionId=%X{mdcProcessDefinitionID}
executionId=%X{mdcExecutionId} mdcProcessInstanceID=%X{mdcProcessInstanceID} mdcBusinessKey=%X{mdcBusinessKey} %m%n"
      </programlisting>
      This is useful where the systems are mission critical and logs should be seriously checked,  by means of a log analyzer for example.
    
    </para>
  </section> 
  
  <section id="eventDispatcher">
    <title>Event handlers</title>
    <para>
      An event mechanism has been introduced in Activiti 5.15. It allows you to get notified when various events occur within the engine.
      Take a look at <link linkend="eventDispatcherEventTypes">all supported event types</link> for an overview of the events available.
    </para>
    <para>
      It's possible to register a listener for certain types of events as opposed to getting notified when any type of event is dispatched.
      You can either add engine-wide event listeners <link linkend="eventDispatcherConfiguration">through the configuration</link>, add engine-wide event listeners 
      <link linkend="eventDispatcherConfigurationRuntime">at runtime using the API</link> or add event-listeners to <link linkend="eventDispatcherConfigurationProcessDefinition">specific process definitions in the BPMN XML</link>. 
    </para>
    <para>
       All events dispatched are a subtype of <literal>org.activiti.engine.delegate.event.ActivitiEvent</literal>. The event exposes (if available) the <literal>type</literal>, <literal>executionId</literal>, <literal>processInstanceId</literal>
       and <literal>processDefinitionId</literal>. Certain events contain additional context related to the event that occurred, additional information about additional playload can be
       found in the list of <link linkend="eventDispatcherEventTypes">all supported event types</link>.
    </para>
    
      <section id="eventDispatcherListener">
        <title>Event listener implementation</title>
        <para>
          The only requirement an event-listener has, is to implement <literal>org.activiti.engine.delegate.event.ActivitiEventListener</literal>. Below is an example implementation
          of a listener, which outputs all events received to the standard-out, with exception of events related to job-execution: 
          <programlisting>
public class MyEventListener implements ActivitiEventListener {

  @Override
  public void onEvent(ActivitiEvent event) {
    switch (event.getType()) {
    
      case JOB_EXECUTION_SUCCESS:
        System.out.println("A job well done!");
        break;
  
      case JOB_EXECUTION_FAILURE:
        System.out.println("A job has failed...");
        break;
        
      default:
        System.out.println("Event received: " + event.getType());
    }
  }

  @Override
  public boolean isFailOnException() {
    // The logic in the onEvent method of this listener is not critical, exceptions
    // can be ignored if logging fails...
    return false;
  }
}</programlisting>
        </para>
        <para>
          The <literal>isFailOnException()</literal> method determines the behaviour in case the <literal>onEvent(..)</literal> method
          throws an exception when an event is dispatched. In case <literal>false</literal> is returned, the exception is
          ignored. When <literal>true</literal> is returned, the exception is not ignored and bubbles up, effectively
          failing the current ongoing command. In case the event was part of an API-call (or any other transactional operation, eg. job-execution),
          the transaction will be rolled back. In case the behaviour in the event-listener
          is not business-critical, it's recommended to return <literal>false</literal>.
        </para>
        <para>
           There are a few base implementations provided by activiti to facilitate common usecases of event-listeners. These can be used as base-class or as an example listener implementation:
           <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">org.activiti.engine.delegate.event.BaseEntityEventListener</emphasis>:
                  An event-listener base-class that can be used to listen for entity-related events for a specific type of entity or for all entities. It hides away the
                  type-checking and offers 4 methods that should be overridden: <literal>onCreate(..)</literal>, <literal>onUpdate(..)</literal> and <literal>onDelete(..)</literal> when an entity is created, updated or deleted. For all other entity-related events, the
                  <literal>onEntityEvent(..)</literal>is called.
                </para>
              </listitem>
           </itemizedlist>
        </para>
      </section> 
    <section id="eventDispatcherConfiguration">
        <title>Configuration and setup</title>
        <para>
          If event-listener is configured in the process engine configuration, it will be active when the process engine starts and will remain active after 
          subsequent reboots of the engine.
        </para>
        <para>
          The property <literal>eventListeners</literal> expects a list of <literal>org.activiti.engine.delegate.event.ActivitiEventListener</literal> instances. As usual, you can either declare an inline
          bean definition or use a <literal>ref</literal> to an existing bean instead.
          The snippet below adds an event-listener to the configuration, that is notified when any event is dispatched, regardless of it's type:
                <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
    ...
    &lt;property name=&quot;eventListeners&quot;&gt;
      &lt;list&gt;
         &lt;bean class=&quot;org.activiti.engine.example.MyEventListener&quot; /&gt;
      &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
        </para>
        <para>
          To get notified when certain types of events get dispatched, use the <literal>typedEventListeners</literal> property, which expects a map. The key of a map-entry is a comma-separated list of event-names (or a single event-name). 
          The value of a map-entry is a list of <literal>org.activiti.engine.delegate.event.ActivitiEventListener</literal> instances. 
          The snippet below adds an event-listener to the configuration, that is notified when a job execution was successful or failed:
                <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
    ...
    &lt;property name=&quot;typedEventListeners&quot;&gt;
      &lt;map&gt;
        &lt;entry key=&quot;JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE&quot; &gt;
          &lt;list&gt;
            &lt;bean class=&quot;org.activiti.engine.example.MyJobEventListener&quot; /&gt;
          &lt;/list&gt;
        &lt;/entry&gt;
      &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
        </para>
        <para>The order of dispatching events is determined on the order the listeners were added. First, all normal event-listeners are called (<literal>eventListeners</literal> property) in the order they are defined in the <literal>list</literal>. 
        After that, all typed event listeners (<literal>typedEventListeners</literal> properties) are called, if an event of the right type is dispatched.</para>
      </section> 
      <section id="eventDispatcherConfigurationRuntime">
        <title>Adding listeners at runtime</title>
        <para>It's possible to add and remove additional event-listeners to the engine by using the API (<literal>RuntimeService</literal>):
        <programlisting>
/**
 * Adds an event-listener which will be notified of ALL events by the dispatcher.
 * @param listenerToAdd the listener to add
 */
void addEventListener(ActivitiEventListener listenerToAdd);

/**
 * Adds an event-listener which will only be notified when an event occurs, which type is in the given types.
 * @param listenerToAdd the listener to add
 * @param types types of events the listener should be notified for
 */
void addEventListener(ActivitiEventListener listenerToAdd, ActivitiEventType... types);

/**
 * Removes the given listener from this dispatcher. The listener will no longer be notified,
 * regardless of the type(s) it was registered for in the first place.
 * @param listenerToRemove listener to remove
 */
 void removeEventListener(ActivitiEventListener listenerToRemove);</programlisting>
        </para>
        <para>
          Please note that the listeners added at runtime <emphasis role="bold">are not retained when the engine is rebooted.</emphasis>
        </para>
      </section> 
      <section id="eventDispatcherConfigurationProcessDefinition">
        <title>Adding listeners to process definitions</title>
        <para>It's possible to add listeners to a specific process-definition. The listeners will only be called for events
        related to the process definition and to all events related to process instances that are started with that specific process
        definition. The listener implementations can be defined using a fully qualified classname, an expression that resolves to a bean that implements
        the listener interface or can be configured to throw a message/signal/error BPMN event.
        </para>
        <section>
        <title>Listeners executing user-defined logic</title>
        <para>The snippet below adds 2 listeners to a process-definition. The first listener will receive events of any type, with a listener implementation based on a fully-qualified class name.
        The second listener is only notified when a job is successfully executed or when it failed, using a listener that has been defined in the <literal>beans</literal> property of the process engine configuration.</para>
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener class=&quot;org.activiti.engine.test.MyEventListener&quot; /&gt;
    &lt;activiti:eventListener delegateExpression=&quot;${testEventListener}&quot; events=&quot;JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE&quot; /&gt;
  &lt;/extensionElements&gt;
        
  ...

&lt;/process&gt;</programlisting>
      <para>For events related to entities, it's also possible to add listeners to a process-definition that get only notified when entity-events occur for a certain
      entity type. The snippet below shows how this can be achieved. It can be used along for ALL entity-events (first example) or for specific event types only (second example).</para>   
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener class=&quot;org.activiti.engine.test.MyEventListener&quot; entityType=&quot;task&quot; /&gt;
    &lt;activiti:eventListener delegateExpression=&quot;${testEventListener}&quot; events=&quot;ENTITY_CREATED&quot; entityType=&quot;task&quot; /&gt;
  &lt;/extensionElements&gt;
        
  ...

&lt;/process&gt;</programlisting>

 <para>For events related to entities, it's also possible to add listeners to a process-definition that get notified only entity-events occur for a certain
      entity type. The snippet below shows how this can be done. It can be used along for ALL entity-events (first example) or for specific event types only (second example).</para>   
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener class=&quot;org.activiti.engine.test.MyEventListener&quot; entityType=&quot;task&quot; /&gt;
    &lt;activiti:eventListener delegateExpression=&quot;${testEventListener}&quot; events=&quot;ENTITY_CREATED&quot; entityType=&quot;task&quot; /&gt;
  &lt;/extensionElements&gt;
        
  ...

&lt;/process&gt;</programlisting>
<para>Supported values for the <literal>entityType</literal> are: <literal>attachment</literal>, <literal>comment</literal>, <literal>execution</literal>,<literal>identity-link</literal>, <literal>job</literal>, <literal>process-instance</literal>, 
<literal>process-definition</literal>, <literal>task</literal>.</para>
</section>
<section>
        <title>Listeners throwing BPMN events</title>
        <para>
          <link linkend="experimental">
            <emphasis role="bold">[EXPERIMENTAL]</emphasis>
          </link>
        </para>
        <para>Another way of handling events being dispatched is to throw a BPMN event. Please bare in mind that it only makes sense to throw BPMN-events with certain kinds of
        activiti event types. For example, throwing a BPMN event when the process-instance is deleted will result in an error. The snippet below shows how to throw a signal inside process-instance, throw a signal to an external
        process (global), throw a message-event inside the process-instance and throw an error-event inside the process-instance. Instead of using the <literal>class</literal> or <literal>delegateExpression</literal>,
        the attribute <literal>throwEvent</literal> is used, along with an additional attribute, specific to the type of event being thrown.</para>
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener throwEvent=&quot;signal&quot; signalName=&quot;My signal&quot; events=&quot;TASK_ASSIGNED&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/process&gt;</programlisting>
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener throwEvent=&quot;globalSignal&quot; signalName=&quot;My signal&quot; events=&quot;TASK_ASSIGNED&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/process&gt;</programlisting>
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener throwEvent=&quot;message&quot; messageName=&quot;My message&quot; events=&quot;TASK_ASSIGNED&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/process&gt;</programlisting>
        <programlisting>
&lt;process id="testEventListeners"&gt;
  &lt;extensionElements&gt;
    &lt;activiti:eventListener throwEvent=&quot;error&quot; errorCode=&quot;123&quot; events=&quot;TASK_ASSIGNED&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/process&gt;</programlisting>

<para>If additional logic is needed to decide whether or not to throw the BPMN-event, it's possible to extend the listener-classes provided by Activiti. By overriding the <literal>isValidEvent(ActivitiEvent event)</literal>
in your subclass, BPMN-event throwing can be prevented. The classes involved are <literal>org.activiti.engine.test.api.event.SignalThrowingEventListenerTest</literal>, <literal>org.activiti.engine.impl.bpmn.helper.MessageThrowingEventListener</literal> and <literal>org.activiti.engine.impl.bpmn.helper.ErrorThrowingEventListener</literal>.</para>
       
      </section>
       <section>
        <title>Notes on listeners on a process-definition</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>
              Event-listeners can only be declared on the <literal>process</literal> element, as a child-element of the <literal>extensionElements</literal>. Listeners cannot be defined on individual activities in the process.
            </para>
          </listitem>
          <listitem>
            <para>
              Expressions used in the <literal>delegateExpression</literal> do not have access to the execution-context, as other expressions (eg. in gateways) have. They can only reference beans defined in the <literal>beans</literal> property of the 
              process engine configuration or when using spring (and the beans property is absent) to any spring-bean that implements the listener interface.
            </para>
          </listitem>
          <listitem>
            <para>
              When using the <literal>class</literal> attribute of a listener, there will only be a single instance of that class created. Make sure the listener implementations do not rely on member-fields or ensure safe usage from multiple threads/contexts.
            </para>
          </listitem>
          <listitem>
            <para>
              When an illegal event-type is used in the <literal>events</literal> attribute or illegal <literal>throwEvent</literal> value is used, an exception will be thrown when the process-definition is deployed (effectively failing the deployment). When an illegal value for <literal>class</literal> or <literal>delegateExecution</literal> is supplied (either unexisting class, unexisting bean referenced or delegate not implementing listener interface), an exception will
              be thrown when the process is started (or when the first valid event for that process-definition is dispatched to the listener). Make sure the referenced classes are on the classpath and that the expressions resolve to a valid instance.
            </para>
          </listitem>
        </itemizedlist>
      </para>
</section>
      </section> 
      <section id="eventDispatcherCustomEvents">
        <title>Dispatching events through API</title>
        <para>We opened up the event-dispatching mechanism through the API, to allow you to dispatch custom events to any listeners that are registered in the engine. It's recommended
        (although not enforced) to only dispatch <literal>ActivitiEvents</literal> with type <literal>CUSTOM</literal>. Dispatching the event can be done using the <literal>RuntimeService</literal>:
        <programlisting>
/**
 * Dispatches the given event to any listeners that are registered.
 * @param event event to dispatch.
 * 
 * @throws ActivitiException if an exception occurs when dispatching the event or when the {@link ActivitiEventDispatcher}
 * is disabled.
 * @throws ActivitiIllegalArgumentException when the given event is not suitable for dispatching.
 */
 void dispatchEvent(ActivitiEvent event);</programlisting>
        </para>
      </section> 
      
       <section id="eventDispatcherEventTypes">
        <title>Supported event types</title>
        <para>Listed below are all event types that can occur in the engine. Each type corresponds to an enum value in the <literal>org.activiti.engine.delegate.event.ActivitiEventType</literal>.</para>
        
        <table id="eventTypes">
          <title>Supported events</title>
          <tgroup cols='3'>
            <thead>
              <row>
                <entry>Event name</entry>
                <entry>Description</entry>
                <entry>Event classes</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>ENGINE_CREATED</entry>
                <entry>The process-engine this listener is attached to, has been created and is ready for API-calls.</entry>
                <entry><literal>org.activiti...ActivitiEvent</literal></entry>
              </row>
              <row>
                <entry>ENGINE_CLOSED</entry>
                <entry>The process-engine this listener is attached to, has been closed. API-calls to the engine are no longer possible.</entry>
                <entry><literal>org.activiti...ActivitiEvent</literal></entry>
              </row>
              <row>
                <entry>ENTITY_CREATED</entry>
                <entry>A new entity is created. The new entity is contained in the event.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>ENTITY_CREATED</entry>
                <entry>A new entity has been created and is fully initialized. If any children are created as part of the creation of an entity, this event will be fired AFTER the create/initialisation of the child entities as opposed to the <literal>ENTITY_CREATE</literal> event.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>ENTITY_UPDATED</entry>
                <entry>An existing is updated. The updated entity is contained in the event.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>ENTITY_DELETED</entry>
                <entry>An existing entity is deleted. The deleted entity is contained in the event.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>ENTITY_SUSPENDED</entry>
                <entry>An existing entity is suspended. The suspended entity is contained in the event. Will be dispatched for ProcessDefinitions, ProcessInstances and Tasks.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>ENTITY_ACTIVATED</entry>
                <entry>An existing entity is activated. The activated entity is contained in the event. Will be dispatched for ProcessDefinitions, ProcessInstances and Tasks.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>JOB_EXECUTION_SUCCESS</entry>
                <entry>A job has been executed successfully. The event contains the job that was executed.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>JOB_EXECUTION_FAILURE</entry>
                <entry>The execution of a job has failed. The event contains the job that was executed and the exception.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal> and <literal>org.activiti...ActivitiExceptionEvent</literal></entry>
              </row>
              <row>
                <entry>JOB_RETRIES_DECREMENTED</entry>
                <entry>The number of job retries have been decremented due to a failed job. The event contains the job that was updated.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>TIMER_FIRED</entry>
                <entry>A timer has been fired. The event contains the job that was executed?</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>ACTIVITY_STARTED</entry>
                <entry>An activity is starting to execute</entry>
                <entry><literal>org.activiti...ActivitiActivityEvent</literal></entry>
              </row>
              <row>
                <entry>ACTIVITY_COMPLETED</entry>
                <entry>An activity is completed successfully</entry>
                <entry><literal>org.activiti...ActivitiActivityEvent</literal></entry>
              </row>
              <row>
                <entry>ACTIVITY_SIGNALED</entry>
                <entry>An activity received a signal</entry>
                <entry><literal>org.activiti...ActivitiSignalEvent</literal></entry>
              </row>
              <row>
                <entry>ACTIVITY_MESSAGE_RECEIVED</entry>
                <entry>An activity received a message. Dispatched before the activity receives the message. When received, a <literal>ACTIVITY_SIGNAL</literal> or <literal>ACTIVITY_STARTED</literal> will
                be dispatched for this activity, depending on the type (boundary-event or event-subprocess start-event)</entry>
                <entry><literal>org.activiti...ActivitiMessageEvent</literal></entry>
              </row>
              <row>
                <entry>ACTIVITY_ERROR_RECEIVED</entry>
                <entry>An activity has received an error event. Dispatched before the actual error has been handled by
                 the activity. The event's <literal>activityId</literal> contains a reference to the error-handling activity.
                 This event will be either followed by a <literal>ACTIVITY_SIGNALLED</literal> event or <literal>ACTIVITY_COMPLETE</literal>
                  for the involved activity, if the error was delivered successfully.</entry>
                <entry><literal>org.activiti...ActivitiErrorEvent</literal></entry>
              </row>
              <row>
                <entry>UNCAUGHT_BPMN_ERROR</entry>
                <entry>An uncaught BPMN error has been thrown. The process did not have any handlers for that specific error. The event's <literal>activityId</literal> will be empty.</entry>
                <entry><literal>org.activiti...ActivitiErrorEvent</literal></entry>
              </row>
              <row>
                <entry>ACTIVITY_COMPENSATE</entry>
                <entry>An activity is about to be compensated. The event contains the id of the activity that is will be executed for compensation.</entry>
                <entry><literal>org.activiti...ActivitiActivityEvent</literal></entry>
              </row>
              <row>
                <entry>VARIABLE_CREATED</entry>
                <entry>A variable has been created. The event contains the variable name, value and related execution and task (if any).</entry>
                <entry><literal>org.activiti...ActivitiVariableEvent</literal></entry>
              </row>
              <row>
                <entry>VARIABLE_UPDATED</entry>
                <entry>An existing variable has been updated. The event contains the variable name, updated value and related execution and task (if any).</entry>
                <entry><literal>org.activiti...ActivitiVariableEvent</literal></entry>
              </row>
              <row>
                <entry>VARIABLE_DELETED</entry>
                <entry>An existing variable has been deleted. The event contains the variable name, last known value and related execution and task (if any).</entry>
                <entry><literal>org.activiti...ActivitiVariableEvent</literal></entry>
              </row>
              <row>
                <entry>TASK_ASSIGNED</entry>
                <entry>A task has been assigned to a user. The event contains the task</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>TASK_COMPLETED</entry>
                <entry>A task has been completed. This is dispatched before the <literal>ENTITY_DELETE</literal> event. In case the task is part of a process, this event will be
                fired before the process has moved on and will be followed by a <literal>ACTIVITY_COMPLETE</literal> event, targeting the activity that represents the completed task.</entry>
                <entry><literal>org.activiti...ActivitiEntityEvent</literal></entry>
              </row>
              <row>
                <entry>MEMBERSHIP_CREATED</entry>
                <entry>A user has been added to a group. The event contains the id's of the user and group involved.</entry>
                <entry><literal>org.activiti...ActivitiMembershipEvent</literal></entry>
              </row>
              <row>
                <entry>MEMBERSHIP_DELETED</entry>
                <entry>A user has been removed from a group. The event contains the id's of the user and group involved.</entry>
                <entry><literal>org.activiti...ActivitiMembershipEvent</literal></entry>
              </row>
              <row>
                <entry>MEMBERSHIPS_DELETED</entry>
                <entry>All members will be removed from a group. The event is thrown before the members are removed, so they are still accessible. No individual
                <literal>MEMBERSHIP_DELETED</literal> events will be thrown if all members are deleted at once, for performance reasons.</entry>
                <entry><literal>org.activiti...ActivitiMembershipEvent</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          All <literal>ENTITY_*</literal> events are related to entities inside the engine. The list below show an overview of what entity-events are dispatched
          for which entities:
          
          <itemizedlist>
            <listitem>
              <para><emphasis role="bold"><literal>ENTITY_CREATED, ENTITY_INITIALIZED, ENTITY_DELETED</literal></emphasis>: Attachment, Comment, Deployment, Execution, Group, IdentityLink, Job, Model, ProcessDefinition, ProcessInstance, Task, User.</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold"><literal>ENTITY_UPDATED</literal></emphasis>: Attachment, Deployment, Execution, Group, IdentityLink, Job, Model, ProcessDefinition, ProcessInstance, Task, User.</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold"><literal>ENTITY_SUSPENDED, ENTITY_ACTIVATED</literal></emphasis>: ProcessDefinition, ProcessInstance/Execution, Task.</para>
            </listitem>
          </itemizedlist>
        </para>
    </section> 
    
      <section id="eventDispatcherRemarks">
        <title>Additional remarks</title>
        <para>
          <emphasis role="bold">Only listeners are notified in the engine the events are dispatched from.</emphasis> So in case you have different engines - running against the same database - only events that originated
          in the engine the listener is registered for, are dispatched to that listener. The events that occur in the other engine are not dispatched to the listeners, regardless of the fact
          they are running in the same JVM or not. 
        </para>
        <para>
          Certain event-types (related to entities) expose the targetted entity. Depending on the type or event, these entities cannot be updated anymore (eg. when the entity is deleted). If possible, use the <literal>EngineServices</literal> exposed by the event to interact in a safe way with the engine. Even then, you need to 
          be cautious with updates/operations on entities that are involved in the dispatched event.
        </para>
        <para>
          No entity-events are dispatched related to history, as they all have a runtime-counterpart which have their events dispatched.
        </para>
      </section> 
  </section> 

</chapter>