<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>

  <title>Simulation with Activiti-Crystalball (Experimental)</title>
<section id="crb-introduction">
  <title>Introduction</title>
  <section id="crb-overview">
    <title>Short overview</title>
    <para>
      activiti-crystalball (CrystalBall) is simulation engine for Activiti Business Process Management Platform. CrystalBall allows
      use of simulation for:
      <itemizedlist>
        <listitem>
          <para>decision support - for production workflow (e.g. should we add now more resources to the system to meet
            due dates?).</para>
        </listitem>
        <listitem>
          <para>optimisation and understanding - testing changes and understanding their impacts.</para>
        </listitem>
        <listitem>
          <para>
            training - simulation can be used to train staff before roll out.
          </para>
        </listitem>
        <listitem>
          <para>
            ... .
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="crb-unique">
    <title>CrystalBall is unique</title>
    <para>
      No need to:
      <itemizedlist>
        <listitem>
          <para>create separate simulation models and engines.</para>
        </listitem>
        <listitem>
          <para>create different reporting for simulation.</para>
        </listitem>
        <listitem>
          <para>feed simulation engine with a lot of data.</para>
        </listitem>
      </itemizedlist>
      CrystalBall simulator is based on activiti. That's why it is easy to copy data and start
      simulation and be able to replay workflow behavior from the history.
    </para>
  </section>
</section>

<section id="crb-inside">
<title>CrystalBall inside</title>
<para>
  CrystalBall is a <ulink url="http://en.wikipedia.org/wiki/Discrete_event_simulation">discrete event simulator</ulink>.
  The simplest implementation is org.activiti.crystalball.simulator.SimpleSimulationRun.
  <programlisting id="crb-SimpleSimulationRun">
    init();

    SimulationEvent event = removeSimulationEvent();

    while (!simulationEnd(event)) {
      executeEvent(event);
      event = removeSimulationEvent();
    }

    close();
  </programlisting>
  SimulationRun is able to execute simulation events generated from different sources (see <ulink url="#crb-playback">PlayBack</ulink>).
</para>
</section>

    <section id="crb-history-analysis">
      <title>History analysis</title>
      <para>
        One of the usecases where simulation can be used is analysis of the history.
        The production environment does not give any chance to repeat and debug bugs. That's why it is almost
        impossible to get process engine into the state which is the same as it was on the production environment
        on the time when bug occurred.
        The problem is not the hardware but
        <itemizedlist>
          <listitem>
            <para>time - process instance run can take several months.</para>
          </listitem>
          <listitem>
            <para>concurrency - process instance run can interfere with another one and bug can be found only in the
              case of parallel execution of both of them.
            </para>
          </listitem>
          <listitem>
            <para>users - a lot of users can participate on the process instance execution. It takes a lot of effort
              to get process instance to the state where error occurred.
            </para>
          </listitem>
        </itemizedlist>
        The simulation can address mentioned issues easily. Simulation time is virtual and does not depend on real time.
        Activiti process engine itself is virtual. There is no need to create virtual process engine which is
        used in the simulation experiment. In this case concurrency can be addressed naturally. Users behavior can be
        logged and replayed from this log or predicted and generated on demand.
      </para>
      <para>
        The best way to analyze history is to re-live it once more time. The re-living is hardly achievable in real
        life but it can be achieved by simulation.
      </para>

      <section id="crb-collectEvents">
        <title>Events from the history.</title>
        <para>
          The most important thing to re-live the history is to collect events which affected world status. Let's say
          that our process is driven by user events (e.g. claim, complete task...). In such a case we have can use two
          event sources:
          <itemizedlist>
            <listitem>
              <para>process history - currently supported only in original <ulink url="http://gro-mar.github.io/activiti-crystalball/">activiti-crystalball</ulink> project.</para>
            </listitem>
            <listitem>
              <para>logged ActivitiEvents. Basically we can add ActivitiEventListener to the engine from which we want
                to log events. Logged events are stored and after the time analyzed. The basic implementation
                is org.activiti.crystalball.simulator.delegate.event.impl.InMemoryRecordActivitiEventListener:
<programlisting id="crb-RecordActivitiEventListener">
  @Override
  public void onEvent(ActivitiEvent event) {
    Collection&lt;SimulationEvent&gt; simulationEvents = transform(event);
    store(simulationEvents);
  }
</programlisting>
              </para>
            </listitem>
          </itemizedlist>
          Events are stored. We can continue in re-living the history again.
        </para>
      </section>

      <section id="crb-playback">
        <title>PlayBack</title>
        <para>
        The good thing on the playback is that it can be played over and over again till we do not completely
        understand what has happened. Crystalball simulation is based on real data, real user behavior
        and it is crystalball's advantage.
        </para>
        <para>
          The best way to understand how playback works is to explain step by step an example based on JUnit test
          org.activiti.crystalball.simulator.delegate.event.PlaybackRunTest. The process on which simulation
          is tested is the simplest one:
<programlisting id="crb-playbackDeploy">
  &lt;process id="theSimplestProcess" name="Without task Process"&gt;
    &lt;documentation&gt;This is a process for testing purposes&lt;/documentation&gt;

    &lt;startEvent id="theStart"/&gt;
    &lt;sequenceFlow id="flow1" sourceRef="theStart" targetRef="theEnd"/&gt;
    &lt;endEvent id="theEnd"/&gt;

  &lt;/process&gt;
</programlisting>
          This process is deployed and used in real and simulation run.
          <itemizedlist>
            <listitem>
              <para>record events -
<programlisting id="crb-playbackRecordEvents">
  // get process engine with record listener to log events
  ProcessEngine processEngine = (new RecordableProcessEngineFactory(THE_SIMPLEST_PROCESS, listener))
  .getObject();

  // start process instance with variables
  Map&lt;String,Object&gt; variables = new HashMap&lt;String, Object&gt;();
  variables.put(TEST_VARIABLE, TEST_VALUE);
  processEngine.getRuntimeService().startProcessInstanceByKey(SIMPLEST_PROCESS, BUSINESS_KEY,variables);

  // check process engine status - there should be one process instance in the history
  checkStatus(processEngine);

  // close and destroy process engine
  EventRecorderTestUtils.closeProcessEngine(processEngine, listener);
  ProcessEngines.destroy();
</programlisting>
              Code snippet above will record ActivitiEventType.ENTITY_CREATED after startProcessInstanceByKey method
              invocation.
              </para>
            </listitem>
            <listitem>
              <para>start simulation run
<programlisting id="crb-playbackStartSimulationRun">
  final SimpleSimulationRun.Builder builder = new SimpleSimulationRun.Builder();
  // init simulation run
  // get process engine factory - the only difference from RecordableProcessEngineFactory that log listener is not added
  DefaultSimulationProcessEngineFactory simulationProcessEngineFactory = new DefaultSimulationProcessEngineFactory(THE_SIMPLEST_PROCESS);
  // configure simulation run
  builder.processEngine(simulationProcessEngineFactory)
         // set playback event calendar from recorded events
         .eventCalendar(new PlaybackEventCalendarFactory(new SimulationEventComparator(), listener.getSimulationEvents()))
         // set handlers for simulation events
         .customEventHandlerMap(EventRecorderTestUtils.getHandlers());
  SimpleSimulationRun simRun = builder.build();

  simRun.execute(new NoExecutionVariableScope());

  // check the status - the same method which was used in record events method
  checkStatus(simulationProcessEngineFactory.getObject());

  // close and destroy process engine
  simRun.getProcessEngine().close();
  ProcessEngines.destroy();
</programlisting>
              </para>
            </listitem>
          </itemizedlist>
          More advanced playback examples are in org.activiti.crystalball.simulator.delegate.event.PlaybackProcessStartTest
        </para>
      </section>

      <section id="crb-debug">
        <title>Process engine debugger</title>
        <para>
          Playback limits us to execute all simulation events (e.g. start process, complete task) in one bunch. Debugger
          allows us to split execution into smaller steps and observe process engine status between the steps.
        </para>
        <para>
          SimpleSimulationRun implements SimulationDebugger interface. SimulationDebugger allows to execute simulation
          events step by step, to run simulation to the specified time.
<programlisting id="crb-debuggerInterface">
  /**
  * Allows to run simulation in debug mode
  */
  public interface SimulationDebugger {
  /**
  * initialize simulation run
  * @param execution - variable scope to transfer variables from and to simulation run
  */
  void init(VariableScope execution);

  /**
  * step one simulation event forward
  */
  void step();

  /**
  * continue in the simulation run
  */
  void runContinue();

  /**
  * execute simulation run till simulationTime
  */
  void runTo(long simulationTime);

  /**
  * execute simulation run till simulation event of the specific type
  */
  void runTo(String simulationEventType);

  /**
  * close simulation run
  */
  void close();
  }
</programlisting>
          To see process engine debugger in action run SimpleSimulationRunTest
        </para>
      </section>
      <section id="crb-replay">
        <title>Replay</title>
        <para>
          Playback needs to create another process engine instance. Playback does not affect "real" environment, on
          the other side it needs simulation experiment configuration. Replay works on the "real" process engine. Replay
          executes simulation event on the running process engine. The consequence is that replay lives in real time.
          Real time means that simulation events are scheduled to be executed immediately.
        </para>
        <para>
          Example bellow shows how to replay one process instance. The same technique can be applied in playback to for
          playing only one process instance. (ReplayRunTest)
          The first part of the test initialize process engine, starts one process instance and completes process
          instance's task.
<programlisting id="crb-replayTest-init">
  ProcessEngine processEngine = initProcessEngine();

  TaskService taskService = processEngine.getTaskService();
  RuntimeService runtimeService = processEngine.getRuntimeService();

  Map&lt;String, Object&gt; variables = new HashMap&lt;String, Object&gt;();
  variables.put(TEST_VARIABLE, TEST_VALUE);
  ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(USERTASK_PROCESS, BUSINESS_KEY,
  variables);

  Task task = taskService.createTaskQuery().taskDefinitionKey("userTask").singleResult();
  TimeUnit.MILLISECONDS.sleep(50);
  taskService.complete(task.getId());
</programlisting>
          Used process engine is basic InMemoryStandaloneProcessEngine with
          <itemizedlist>
            <listitem>
              <para>
              InMemoryRecordActivitiEventListener
              (already used in playback) to record Activiti events and transform them to simulation events.
              </para>
            </listitem>
            <listitem>
              <para>
              UserTaskExecutionListener - when new user task is created and new task is form replay process
              instance, schedule task complete event to the event calendar.
              </para>
            </listitem>
          </itemizedlist>
          Next test part starts simulation debugger on the same process engine as original process.
          Replay event handlers replaces StartProcessEventHandler with StartReplayProcessEventHandler.
          StartReplayProcessEventHandler takes process instance Id to replay and in the init phase schedule process
          instance start. StartProcessEventHandler in the handle phase starts new process instance with one reserved
          variable. Variable name is "_replay.processInstanceId". The variable is used to store id of the process which
          is replayed. ReplaySimulationRun in comparison with SimpleSimulationRun does not:
          <itemizedlist>
            <listitem>
              <para>create and close process
                engine instance.</para>
            </listitem>
            <listitem>
              <para>change simulation time. (real time can not be changed)</para>
            </listitem>
          </itemizedlist>
<programlisting id="crb-replayTest-simDebug">
  final SimulationDebugger simRun = new ReplaySimulationRun(processEngine,
  getReplayHandlers(processInstance.getId()));
</programlisting>
          And now replay process instance can start. At the beginning there are no process instances running. There is
          one process instance finished in the history. After the init there is one simulation event in the event calendar
          - to start process instance which replays already finished process instance.
<programlisting id="crb-replayTest-simStart">
  simRun.init();

  // original process is finished - there should not be any running process instance/task
  assertEquals(0, runtimeService.createProcessInstanceQuery().processDefinitionKey(USERTASK_PROCESS).count());
  assertEquals(0, taskService.createTaskQuery().taskDefinitionKey("userTask").count());

  simRun.step();

  // replay process was started
  assertEquals(1, runtimeService.createProcessInstanceQuery().processDefinitionKey(USERTASK_PROCESS).count());
  // there should be one task
  assertEquals(1, taskService.createTaskQuery().taskDefinitionKey("userTask").count());
</programlisting>
          When the task was created UserTaskExecutionListener created new simulation event to complete user task.
<programlisting id="crb-replayTest-simStep">
  simRun.step();

  // userTask was completed - replay process was finished
  assertEquals(0, runtimeService.createProcessInstanceQuery().processDefinitionKey(USERTASK_PROCESS).count());
  assertEquals(0, taskService.createTaskQuery().taskDefinitionKey("userTask").count());

</programlisting>
          Simulation is finished and we can continue in another process instance start, or any other events.
          For now we can close simRun and process engine.
<programlisting id="crb-replayTest-simClose">
  simRun.close();
  processEngine.close();
  ProcessEngines.destroy();
</programlisting>
        </para>
      </section>
    </section>
</chapter>

