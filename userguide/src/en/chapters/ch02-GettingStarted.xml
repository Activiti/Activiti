<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>Getting Started</title>
  
  <section id="demo.setup.one.minute.version">
    <title>One minute version</title>
    <para>
      After downloading the Activiti Explorer WAR file from the <ulink url="http://www.activiti.org">Activiti website</ulink>,
      follow these steps to get the demo setup running with default settings. 
      You'll need a working <ulink url="http://java.sun.com/javase/downloads/index.jsp">Java runtime</ulink> and
      <ulink url="http://tomcat.apache.org/download-70.cgi">Apache Tomcat</ulink> installation (actually, 
      any web container would work since we only rely on the servlet capablility. But we test on Tomcat primarily).
      <itemizedlist>
        <listitem>
          <para>Copy the downloaded activiti-explorer.war to the webapps directory of Tomcat.</para>
        </listitem>
        <listitem>
          <para>Start Tomcat by running the startup.bat or startup.sh scripts in the bin folder of Tomcat</para>
        </listitem>
        <listitem>
          <para>
            When Tomcat is started open your browser and go to  <ulink url="http://localhost:8080/activiti-explorer">http://localhost:8080/activiti-explorer</ulink>. 
            Login with kermit/kermit.
          </para>
        </listitem>
      </itemizedlist>
      That's it! The Activiti Explorer application uses an in-memory H2 database by default, if you want to use another database 
      configuration please read <link linkend="activiti.setup">the longer version</link>.
    </para>
  </section>
  
  <section id="activiti.setup">
    <title>Activiti setup</title>
    <para>To install Activiti you'll need a working 
    <ulink url="http://java.sun.com/javase/downloads/index.jsp">Java runtime</ulink> and
    <ulink url="http://tomcat.apache.org/download-70.cgi">Apache Tomcat</ulink> installation.
    Also make sure that the <emphasis>JAVA_HOME</emphasis> system
    variable is correctly set. The way to do this depends on your operating system.
    </para>
    <para>To get the Activiti Explorer and REST web applications running just copy the WARs downloaded from
    the Activiti download page to the <literal>webapps</literal> folder in your Tomcat installation directory. By default the Explorer
    application runs with an in-memory database and with example processes, users and groups.
    </para>
    <para>These are the demo users:</para>
    <table>
      <title>The demo users</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>UserId</entry>
            <entry>Password</entry>
            <entry>Security roles</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>kermit</entry>
            <entry>kermit</entry>
            <entry>admin</entry>
          </row>
          <row>
            <entry>gonzo</entry>
            <entry>gonzo</entry>
            <entry>manager</entry>
          </row>
          <row>
            <entry>fozzie</entry>
            <entry>fozzie</entry>
            <entry>user</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>Now you can access following web application:</para>
    <table>
      <title>The webapp tools</title>
      <tgroup cols='4'>
        <thead>
          <row>
            <entry>Webapp Name</entry>
            <entry>URL</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Activiti Explorer</entry>
            <entry><ulink url="http://localhost:8080/activiti-explorer">http://localhost:8080/activiti-explorer</ulink> </entry>
            <entry>The process engine user console.  Use this tool to start new processes, assign
            tasks, view and claim tasks, etc. This tool also allows to administrate the Activiti engine. 
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>
      Note that the Activiti Explorer demo setup is a way of showing the capabilities and functionality of
      Activiti as easily and as fast as possible. This does however, <emphasis role="bold">not</emphasis> mean
      that it is the only way of using Activiti. As Activiti is 'just a jar', it can 
      be embedded in any Java environment: with swing or on a Tomcat, JBoss, WebSphere, etc.
      Or you could very well choose to run Activiti as a typical, standalone BPM server.
      If it is possible in Java, it is possible with Activiti!
    </para>
  </section>
  
  <section id="activiti.setup.database">
    <title>Activiti database setup</title>
    <para>As said in the one minute demo setup, the Activiti Explorer runs an in-memory H2 database by default.
    To run the Activiti Explorer with a standalone H2 or another database the db.properties in the WEB-INF/classes of the Activiti Explorer web application
    should be changed.
    </para>
    <para>In addition, be aware that the Activiti Explorer generates demo user and groups, process definitions and models by default.
    To disable this, the activiti-standalone-context.xml file in the WEB-INF folder should be changed. To disable the demo setup fully you can use the following snippet
    of the <literal>demoDataGenerator</literal> bean definition. But as you can see you can also enable and disable items individually.
    </para>
    <programlisting>
      &lt;bean id="demoDataGenerator" class="org.activiti.explorer.demo.DemoDataGenerator">
        &lt;property name="processEngine" ref="processEngine" />
        &lt;property name="createDemoUsersAndGroups" value="false" />
        &lt;property name="createDemoProcessDefinitions" value="false" />
        &lt;property name="createDemoModels" value="false" />
      &lt;/bean>
    </programlisting>
  </section>
  
  <section id="getting.started.including.libs">

    <title>Include the Activiti jar and its dependencies</title>
    
    <para>
        To include the Activiti jar and its dependent libraries, we advise using 
        <ulink url="http://maven.apache.org/">Maven</ulink> (or <ulink url="http://ant.apache.org/ivy/">Ivy</ulink>), as it 
        simplifies dependency management on both our and your side a lot. Follow the instructions
        at <ulink url="http://www.activiti.org/community.html#maven.repository"></ulink> to
        include the necessary jars in your environment.
    </para>    
    
    <para>
        Alternatively, if you don't want to use Maven you can include the jars in your project
        yourself. The Activiti download zip contains a folder <literal>libs</literal> which
        contain all the Activiti jars (and the source jars). The dependencies are not shipped this way.
        The required dependencies of the Activiti engine are (generated using <literal>mvn dependency:tree</literal>):
       <programlisting>
org.activiti:activiti-engine:jar:5.12.1
+- org.apache.commons:commons-email:jar:1.2:compile
|  +- javax.mail:mail:jar:1.4.1:compile
|  \- javax.activation:activation:jar:1.1:compile
+- org.apache.commons:commons-lang3:jar:3.1:compile
+- org.mybatis:mybatis:jar:3.1.1:compile
+- org.springframework:spring-beans:jar:3.1.2.RELEASE:compile
|  \- org.springframework:spring-core:jar:3.1.2.RELEASE:compile
|     +- org.springframework:spring-asm:jar:3.1.2.RELEASE:compile
|     \- commons-logging:commons-logging:jar:1.1.1:compile
\- joda-time:joda-time:jar:2.1:compile       
       </programlisting>
       Note: the mail jars are only needed if you are using the <link linkend="bpmnEmailTask">mail service task</link>.
    </para>
    
    <para>
        All the dependencies can easily be downloaded using <literal>mvn dependency:copy-dependencies</literal>
        on a module of the <ulink url="https://github.com/Activiti/Activiti">Activiti source code</ulink>.
    </para>
    
  </section>
  
  <section id="getting.started.next.steps">
    <title>Next steps</title>
    <para>
        Playing around with the <link linkend="activitiExplorer">Activiti Explorer</link> web application
        is a good way to get familiar with the Activiti concepts and functionality. However, the 
        main purpose of Activiti is of course to enable powerful BPM and workflow capabilities
        in your own application. The following chapters will help you to get familiar with how to
        use Activiti programmatically in your environment:
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="configuration">The chapter on configuration</link> will teach you
                    how to set up Activiti and how to obtain an instance of the <literal>ProcessEngine</literal>
                    class which is your central access point to all the engine functionality of Activiti.    
                </para>
            </listitem>
            <listitem>
                <para>
                    <link linkend="chapterApi">The API chapter</link> will guide you through the 
                    services which form Activiti's API. These services offer the Activiti engine
                    functionality in a convenient yet powerful way and can be used in any Java
                    environment.
                </para>
            </listitem>
            <listitem>
                <para>
                    Interested in getting insight on BPMN 2.0, the format in which processes for the 
                    Activiti engine are written? Then continue on to the <link linkend="bpmn20">BPMN 2.0 section</link>.
                </para>
            </listitem>
        </itemizedlist>
    </para>
  </section>
  
</chapter>
