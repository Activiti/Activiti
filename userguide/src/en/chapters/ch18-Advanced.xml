<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
	<title>Advanced</title>
	
	<para>
	   The following sections cover advanced use cases of using Activiti, that go beyond typical execution of BPMN 2.0 processes.
	   As such, a certain proficiency and experience with Activiti is advisable to understand the material here. 
	</para>

	<section id="advanced_parseHandlers">
	
	   <title>Hooking into process parsing</title>
	
	   <para>
	       A bpmn 2.0 xml needs to be parsed to the Activiti internal model to be executed on the Activiti engine. This parsing
	       happens during a deployment of the process or when a process is not found in memory, and the
	       xml is fetched from the database. 
	   </para>
	   
	   <para>
	       For each of these processes, the <literal>BpmnParser</literal> class creates a new <literal>BpmnParse</literal> instance.
	       This instance will be used as container for all things that are done during parsing. The parsing on itself is very simple:
	       for each BPMN 2.0 element, there is a matching instance of the <literal>org.activiti.engine.parse.BpmnParseHandler</literal>
	       available in the engine. As such, the parser has a map which basically maps an BPMN 2.0 element class to an instance of 
	       <literal>BpmnParseHandler</literal>. By default, Activiti has <literal>BpmnParseHandler</literal> instances to handle
	       all supported elements and also uses it to attach execution listeners to steps of the process for creating the history.
	   </para>
	   
	   <para>
	       It is possible to add custom instances of <literal>org.activiti.engine.parse.BpmnParseHandler</literal> to the Activiti engine.
	       An often seen use case is for example to add execution listeners to certain steps that fire events to some queue for event processing.
	       The history handling is done in such a way internally in Activiti.
	       To add such custom handlers, the Activiti configuration needs to be tweaked:
	       <programlisting>
&lt;property name=&quot;preBpmnParseHandlers&quot;&gt;
  &lt;list&gt;
    &lt;bean class=&quot;org.activiti.parsing.MyFirstBpmnParseHandler&quot; /&gt;
  &lt;/list&gt;
&lt;/property&gt;
	    
&lt;property name=&quot;postBpmnParseHandlers&quot;&gt;
  &lt;list&gt;
    &lt;bean class=&quot;org.activiti.parsing.MySecondBpmnParseHandler&quot; /&gt;
    &lt;bean class=&quot;org.activiti.parsing.MyThirdBpmnParseHandler&quot; /&gt;
  &lt;/list&gt;
&lt;/property&gt;    
	       </programlisting>
	       The list of <literal>BpmnParseHandler</literal> instances that is configured in the <literal>preBpmnParseHandlers</literal> property
	       are added before any of the default handlers. Likewise, the <literal>postBpmnParseHandlers</literal> are added after those.
	       This can be important if the order of things matter for the logic contained in the custom parse handlers.
	   </para>
	   
	   <para>
	       <literal>org.activiti.engine.parse.BpmnParseHandler</literal> is a simple interface:
	       <programlisting>
public interface BpmnParseHandler {
  
  Collection&lt;Class&gt;? extends BaseElement&gt;&gt; getHandledTypes();
  
  void parse(BpmnParse bpmnParse, BaseElement element);

}	       
	       </programlisting>
	       The <literal>getHandledTypes()</literal> method returns a collection of all the types handled by this parser. 
	       The possible types are a subclass of <literal>BaseElement</literal>, as directed by the generic type of the collection.
	       You can also extend the <literal>AbstractBpmnParseHandler</literal> class and override the <literal>getHandledType()</literal>
	       method, which only returns one Class and not a collection. This class contains also some helper methods
	       shared by many of the default parse handlers. 
	       The <literal>BpmnParseHandler</literal> instance will be called when the parser encounters any of the returned
	       types by this method. In the following example, whenever a process contained in a BPMN 2.0 xml is encountered, it 
	       will execute the logic in the <literal>executeParse</literal> method (which is a typecasted method that replaces
	       the regular <literal>parse</literal> method on the <literal>BpmnParseHandler</literal> interface). 
	       <programlisting>
public class TestBPMNParseHandler extends AbstractBpmnParseHandler&lt;Process&gt; {

  protected Class&lt;? extends BaseElement&gt; getHandledType() {
    return Process.class;
  }
  
  protected void executeParse(BpmnParse bpmnParse, Process element) {
     ..
  }

}	       
	       </programlisting>
	   </para>
	   
	   <para>
	       <emphasis role="bold">Important note:</emphasis> when writing custom parse handler, do not use any of the internal 
	       classes that are used to parse the BPMN 2.0 constructs. This will cause difficult to find bugs. The safe way to implement
	       a custom handler is to implement the <emphasis>BpmnParseHandler</emphasis> interface or extends the internal abstract class
	       <emphasis>org.activiti.engine.impl.bpmn.parser.handler.AbstractBpmnParseHandler</emphasis>.
	   </para>
	   
	   <para>
         It is possible (but less common) to replace the default <literal>BpmnParseHandler</literal> instances
         that are responsible for the parsing of the BPMN 2.0 elements to the internal Activiti model.
         This can be done by following snippet of logic:
         <programlisting>
&lt;property name=&quot;customDefaultBpmnParseHandlers&quot;&gt;
  &lt;list&gt;
    ...
  &lt;/list&gt;
&lt;/property&gt;         
         </programlisting>
         A simple example could for example be to force all of the service tasks to be asynchronous:
         <programlisting>
public class CustomUserTaskBpmnParseHandler extends ServiceTaskParseHandler {
  
  protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {
    
    // Do the regular stuff
    super.executeParse(bpmnParse, serviceTask);
    
    // Make always async
    ActivityImpl activity = findActivity(bpmnParse, serviceTask.getId());
    activity.setAsync(true);
  }

}         
         </programlisting>          
	   </para>
        
	</section>
	
	<section id="advanced.uuid.generator">
	
	   <title>UUID id generator for high concurrency</title>
	   
	   <para>
	       In some (very) high concurrency load cases, the default id generator may cause exceptions due to not being able
	       to fetch new id blocks quickly enough. Every process engine has one id generator. The default id generator reserves
	       a block of id's in the database, such that no other engine will be able to use id's from the same block. During 
	       engine operations, when the default id generator notices that the id block is used up, a new transaction is started
	       to fetch a new block. In (very) limited use cases this can cause problems when there is a real high load. For 
	       most use cases the default id generator is more than sufficient. The default <literal>org.activiti.engine.impl.db.DbIdGenerator</literal>
	       also has a property <literal>idBlockSize</literal> which can be configured to set the size of the reserved block of id's
	       and to tweak the behavior of the id fetching. 
	   </para>
	   
	   <para>
	       The alternative to the default id generator is the <literal>org.activiti.engine.impl.persistence.StrongUuidGenerator</literal>,
	       which generates a unique <ulink url="http://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</ulink> locally and uses that
	       as identifier for all entities. Since the UUID is generated without the need for database access, it copes better with very high concurrency use cases.
	       Do note that performance may differ from the default id generator (both positive and negative) depending on the machine.
	   </para>
	   
	   <para>
	       The UUID generator can be configured in the activiti configuration as follows:
<programlisting>
&lt;property name=&quot;idGenerator&quot;&gt;
    &lt;bean class=&quot;org.activiti.engine.impl.persistence.StrongUuidGenerator&quot; /&gt;
&lt;/property&gt;
</programlisting>	       
	   </para>
	   
	   <para>
	       The use of the UUID id generator depends on the following extra dependency:
	       <programlisting>
 &lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.uuid&lt;/groupId&gt;
    &lt;artifactId&gt;java-uuid-generator&lt;/artifactId&gt;
    &lt;version&gt;3.1.3&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
	   </para>
	
	</section>
	
	<section id="advanced.tenancy">
	
	   <title>Multitenancy</title>
	   
	   <para>
	       Multitenancy in general is a concept where the software is capable of serving multiple different
	       organizations. Key is that the data is partitioned and no organization can see the data of other ones.
	       In this context, such an organization (or a department, or a team or ...) is called a <emphasis>tenant</emphasis>.
	   </para>
	   
	   <para>
	       Note that this is fundamentally different from a multi-instance setup, where an Activiti Process Engine instance
	       is running for each organization separately (and with a different database schema). Although Activiti is lightweight,
	       and running a Process Engine instance doesn't take much resources, it does add complexity and more maintenance.
	       But, for some use cases it might be the right solution.
	   </para>
	   
	   <para>
          Multitenancy in Activiti is mainly implemented around partitioning the data. It is important to 
          note that <emphasis role="bod">Activiti does not enforce multi tenancy rules</emphasis>.
          This means it will not verify when querying and using data whether the user doing the operation
          is belonging to the correct tenant. This should be done in the layer calling the Activiti engine.
          Activiti does make sure that tenant information can be stored and used when retrieving process data.
	   </para>
	   
	   <para>
	       When deploying process definition to the Activiti Process Engine it is possible to pass a <emphasis>tenant identifier</emphasis>.
	       This is a string (eg. a UUID, department id, etc.), limited to 256 characters which is uniquely identifies the tenant:
	       <programlisting>
 repositoryService.createDeployment()
            .addClassPathResource(...)
            .tenantId("myTenantId")
            .deploy();</programlisting>    
	       Passing a tenant id during a deployment has following implications:
		   <itemizedlist>
	        <listitem>
	           <para>
	               All the process definitions contained in the deployment inherit the tenant identifier from this deployment. 
	           </para>
	        </listitem>
	        <listitem>
               <para>
                    All process instances started from those process definitions inherit this tenant identifier from the process definition.            
               </para>
            </listitem>
            <listitem>
               <para>
                    All tasks created at runtime when executing the process instance inherit this tenant identifier from the process instance.
                    Standalone tasks can have a tenant identifier too.
               </para>
            </listitem>
            <listitem>
               <para>
                    All executions created during process instance execution inherit this tenant identifier from the process instance.            
               </para>
            </listitem>
            <listitem>
               <para>
                    Firing a signal throw event (in the process itself or through the API) can be done whilst providing a tenant identifier.
                    The signal will only be executed in the tenant context: ie. if there are multiple signal catch events with the same name,
                    only the one with the correct tenant identifier will actually be called.
               </para>
            </listitem>
            <listitem>
               <para>
                    All jobs (timers and async continuations) inherit the tenant identifier from either the process definition (eg. timer start event)
                    or the process instance (when a job is created at runtime, eg. an async continuation). This could potentially be used
                    for giving priority to some tenants in a custom job executor.
               </para>
            </listitem>
            <listitem>
               <para>
                    All the historic entities (historic process instance, task and activities) inherit the tenant identifier from their runtime counterparts.
               </para>
            </listitem>
            <listitem>
               <para>
                    As a side note, models can have a tenant identifier too (models are used eg. by the Activiti Modeler to store bpmn 2.0 models) .           
               </para>
            </listitem>
	      </itemizedlist>
	   </para>
	
	   <para>
	       To actually make use of the tenant identifier on the process data, all the query API's have the capability to filter on tenant.
	       For example (and can be replaced by the relevant query implementation of the other entities):
	       <programlisting>
runtimeService.createProcessInstanceQuery()
    <emphasis role="bold">.processInstanceTenantId("myTenantId")</emphasis>
    .processDefinitionKey("myProcessDefinitionKey")
    .variableValueEquals("myVar", "someValue")
    .list()</programlisting>
        The query API's also allow to filter on the tenant identifier with <emphasis>like</emphasis> semantics 
        and also to filter out entities without tenant id. 
	   </para>
	   
	   <para>
        <emphasis role="bold">Important implementation detail:</emphasis> due to database quirks (more specifically: null handling in unique constraints)
        the <emphasis>default</emphasis> tenant identifier value indicating <emphasis>no tenant</emphasis> is the <emphasis role="bold">empty string</emphasis>.
        The combination of (process definition key, process definition version, tenant identifier) needs to be unique (and there is a database constraint checking this).
        Also note that the tenant identifier shouldn't be set to null, as this will effect the queries since certain databases (Oracle) treat empty string as
        a null value (that's why the query <emphasis>.withoutTenantId</emphasis> does a check against the empty string or null).
        This means that the same process definition (with same process definition key) can be deployed for multiple tenants, each with their own versioning.
        This does not affect the usage when tenancy is not used.    
       </para>
	   
	   <para>
	       <emphasis role="bold">Do note that all of the above does not conflict with running multiple Activiti instances in a cluster.</emphasis>
	   </para>
	   
	   <para>
	       [Experimental] It is possible to change the tenant identifier by calling the <emphasis>changeDeploymentTenantId(String deploymentId, String newTenantId)</emphasis>
	       method on the <emphasis>repositoryService</emphasis>. This will change the tenant identifier everywhere it was inherited before.
	       This can be useful when going from a non-multitenant setup to a multitenant configuration.
	       See the Javadoc on the method for more detailed information.
	   </para>
	 
	</section>
	
	<section id="advanced.custom.sql.queries">
	
	   <title>Execute custom SQL</title>
	   
	   <para>
	       The Activiti API allows for interacting with the database using a high level API. For example, for retrieving data
	       the Query API and the Native Query API are powerful in its usage. However, for some use cases they might not be
	       flexible enough. The following section describes how a completely custom SQL statement (select, insert, update and delete are possible)
	       can be executed against the Activiti data store, but completely within the configured Process Engine (and thus levering the transaction setup for example). 
	   </para>
	   
	   <para>
	       To define custom SQL statements, the Activiti engine leverages the capabilities of its underlying framework, MyBatis.
	       The first thing to do when using custom SQL, is to create a MyBatis mapper class. More info can be read 
	       <ulink url="http://mybatis.github.io/mybatis-3/java-api.html">in the MyBatis user guide</ulink>. For example,
	       suppose that for some use case not the whole task data is needed, but only a small subset of it.
	       A Mapper that could do this, looks as follows:
	       <programlisting>
public interface MyTestMapper {

    @Select(&quot;SELECT ID_ as id, NAME_ as name, CREATE_TIME_ as createTime FROM ACT_RU_TASK&quot;)
    List&lt;Map&lt;String, Object&gt;&gt; selectTasks();
    
}</programlisting>
            This mapper must be provided to the Process Engine configuration as follows:
            <programlisting>
...
&lt;property name="customMybatisMappers"&gt;
  &lt;set&gt;
    &lt;value&gt;org.activiti.standalone.cfg.MyTestMapper&lt;/value&gt;
  &lt;/set&gt;
&lt;/property&gt;
...</programlisting>
            Notice that this is an interface. The underlying MyBatis framework will make an instance
            of it that can be used at runtime. Also notice that the return value of the method is not typed,
            but a list of maps (which corresponds to the list of rows with column values). Typing is possible
            with the MyBatis mappers if wanted. 
	   </para>
	   
	   <para>
	       To execute the query above, the <emphasis>managementService.executeCustomSql</emphasis> method
	       must be used. This method takes in a <emphasis>CustomSqlExecution</emphasis> instance. This is a wrapper
	       that hides the internal bits of the engine otherwise needed to make it work.    
	   </para>
	   
	   <para>
	       Unfortunately, Java generics make it a bit less readable than it could have been. The two generic types below
	       are the mapper class and the return type class. However, the actual logic is simply to call the mapper method and return
	       its results (if applicable).
	       <programlisting>
CustomSqlExecution&lt;MyTestMapper, List&lt;Map&lt;String, Object&gt;&gt;&gt; customSqlExecution = 
          new AbstractCustomSqlExecution&lt;MyTestMapper, List&lt;Map&lt;String, Object&gt;&gt;&gt;(MyTestMapper.class) {
            
  public List&lt;Map&lt;String, Object&gt;&gt; execute(MyTestMapper customMapper) {
    return customMapper.selectTasks();
  }
        
};
      
List&lt;Map&lt;String, Object&gt;&gt; results = managementService.executeCustomSql(customSqlExecution);</programlisting>
	       The Map entries in the list above will only contain <emphasis>id, name and create time</emphasis> in this case and not the full task object.
	   </para>
	   
	   <para>
	       Any SQL is possible when using the approach above. Another more complex example:
	       <programlisting>
    @Select({
        &quot;SELECT task.ID_ as taskId, variable.LONG_ as variableValue FROM ACT_RU_VARIABLE variable&quot;,
        &quot;inner join ACT_RU_TASK task on variable.TASK_ID_ = task.ID_&quot;,
        &quot;where variable.NAME_ = #{variableName}&quot;
    })
    List&lt;Map&lt;String, Object&gt;&gt; selectTaskWithSpecificVariable(String variableName);	       
	       </programlisting>
	       Using this method, the task table will be joined with the variables table. Only where the variable has a certain name
	       is retained, and the task id and the corresponding numerical value is returned.
	   </para>
	   
	</section>
	
	<section id="advanced.process.engine.configurators">
	
	   <title>Advanced Process Engine configuration with a ProcessEngineConfigurator</title>
	   
	   <para>
	       An advanced way of hooking into the process engine configuration is through the use of a 
	       <emphasis>ProcessEngineConfigurator</emphasis>. The idea is that an implementation of the 
	       <emphasis>org.activiti.engine.cfg.ProcessEngineConfigurator</emphasis> interface is created and injected 
	       into the process engine configuration:
	       <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;...SomeProcessEngineConfigurationClass&quot;&gt;

    ...
        
    &lt;property name=&quot;configurators&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;com.mycompany.MyConfigurator&quot;&gt;
                ...
            &lt;/bean&gt;  
        &lt;/list&gt;
    &lt;/property&gt;
    
    ...
        
&lt;/bean&gt;        	       
	       </programlisting> 
	   </para>
	   
	   <para>
	       There are two methods required to implement this interface. The <emphasis>configure</emphasis> method,
	       which gets a <emphasis>ProcessEngineConfiguration</emphasis> instance as parameter. The custom
	       configuration can be added this way, and this method will guaranteed be called <emphasis role="bold">before the process engine is created,
	       but after all default configuration has been done</emphasis>.
	       The other method is the <emphasis>getPriority</emphasis> method, which allows for ordering
	       the configurators in the case where some configurators are dependent on each other.
	   </para>
	   
	   <para>
            An example of such a configurator is the <link linkend="chapter_ldap">LDAP integration</link>, where the 
            configurator is used to replace the default user and group manager classes with one that is capable
            of handling an LDAP user store.	 So basically a configurator allows to change or tweak the process
            engine quite heavily and is meant for very advanced use cases. Another example is to swap the 
            process definition cache with a customized version:
            <programlisting>
public class ProcessDefinitionCacheConfigurator extends AbstractProcessEngineConfigurator {
    
    public void configure(ProcessEngineConfigurationImpl processEngineConfiguration) {
            MyCache myCache = new MyCache();
            processEngineConfiguration.setProcessDefinitionCache(enterpriseProcessDefinitionCache);
    }

}</programlisting>  
	   </para>
	
	   <para>
            Process Engine configurators can also be auto discovered from the classpath using the 
            <ulink url="http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html">ServiceLoader</ulink> approach.
            This means that a jar with the configurator implementation must be put on the classpath, containing
            a file in the <emphasis>META-INF/services</emphasis> folder in the jar called <emphasis role="bold">org.activiti.engine.cfg.ProcessEngineConfigurator i</emphasis>.
            The content of the file needs to be the fully qualified classname of the custom implementation.
            When the process engine is booted, the logging will show that these configurators are found:
            <programlisting>
INFO  org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl  - Found 1 auto-discoverable Process Engine Configurators
INFO  org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl  - Found 1 Process Engine Configurators in total:
INFO  org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl  - class org.activiti.MyCustomConfigurator</programlisting>
	   </para>
	   
	   <para>
	       Note that this ServiceLoader approach might not work in certain environments. It can be 
	       explicitly disabled using the <emphasis>enableConfiguratorServiceLoader</emphasis> property
	       of the ProcessEngineConfiguration (true by default).
	   </para>
	
	</section>
	
	<section id="advanced.safe.bpmn.xml">
	
	   <title>Enable safe BPMN 2.0 xml</title>
	   
	   <para>
	     In most cases the BPMN 2.0 processes that are being deployed to the Activiti engine are under tight control
	     of eg. the development team. However, in some use cases it might be desirable to upload arbitrary BPMN 2.0 xml
	     to the engine. In that case, take into consideration that a user with bad intentions can bring the server 
	     down as described <ulink url="http://www.jorambarrez.be/blog/2013/02/19/uploading-a-funny-xml-can-bring-down-your-server/">here</ulink>.
	   </para>
	   
	   <para>
	     To avoid the attacks described in the link above, a property <emphasis>enableSafeBpmnXml</emphasis> can be set on the process 
	     engine configuration:
	     <programlisting>&lt;property name=&quot;enableSafeBpmnXml&quot; value=&quot;true&quot;/&gt;</programlisting>
	   </para>
	   
	   <para>
	       <emphasis role="bold">By default this feature is disabled!</emphasis> The reason for this is that it relies on 
	       the availability of the <ulink url="http://download.java.net/jdk7/archive/b123/docs/api/javax/xml/transform/stax/StAXSource.html">StaxSource</ulink>
	       class. Unfortunately, on some platforms (eg. JDK 6, JBoss, etc.) this class is unavailable (due to older xml parser implementation)
	       and thus the safe BPMN 2.0 xml feature cannot be enabled. 
	   </para>
	   
	   <para>    
	       If the platform on which Activiti runs does support it, do enable this feature. 
	   </para>
	
	</section>
	
	
	
</chapter>