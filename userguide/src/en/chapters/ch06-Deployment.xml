<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="chDeployment">
  <title>Deployment</title>

  <section>
    <title>Business archives</title>
    <para>To deploy processes, they have to be wrapped in a business archive.  A business archive is the unit 
    of deployment to an Activiti Engine. A business archive is equivalent to a zip file.  It can contain 
    BPMN 2.0 processes, task forms, rules and any other type of file.  In general, a business archive 
    contains a collection of named resources.  
    </para>
    <para>When a business archive is deployed, it is scanned for BPMN files with a <literal>.bpmn20.xml</literal> or <literal>.bpmn</literal> extension.
    Each of those will be parsed and may contain multiple process definitions.  
    </para>
    <note>
      <para>
        Java classes present in the business archive <emphasis role="bold">will not be added to the classpath</emphasis>. All custom classes used in process definitions in the business archive (for example Java service tasks or event listener implementations) should be present
        on the activiti-engine's classpath in order to run the processes. 
      </para>
    </note>
	  <section>
	    <title>Deploying programmatically</title>
	    <para>Deploying a business archive from a zip file can be done like this: 
	    </para>
	    <programlisting>String barFileName = "path/to/process-one.bar";
ZipInputStream inputStream = new ZipInputStream(new FileInputStream(barFileName));
    
repositoryService.createDeployment()
    .name("process-one.bar")
    .addZipInputStream(inputStream)
    .deploy();
	</programlisting>
	    <para>It's also possible to build a deployment from individual resources. 
	    See the javadocs for more details.</para>
	  </section>
	  
    <section id="deploymentWithExplorer">
      <title>Deploying with Activiti Explorer</title>
      <para>
        The Activiti Explorer webapp allows uploading bar files (and single <literal>bpmn20.xml</literal> files) through the webapp user interface.
        Choose the <emphasis>Management tab</emphasis> and click on <emphasis>Deployment</emphasis>:
        <mediaobject><imageobject><imagedata align="center" fileref="images/deployment.explorer.png"/></imageobject></mediaobject>
        A popup window now allows you to select a file from your computer, or you can simply drag and drop
        to the designated area (if your browser supports it).
        <mediaobject><imageobject><imagedata align="center" fileref="images/deployment.explorer.2.png"/></imageobject></mediaobject>
      </para>
    </section>

  </section>

  <section>
    <title>External resources</title>
    <para>Process definitions live in the Activiti database. These process 
    definitions can reference delegation classes when using Service Tasks or  
    execution listeners or Spring beans from the Activiti configuration file.
    These classes and the Spring configuration file have to be available 
    to all process engines that may execute the process definitions.
    </para>
    <section>
      <title>Java classes</title>
      <para>All custom classes that are used in your process (e.g. JavaDelegates used in Service Tasks or event-listeners, TaskListeners, ...) should be 
      present on the engine's classpath when an instance of the process is started.</para>
      <para>During deployment of a business archive however, those classes don't have to be present on the classpath.  
      This means that your delegation classes don't have to be on the classpath when deploying a new 
      business archive with Ant.
      </para>
      <para>When you are using the demo setup and you want to add your custom classes, you should add a jar containing your classes to the activiti-explorer or activiti-rest webapp lib. Don't forget to include the dependencies of your custom classes (if any) as well. Alternatively, you can include your dependencies in the libraries directory of your Tomcat installation, <literal>${tomcat.home}/lib</literal>.
      </para>
    </section>
    <section>
      <title>Using Spring beans from a process</title>
      <para>When expressions or scripts use Spring beans, those beans have to be available to the engine when executing the process definition.
      If you are building your own webapp and you configure your process engine in your context as described in 
      <link linkend="springintegration">the spring integration section</link>, that is straightforward.
      But bear in mind that you also should update the Activiti rest webapp with that context if you use it.
      You can do that by replacing the <literal>activiti.cfg.xml</literal> in the <literal>activiti-rest/lib/activiti-cfg.jar</literal> JAR file
      with an <literal>activiti-context.xml</literal> file containing your Spring context configuration.
      </para>
    </section>
    <section>
      <title>Creating a single app</title>
      <para>Instead of making sure that all process engines have all the delegation classes 
      on their classpath and use the right Spring configuration, you may consider including the Activiti rest webapp inside your own webapp so that there is only
      a single <literal>ProcessEngine</literal>.
      </para>
    </section>
  </section>
    
  <section id="versioningOfProcessDefinitions">
    <title>Versioning of process definitions</title>
    <para>BPMN doesn't have a notion of versioning.  That is actually good because the executable BPMN process 
    file will probably live in a version control system repository (e.g. Subversion, Git or Mercurial) as part of your development project.  Versions of process definitions
    are created during deployment. During deployment, Activiti will assign a version to the <literal>ProcessDefinition</literal> 
    before it is stored in the Activiti DB.
    </para>
    <para>For each process definition in a business archive the following steps are performed to 
    initialize the properties <literal>key</literal>, <literal>version</literal>, <literal>name</literal> and <literal>id</literal>:
    </para>
    
    <itemizedlist>
      <listitem><para>The process definition <literal>id</literal> attribute in the XML file is used as the process definition <literal>key</literal> property.</para></listitem>
      <listitem><para>The process definition <literal>name</literal> attribute in the XML file is used as the process definition <literal>name</literal> property.
        If the name attribute is not specified, then id attribute is used as the name.
      </para></listitem>
      <listitem><para>The first time a process with a particular key is deployed, version 1 is assigned.  For all subsequent deployments of
      process definitions with the same key, the version will be set 1 higher then the maximum currently deployed version. The key property
      is used to distinguish process definitions.</para></listitem>
      <listitem>
        <para>
          The id property is set to {processDefinitionKey}:{processDefinitionVersion}:{generated-id},
          where <literal>generated-id</literal> is a unique number added to guarantee uniqueness
          of the process id for the process definition caches in a clustered environment.
        </para>
      </listitem>
    </itemizedlist>
    
    <para>
      Take for example the following process
<programlisting>
&lt;definitions id=&quot;myDefinitions&quot; &gt;
  &lt;process id=&quot;myProcess&quot; name=&quot;My important process&quot; &gt;
    ...      
</programlisting>    
      When deploying this process definition, the process definition in the database will look like this:
      <table>
        <title></title>
        <tgroup cols='4'>
          <thead>
            <row>
              <entry>id</entry>
              <entry>key</entry>
              <entry>name</entry>
              <entry>version</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>myProcess:1:676</entry>
              <entry>myProcess</entry>
              <entry>My important process</entry>
              <entry>1</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      Suppose we now deploy an updated version of the same process (e.g. changing some user tasks),
      but the <literal>id</literal> of the process definition remains the same. The process
      definition table will now contain the following entries:
       <table>
        <title></title>
        <tgroup cols='4'>
          <thead>
            <row>
              <entry>id</entry>
              <entry>key</entry>
              <entry>name</entry>
              <entry>version</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>myProcess:1:676</entry>
              <entry>myProcess</entry>
              <entry>My important process</entry>
              <entry>1</entry>
            </row><row>
              <entry>myProcess:2:870</entry>
              <entry>myProcess</entry>
              <entry>My important process</entry>
              <entry>2</entry>
            </row>
          </tbody>
        </tgroup>
      </table> 
      When the <literal>runtimeService.startProcessInstanceByKey("myProcess")</literal> is called,
      it will now use the process definition with version <literal>2</literal>, as this is the 
      latest version of the process definition.
    </para>

    <para>
      Should we create a second process, as defined below and deploy this to Activiti, a third row will be added to the table. 
    </para>
<programlisting>
&lt;definitions id=&quot;myNewDefinitions&quot; &gt;
  &lt;process id=&quot;myNewProcess&quot; name=&quot;My important process&quot; &gt;
    ...      
</programlisting>

  <para>
    The table will look like this:
  </para>

  <table>
    <title></title>
    <tgroup cols='4'>
      <thead>
        <row>
          <entry>id</entry>
          <entry>key</entry>
          <entry>name</entry>
          <entry>version</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>myProcess:1:676</entry>
          <entry>myProcess</entry>
          <entry>My important process</entry>
          <entry>1</entry>
        </row><row>
          <entry>myProcess:2:870</entry>
          <entry>myProcess</entry>
          <entry>My important process</entry>
          <entry>2</entry>
        </row>
        <row>
          <entry>myNewProcess:1:1033</entry>
          <entry>myNewProcess</entry>
          <entry>My important process</entry>
          <entry>1</entry>
        </row>
      </tbody>
    </tgroup>
  </table> 

  <para>
    Note how the key for the new process is different from our first process. Even though the name is the same (we should probably have changed that too), Activiti only considers the <literal>id</literal> attribute when distinguishing processes. The new process is therefore deployed with version 1.
  </para>
    
  </section>
  
  <section id="providingProcessDiagram">
    <title>Providing a process diagram</title>
    <para>
      A process diagram image can be added to a deployment. This image will be stored in 
      the Activiti repository and is accessible through the API. This image is also used
      to visualize the process in Activiti Explorer.
    </para>
    <para>
      Suppose we have a process on our classpath, <literal>org/activiti/expenseProcess.bpmn20.xml</literal> that has a process key 'expense'.
      The following naming conventions for the process diagram image apply (in this specific order):
      <itemizedlist>
        <listitem>
          <para>
            If an image resource exists in the deployment that has a name of the BPMN 2.0 XML file name
            concatenated with the process key and an image suffix, this image is used. In our example,
            this would be <literal>org/activiti/expenseProcess.expense.png</literal> (or .jpg/gif).
            In case you have multiple images defined in one BPMN 2.0 XML file, this approach 
            makes most sense. Each diagram image will then have the process key in its file name.
          </para>
        </listitem>
        <listitem>
          <para>
            If no such image exists, am image resource in the deployment matching the name
            of the BPMN 2.0 XML file is searched for. In our example this would be 
            <literal>org/activiti/expenseProcess.png</literal>. Note that this means that
            <emphasis role="bold">every process definition</emphasis> defined in the same 
            BPMN 2.0 file has the same process diagram image. In case there is only one 
            process definition in each BPMN 2.0 XML file, this is obviously not a problem.
          </para>
        </listitem>
      </itemizedlist>
     </para>
     <para>
      Example when deploying programmatically:
      <programlisting>
repositoryService.createDeployment()
  .name("expense-process.bar")
  .addClasspathResource("org/activiti/expenseProcess.bpmn20.xml")
  .addClasspathResource("org/activiti/expenseProcess.png")
  .deploy();</programlisting>
       The image resource can be retrieved through the API afterwards:
       <programlisting>
  ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()
                                                         .processDefinitionKey("expense")
                                                         .singleResult();
  
  <emphasis role="bold">String diagramResourceName = processDefinition.getDiagramResourceName();</emphasis>
  InputStream imageStream = repositoryService.getResourceAsStream(processDefinition.getDeploymentId(), diagramResourceName);
       </programlisting>
     </para>
  </section>
  
  <section id="generatingProcessDiagram">
    <title>Generating a process diagram</title>
    <para>
      In case no image is provided in the deployment, as described in the <link linkend="providingProcessDiagram">previous section</link>,
      the Activiti engine will generate a diagram image if the process definition
      contains the necessary 'diagram interchange' information.
    </para>
    <para>
      The resource can be retrieved in exactly the same way as when <link linkend="providingProcessDiagram">
      an image is provided</link> in the deployment.
      <mediaobject><imageobject><imagedata align="center" fileref="images/deployment.image.generation.png"/></imageobject></mediaobject>
    </para>
    <para>
      If, for some reason, it is not necessary or wanted to generate a diagram during deployment the 
      <literal>isCreateDiagramOnDeploy</literal> property can be set on the process engine configuration:
      <programlisting>&lt;property name=&quot;createDiagramOnDeploy&quot; value=&quot;false&quot; /&gt;</programlisting>
      No diagram will be generated now.
    </para>
  </section>

  <section id="deploymentCategory">
    <title>Category</title>
    <para>
    Both deployments and process definitions have user defined categories.  The process definition 
    category is initialized value in attribute in the BPMN file: <literal>&lt;definitions ... targetNamespace=&quot;yourCategory&quot; ...</literal>
    </para>
    <para>The deployment category can be specified in the API like this:</para>
    <programlisting>repositoryService
    .createDeployment()
    .category(&quot;yourCategory&quot;)
    ...
    .deploy();</programlisting>
  </section>

</chapter>
