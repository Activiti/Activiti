<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="chapter_ldap">
    <title>LDAP integration</title>

    <para>
        Companies often already have a user and group store in the form of an LDAP system.
        Since version 5.14, Activiti offers an out-of-the-box solution for easily configuring 
        how Activiti should connect with an LDAP system.  
    </para>
    
    <para>
       Before Activiti 5.14, it was already possible to integrate LDAP with Activiti.
       However, as of 5.14, the configuration has been simplified a lot. However, the 'old' way
       of configuring LDAP still works. More specifically, the simplified configuration is
       just a wrapper on top of the 'old' infrastructure.
    </para>
    
    <section id="ldap_usage">
    
        <title>Usage</title>
        
        <para>
            To add the LDAP integration code to your project, simply add the following
            dependency to your pom.xml:
            <programlisting>
&lt;dependency&gt;
  &lt;groupId&gt;org.activiti&lt;/groupId&gt;
  &lt;artifactId&gt;activiti-ldap&lt;/artifactId&gt;
  &lt;version&gt;latest.version&lt;/version&gt;
&lt;/dependency&gt;            
            </programlisting> 
        </para>
    
    </section>
    
    <section id="ldap_usecases">
    
        <title>Use cases</title>
        
        <para>
            The LDAP integration has currently two main use cases:
            <itemizedlist>
                <listitem>
                    <para>
                        Allow for authentication through the IdentityService. This is eg. useful when using Activiti Explorer
                        and the login needs to go through LDAP.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Fetching the groups of a user. This is important when for example querying tasks
                        to see which tasks a certain user can see (ie. tasks with a candidate group).
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        
    </section>

    <section id="ldap_configuration">

        <title>Configuration</title>

        <para>
            Integrating the LDAP system with Activiti is done by injecting an instance
            of <literal>org.activiti.ldap.LDAPConfigurator</literal> in the <literal>configurators</literal>
            section of the process engine configuration. This class is highly extensible: methods
            can be easily overridden and many dependent beans are pluggable
            if the default implementation would not fit the use case.
        </para>
            
        <para>
            This is an example configuration (note: of course, when
            creating the engine programmatically this is completely similar). Don't worry about all
            the properties for now, we'll look at them in detail in a next section.
            <programlisting>
    &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;...SomeProcessEngineConfigurationClass&quot;&gt;
        ...
        &lt;property name=&quot;configurators&quot;&gt;
          &lt;list&gt;
              &lt;bean class=&quot;org.activiti.ldap.LDAPConfigurator&quot;&gt;
              
                &lt;!-- Server connection params --&gt;
                &lt;property name=&quot;server&quot; value=&quot;ldap://localhost&quot; /&gt;
                &lt;property name=&quot;port&quot; value=&quot;33389&quot; /&gt;
                &lt;property name=&quot;user&quot; value=&quot;uid=admin, ou=users, o=activiti&quot; /&gt;
                &lt;property name=&quot;password&quot; value=&quot;pass&quot; /&gt;
                
                &lt;!-- Query params --&gt;
                &lt;property name=&quot;baseDn&quot; value=&quot;o=activiti&quot; /&gt;
                &lt;property name=&quot;queryUserByUserId&quot; value=&quot;(&amp;(objectClass=inetOrgPerson)(uid={0}))&quot; /&gt;
                &lt;property name=&quot;queryUserByFullNameLike&quot; value=&quot;(&amp;(objectClass=inetOrgPerson)(|({0}=*{1}*)({2}=*{3}*)))&quot; /&gt;
                &lt;property name=&quot;queryGroupsForUser&quot; value=&quot;(&amp;(objectClass=groupOfUniqueNames)(uniqueMember={0}))&quot; /&gt;
                
                &lt;!-- Attribute config --&gt;
                &lt;property name=&quot;userIdAttribute&quot; value=&quot;uid&quot; /&gt;
                &lt;property name=&quot;userFirstNameAttribute&quot; value=&quot;cn&quot; /&gt;
                &lt;property name=&quot;userLastNameAttribute&quot; value=&quot;sn&quot; /&gt;
                
                &lt;property name=&quot;groupIdAttribute&quot; value=&quot;cn&quot; /&gt;
                &lt;property name=&quot;groupNameAttribute&quot; value=&quot;cn&quot; /&gt;
                
              &lt;/bean&gt;
          &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;         
            </programlisting>
        </para>

    </section>
    
    <section id="ldap_properties">
    
        <title>Properties</title>
        
        <para>
            Following properties can be set on <literal>org.activiti.ldap.LDAPConfigurator</literal>:
            <table>
                <title>LDAP configuration properties</title>
                <tgroup cols='4'>
                    <thead>
                        <row>
                            <entry>Property name</entry>
                            <entry>Description</entry>
                            <entry>Type</entry>
                            <entry>Default value</entry>   
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>server</entry>
                            <entry>The server on which the LDAP system can be reached. For example 'ldap://localhost:33389'</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>
                         <row>
                            <entry>port</entry>
                            <entry>The port on which the LDAP system is running</entry>
                            <entry>int</entry>
                            <entry></entry>
                        </row>   
                         <row>
                            <entry>user</entry>
                            <entry>The user id that is used to connect to the LDAP system</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>password</entry>
                            <entry>The password that is used to connect to the LDAP system</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>initialContextFactory</entry>
                            <entry>The InitialContextFactory name used to connect to the LDAP system</entry>
                            <entry>String</entry>
                            <entry>com.sun.jndi.ldap.LdapCtxFactory</entry>
                        </row>     
                         <row>
                            <entry>securityAuthentication</entry>
                            <entry>The value that is used for the 'java.naming.security.authentication' property used to connect to the LDAP system</entry>
                            <entry>String</entry>
                            <entry>simple</entry>
                        </row>     
                         <row>
                            <entry>customConnectionParameters</entry>
                            <entry>Allows to set all LDAP connection parameters which do not have a dedicated setter. 
                            See for example http://docs.oracle.com/javase/tutorial/jndi/ldap/jndi.html for custom
                            properties. Such properties are for example to configure connection pooling, specific
                            security settings, etc. All the provided parameters will be provided when creating a 
                            connection to the LDAP system.</entry>
                            <entry>Map&lt;String, String&gt;</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>baseDn</entry>
                            <entry>The base 'distinguished name' (DN) from which the searches for users and groups are started</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>userBaseDn</entry>
                            <entry>The base 'distinguished name' (DN) from which the searches for users are started. If not provided, baseDn (see above) will be used</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row> 
                        <row>
                            <entry>groupBaseDn</entry>
                            <entry>The base 'distinguished name' (DN) from which the searches for groups are started. If not provided, baseDn (see above) will be used</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>searchTimeLimit</entry>
                            <entry>The timeout that is used when doing a search in LDAP in milliseconds</entry>
                            <entry>long</entry>
                            <entry>one hour</entry>
                        </row>     
                        <row>
                            <entry>queryUserByUserId</entry>
                            <entry>
                            The query that is executed when searching for a user by userId. 
                            For example: (&amp;(objectClass=inetOrgPerson)(uid={0}))
                            Here, all the objects in LDAP with the class 'inetOrgPerson'
                            and who have the matching 'uid' attribute value will be returned.
                            As shown in the example, the user id is injected by using
                            {0}. If setting the query alone is insufficient for your specific
                            LDAP setup, you can alternatively plug in a different
                            LDAPQueryBuilder, which allows for more customization than only the  query.
                            </entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>    
                        <row>
                            <entry>queryUserByFullNameLike</entry>
                            <entry>
                            The query that is executed when searching for a user by full name. 
                            For example: (&amp; (objectClass=inetOrgPerson) (|({0}=*{1}*)({2}=*{3}*)) )
                            Here, all the objects in LDAP with the class 'inetOrgPerson'
                            and who have the matching first name and last name values will be returned.
                            Note that {0} injects the firstNameAttribute (as defined above), {1} and {3} the search text
                            and {2} the lastNameAttribute. If setting the query alone is insufficient for your specific
                            LDAP setup, you can alternatively plug in a different
                            LDAPQueryBuilder, which allows for more customization than only the  query.
                            </entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>      
                         <row>
                            <entry>queryGroupsForUser</entry>
                            <entry>The query that is executed when searching for the groups of a specific user.
                            For example: (&amp;(objectClass=groupOfUniqueNames)(uniqueMember={0}))
                            Here, all the objects in LDAP with the class 'groupOfUniqueNames'
                            and where the provided DN (matching a DN for a user) is a 'uniqueMember' are returned.
                            As shown in the example, the user id is injected by using {0}
                            If setting the query alone is insufficient for your specific
                            LDAP setup, you can alternatively plug in a different
                            LDAPQueryBuilder, which allows for more customization than only the  query.</entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>userIdAttribute</entry>
                            <entry>Name of the attribute that matches the user id.
                            This property is used when looking for a User object
                            and the mapping between the LDAP object and the Activiti User object
                            is done.</entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>userFirstNameAttribute</entry>
                            <entry>Name of the attribute that matches the user first name.
                            This property is used when looking for a User object
                            and the mapping between the LDAP object and the Activiti User object is done.</entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>  
                         <row>
                            <entry>userLastNameAttribute</entry>
                            <entry>Name of the attribute that matches the user last name.
                            This property is used when looking for a User object
                            and the mapping between the LDAP object and the Activiti User object is done.</entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>groupIdAttribute</entry>
                            <entry>Name of the attribute that matches the group id.
                            This property is used when looking for a Group object
                            and the mapping between the LDAP object and the Activiti Group object is done.</entry>
                            <entry>string</entry>
                            <entry></entry>
                        </row>     
                         <row>
                            <entry>groupNameAttribute</entry>
                            <entry>Name of the attribute that matches the group name.
                            This property is used when looking for a Group object
                            and the mapping between the LDAP object and the Activiti Group object is done.</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>     
                        <row>
                            <entry>groupTypeAttribute</entry>
                            <entry>Name of the attribute that matches the group type.
                            This property is used when looking for a Group object
                            and the mapping between the LDAP object and the Activiti Group object
                            is done.</entry>
                            <entry>String</entry>
                            <entry></entry>
                        </row>  
                    </tbody>
                </tgroup>
            </table>
        </para>
        
        <para>
            Following properties are when one wants to customize default behavior or
            introduced group caching:
            <table>
                <title>Advanced properties</title>
                <tgroup cols='4'>
                    <thead>
                        <row>
                            <entry>Property name</entry>
                            <entry>Description</entry>
                            <entry>Type</entry>
                            <entry>Default value</entry>   
                        </row>
                    </thead>
                    <tbody>
                          <row>
                            <entry>ldapUserManagerFactory</entry>
                            <entry>Set a custom implementation of the LDAPUserManagerFactory if the default implementation is not suitable.</entry>
                            <entry>instance of LDAPUserManagerFactory</entry>
                            <entry></entry>
                        </row>  
                        <row>
                            <entry>ldapGroupManagerFactory</entry>
                            <entry>Set a custom implementation of the LDAPGroupManagerFactory if the default implementation is not suitable.</entry>
                            <entry>instance of LDAPGroupManagerFactory</entry>
                            <entry></entry>
                        </row>  
                        <row>
                            <entry>ldapMemberShipManagerFactory</entry>
                            <entry>Set a custom implementation of the LDAPMembershipManagerFactory if the default implementation is not suitable.
                            Note that this is very unlikely, as membership are managed in the LDAP system itself normally.</entry>
                            <entry>An instance of LDAPMembershipManagerFactory</entry>
                            <entry></entry>
                        </row>  
                        <row>
                            <entry>ldapQueryBuilder</entry>
                            <entry>Set a custom query builder if the default implementation is not suitable.
                            The LDAPQueryBuilder instance is used when the LDAPUserManager or
                            LDAPGroupManage} does an actual query against the LDAP system.
                            The default implementation uses the properties as set on this instance
                            such as queryGroupsForUser and queryUserById</entry>
                            <entry>An instance of org.activiti.ldap.LDAPQueryBuilder</entry>
                            <entry></entry>
                        </row>  
                        <row>
                            <entry>groupCacheSize</entry>
                            <entry> Allows to set the size of the group cache.
                            This is an LRU cache that caches groups for users and thus
                            avoids hitting the LDAP system each time the groups of
                            a user needs to be known.
                            
                            The cache will not be instantiated if the value is less then zero.
                            By default set to -1, so no caching is done.
                            </entry>
                            <entry>int</entry>
                            <entry>-1</entry>
                        </row>  
                        <row>
                            <entry>groupCacheExpirationTime</entry>
                            <entry>Sets the expiration time of the group cache in milliseconds.
                            When groups for a specific user are fetched, and if the group cache exists,
                            the groups will be stored in this cache for the time set in this property.
                            ie. when the groups were fetched at 00:00 and the expiration time is 30 mins,
                            any fetch of the groups for that user after 00:30 will not come from the cache, but do
                            a fetch again from the LDAP system. Likewise, everything group fetch for that user done
                            between 00:00 - 00:30 will come from the cache.</entry>
                            <entry>long</entry>
                            <entry>one hour</entry>
                        </row>  
                    </tbody>
                </tgroup>
            
            </table>
        </para>
        
        <para>
            Note when using Active Directory: people in the Activiti forum have reported that for Activiti Directory, the 'InitialDirContext' needs to be set
            to Context.REFERRAL. This can be passed through the customConnectionParameters map as described above.
        </para>
        
    
    </section>
    
    <section id="lda-explorer">
    
        <title>Integrate LDAP in Explorer</title>
        
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        Add the LDAP configuration as above to <literal>activiti-standalone-context.xml</literal>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Add the activiti-ldap jar to WEB-INF/lib
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Remove the <literal>demoDataGenerator</literal> bean, as it will try to insert users (which is not possible with the LDAP integration)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Add following configuration to the <literal>explorerApp</literal> bean in <literal>activiti-ui.context</literal>:
                        <programlisting>
&lt;property name=&quot;adminGroups&quot;&gt;
  &lt;list&gt;
    &lt;value&gt;admin&lt;/value&gt;
  &lt;/list&gt;
  &lt;/property&gt;
  &lt;property name=&quot;userGroups&quot;&gt;
    &lt;list&gt;
      &lt;value&gt;user&lt;/value&gt;
    &lt;/list&gt;
&lt;/property&gt;                        
                        </programlisting>
                        Obviously replacing the values with your own values. The value that needs to be used is the id of the group (configurable
                        through <literal>groupIdAttribute</literal>). The config above will make all members of the 'admin' group an Administrator user
                        in Activiti Explorer and similar for the user group. Any group not matching these values is seen as an 'assignment' group, 
                        ie where tasks can become assigned to.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    
    </section>

</chapter>