<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>

  <title>REST API</title>
  <section>
    <title>General Activiti REST principles</title>
    <section>
      <title>Installation and Authentication</title>
      
      <para>Activiti includes a REST API to the Activiti Engine that can be installed by deploying the activiti-rest.war file to a servlet container like Apache Tomcat. However, it can also be used in another web-application by including the servlet and it's mapping in your application and add all activiti-rest dependencies to the classpath.</para>
      <para>By default the Activiti Engine will connect to an in-memory H2 database. You can change the database settings in the db.properties file in the WEB-INF/classes folder. The REST API uses JSON format (http://www.json.org) and is built upon the Restlet (http://www.restlet.org).</para>
      <para>All REST-resources require a valid Activiti-user to be authenticated by default. Basic HTTP access authentication is used, so you should always include a <literal>Authorization: Basic ...==</literal> HTTP-header when performing requests or include the username and password in the request-url (eg. <literal>http://username:password@localhost...</literal>).
      </para>
      <para><emphasis role="bold">It's recommended to use Basic Authentication in combination with HTTPS.</emphasis></para>
      <para>It's possible to remove authentication from certain resources or adding additional authorisation on top of being an authenticated user (eg. being part of group X allows a user to execute request with URL Y). 
      This can be achieved by using an implementation of <literal>org.activiti.rest.common.filter.RestAuthenticator</literal> which has 2 methods:
      <itemizedlist>
        <listitem><para><emphasis><literal>boolean requestRequiresAuthentication(Request request)</literal></emphasis>: Called before a request is checked for authentication (valid username and password is passed in header). If this method returns true, the method needs authentication. If false is returned, the request will be done regardless of the request being authenticated. If false is returned, <literal>isRequestAuthorized</literal> will not be called either for this request.</para></listitem>
        <listitem><para><emphasis><literal>boolean isRequestAuthorized(Request request)</literal></emphasis>: Called after a user is successfully authenticated against the Activiti identity-management but before the request is actually executed. Can be used to check if a certain request is valid for the authenticated user. If true is returned, the request is considered authorised and is executed. When false is returned, the request is not executed and the client gets an appropriate error.</para></listitem>
      </itemizedlist>
      </para>
      <para>The custom RestAuthenticator should be set on the <literal>org.activiti.rest.service.application.ActivitiRestServicesApplication</literal>that is used in the RestletServlet. 
      The easiest way for this to create a subclass of the <literal>ActivitiRestServicesApplication</literal> and use the custom implementation classname in the servlet-mapping:</para>
      
      <programlisting>
<![CDATA[   <!-- Restlet adapter -->  
  <servlet>  
    <servlet-name>RestletServlet</servlet-name>  
    <servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
    <init-param>
      <!-- Application class name -->
      <param-name>org.restlet.application</param-name>
      <param-value>com.my.company.CustomActivitiRestServicesApplication</param-value>
    </init-param>
  </servlet>]]></programlisting>
    </section>
    
     <section id="restUsageInTomcat">
      <title>Usage in Tomcat</title>
      <para>Due to <ulink url="http://tomcat.apache.org/tomcat-7.0-doc/security-howto.html"> default security properties on Tomcat</ulink>, <emphasis role="bold">escaped forward slashes (<literal>%2F</literal> and <literal>%5C</literal>) are not allowed by default (400-result is returned).</emphasis>
      This may have an impact on the deployment resources and their data-URL, as the URL can potentially contain escaped forward slashes.
      
      <emphasis role="bold">When issues are experienced with unexpected 400-results, set the following system-property: <literal>-Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true.</literal></emphasis></para>
    </section>
    
     <section>
      <title>Methods and return-codes</title>
      <table>
        <title>HTTP-methods and corresponding operations</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Method</entry>
              <entry>Operations</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>GET</literal></entry>
              <entry>Get a single resource or get a collection of resources.</entry>
            </row>
            <row>
              <entry><literal>POST</literal></entry>
              <entry>Create a new resource. Also used for executing resource-queries which have a too complex request-structure to fit in the query-URL of a GET-request.</entry>
            </row>
            <row>
              <entry><literal>PUT</literal></entry>
              <entry>Update properties of an existing resource. Also used for invoking actions on an existing resource.</entry>
            </row>
            <row>
              <entry><literal>DELETE</literal></entry>
              <entry>Delete an existing resource.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>     
      <table>
        <title>HTTP-methods response codes</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Response</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>200 - Ok</literal></entry>
              <entry>The operation was successful and a response has been returned (<literal>GET</literal> and <literal>PUT</literal> requests).</entry>
            </row>
            <row>
              <entry><literal>201 - Created</literal></entry>
              <entry>The operation was successful and the entity has been created and is returned in the response-body (<literal>POST</literal> request).</entry>
            </row>
            <row>
              <entry><literal>204 - No content</literal></entry>
              <entry>The operation was successful and entity has been deleted and therefore there is no response-body returned (<literal>DELETE</literal> request).</entry>
            </row>
            <row>
              <entry><literal>401 - Unauthorized</literal></entry>
              <entry>The operation failed. The operation requires an Authentication header to be set. If this was present in the request, the supplied credentials are not valid or the user is not authorized to perform this operation.</entry>
            </row>
            <row>
              <entry><literal>403 - Forbidden</literal></entry>
              <entry>The operation is forbidden and should not be re-attempted. This does not imply an issue with authentication not authorization, it's an operation that is not allowed. Example: deleting a task that is part of a running process is not allowed and will never be allowed, regardless of the user or process/task state.</entry>
            </row>
            <row>
              <entry><literal>404 - Not found</literal></entry>
              <entry>The operation failed.The requested resource was not found.</entry>
            </row>
            <row>
              <entry><literal>405 - Method not allowed</literal></entry>
              <entry>The operation failed. The used method is not allowed for this resource. Eg. trying to update (PUT) a deployment-resource will result in a <literal>405</literal> status.</entry>
            </row>
            <row>
              <entry><literal>409 - Conflict</literal></entry>
              <entry>The operation failed. The operation causes an update of a resource that has been updated by another operation, which makes the update no longer valid. Can also indicate a resource that is being created in a collection where a resource with that identifier already exists.</entry>
            </row>
            <row>
              <entry><literal>415 - Unsupported Media Type</literal></entry>
              <entry>The operation failed. The request body contains an unsupported media type. Also occurs when the request-body JSON contains an unknown attribute or value that doesn't have the right format/type to be accepted.</entry>
            </row>
            <row>
              <entry><literal>500 - Internal server error</literal></entry>
              <entry>The operation failed. An unexpected exception occurred while executing the operation. The response-body contains details about the error.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>     
        <para>
        The media-type of the HTTP-responses is always <literal>application/json</literal> unless binary content is requested (eg. deployment resource data), the media-type of the content is used. 
        </para> 
    </section>
    <section>
      <title>Error response body</title>
      <para>When an error occurs (both client and server, 4XX and 5XX status-codes) the response body contains an object describing the error that occurred. An example for a 404-status when a task is not found:</para>
                  <programlisting>
{
  "statusCode" : 404,
  "errorMessage" : "Could not find a task with id '444'."
}</programlisting>
    </section>
    <section>
      <title>Request parameters</title>
      <section>
        <title>URL fragments</title>
        <para>
            Parameters that are part of the url (eg. the deploymentId parameter in <literal>http://host/actviti-rest/service/repository/deployments/{deploymentId}</literal>)
            need to be properly escaped (see <ulink url="https://en.wikipedia.org/wiki/Percent-encoding">URL-encoding or Percent-encoding</ulink>) in case the segment contains special characters. Most
            frameworks have this functionality built in, but it should be taken into account. Especially for segments that can contains forward-slashes (eg. deployment resource), this is required.
        </para>
      </section>
      
      <section>
        <title>Rest URL query parameters</title>
        <para>
            Parameters added as query-string in the URL (eg. the name parameter used in <literal>http://host/activiti-rest/service/deployments?name=Deployment</literal>) can have the following types and are
            mentioned in the corresponding REST-API documentation:
            
            <table>
              <title>URL query parameter types</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Type</entry>
                    <entry>Format</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>String</entry>
                    <entry>Plain text parameters. Can contain any valid characters that are allowed in URL's. In case of a <literal>XXXLike</literal> parameter, the string should contain the wildcard characted <literal>%</literal> (properly url-encoded). This allows to specify the intent of the like-search. Eg. '<literal>Tas%</literal>' matches all values, starting with 'Tas'.</entry>
                  </row>
                  <row>
                    <entry>Integer</entry>
                    <entry>Parameter representing an integer value. Can only contain numeric non-decmimal values, between -2.147.483.648 and 2.147.483.647.</entry>
                  </row>
                  <row>
                    <entry>Long</entry>
                    <entry>Parameter representing a long value. Can only contain numeric non-decmimal values, between -9.223.372.036.854.775.808 and 9.223.372.036.854.775.807.</entry>
                  </row>
                  <row>
                    <entry>Boolean</entry>
                    <entry>Parameter representing a boolean value. Can be eiter <literal>true</literal> or <literal>false</literal>. All other values other than these two, will cause a '<literal>405 - Bad request</literal>' response.</entry>
                  </row>
                  <row>
                    <entry>Date</entry>
                    <entry>Parameter representing a date value. Use the ISO-8601 date-format (see <ulink url="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601 on wikipedia</ulink>) using both time and date-components (eg. <literal>2013-04-03T23:45Z</literal>).</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
        </para>
      </section>
      <section id="restJsonBody">
        <title>JSON body parameters</title>
        <para>
            <table>
              <title>JSON parameter types</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Type</entry>
                    <entry>Format</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>String</entry>
                    <entry>Plain text parameters. In case of a <literal>XXXLike</literal> parameter, the string should contain the wildcard characted <literal>%</literal>. This allows to specify the intent of the like-search. Eg. '<literal>Tas%</literal>' matches all values, starting with 'Tas'.</entry>
                  </row>
                  <row>
                    <entry>Integer</entry>
                    <entry>Parameter representing an integer value, using a JSON number. Can only contain numeric non-decmimal values, between -2.147.483.648 and 2.147.483.647.</entry>
                  </row>
                  <row>
                    <entry>Long</entry>
                    <entry>Parameter representing a long value, using a JSON number. Can only contain numeric non-decmimal values, between -9.223.372.036.854.775.808 and 9.223.372.036.854.775.807.</entry>
                  </row>
                  <row>
                    <entry>Boolean</entry>
                    <entry>Parameter representing a boolean value, using a JSON boolean. Can be eiter <literal>true</literal> or <literal>false</literal>. All other values other than these two, will cause a '<literal>405 - Bad request</literal>' response.</entry>
                  </row>
                  <row>
                    <entry>Date</entry>
                    <entry>Parameter representing a date value, using a JSON text. Use the ISO-8601 date-format (see <ulink url="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601 on wikipedia</ulink>) using both time and date-components (eg. <literal>2013-04-03T23:45Z</literal>).</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
        </para>
      </section>
      <section id="restPagingAndSort">
        <title>Paging and sorting</title>
        <para>
            Paging and order parameters can be added as query-string in the URL (eg. the name parameter used in <literal>http://host/activiti-rest/service/deployments?sort=name</literal>).
            <table>
              <title>Variable query JSON parameters</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Default value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>sort</entry>
                    <entry>different per query implementation</entry>
                    <entry>Name of the sort key, for which the default value and the allowed values are different per query implementation.</entry>
                  </row>
                  <row>
                    <entry>order</entry>
                    <entry>asc</entry>
                    <entry>Sorting order which can be 'asc' or 'desc'.</entry>
                  </row>
                  <row>
                    <entry>start</entry>
                    <entry>0</entry>
                    <entry>Parameter to allow for paging of the result. By default the result will start at 0.</entry>
                  </row>
                  <row>
                    <entry>size</entry>
                    <entry>10</entry>
                    <entry>Parameter to allow for paging of the result. By default the size will be 10.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
        </para>
      </section>
      
      <section id="restQueryVariable">
        <title>JSON query variable format</title>
        <para>
            <programlisting>
{ 
  "name" : "variableName",
  "value" : "variableValue",
  "operation" : "equals",
  "type" : "string"
}</programlisting>
            <table>
              <title>Variable query JSON parameters</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>name</entry>
                    <entry>No</entry>
                    <entry>Name of the variable to include in a query. Can be empty in case '<literal>equals</literal>' is used in some queries to query for resources that have <emphasis role="bold">any variable name</emphasis> with the given value.</entry>
                  </row>
                  <row>
                    <entry>value</entry>
                    <entry>Yes</entry>
                    <entry>Value of the variable included in the query, should include a correct format for the given type.</entry>
                  </row>
                  <row>
                    <entry>operator</entry>
                    <entry>Yes</entry>
                    <entry>Operator to use in query, can have the following values: <literal>equals, notEquals, equalsIgnoreCase, notEqualsIgnoreCase, lessThan, greaterThan, lessThanOrEquals, greaterThanOrEquals</literal> and <literal>like</literal>.</entry>
                  </row>
                  <row>
                    <entry>type</entry>
                    <entry>No</entry>
                    <entry>Type of variable to use. When omitted, the type will be deducted from the <literal>value</literal> parameter. Any JSON text-values will be considered of type <literal>string</literal>, JSON booleans of type <literal>boolean</literal>, JSON numbers of type <literal>long</literal> or <literal>integer</literal> depending on the size of the number. It's recommended to include an explicit type when in doubt. Types supported out of the box are listed below.
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
             <table>
              <title>Default query JSON types</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Type name</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>string</entry>
                    <entry>Value is threaded as and converted to a <literal>java.lang.String</literal>.</entry>
                  </row>
                  <row>
                    <entry>short</entry>
                    <entry>Value is threaded as and converted to a <literal>java.lang.Integer</literal>.</entry>
                  </row>
                  <row>
                    <entry>integer</entry>
                    <entry>Value is threaded as and converted to a <literal>java.lang.Integer</literal>.</entry>
                  </row>
                  <row>
                    <entry>long</entry>
                    <entry>Value is threaded as and converted to a <literal>java.lang.Long</literal>.</entry>
                  </row>
                  <row>
                    <entry>double</entry>
                    <entry>Value is threaded as and converted to a <literal>java.lang.Double</literal>.</entry>
                  </row>
                  <row>
                    <entry>boolean</entry>
                    <entry>Value is threaded as and converted to a <literal>java.lang.Boolean</literal>.</entry>
                  </row>
                  <row>
                    <entry>date</entry>
                    <entry>Value is treated as and converted to a <literal>java.util.Date</literal>. The JSON string will be converted using ISO-8601 date format.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
        </para>
      </section>
      
      <section id="restVariables">
        <title>Variable representation</title>
        <para>
          When working with variables (execution/process and task), the REST-api uses some common principles and JSON-format for both reading and writing. The JSON representation of a variable looks like this:
           <programlisting>
{ 
  "name" : "variableName",
  "value" : "variableValue",
  "valueUrl" : "http://...",
  "scope" : "local",
  "type" : "string"
}</programlisting>
          
           <table>
              <title>Variable JSON attributes</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>name</entry>
                    <entry>Yes</entry>
                    <entry>Name of the variable.</entry>
                  </row>
                  <row>
                    <entry>value</entry>
                    <entry>No</entry>
                    <entry>Value of the variable. When writing a variable and <literal>value</literal> is omitted, <literal>null</literal> will be used as value.</entry>
                  </row>
                  <row>
                    <entry>valueUrl</entry>
                    <entry>No</entry>
                    <entry>When reading a variable of type <literal>binary</literal> or <literal>serializable</literal>, this attribute will point to the URL where the raw binary data can be fetched from.</entry>
                  </row>
                  <row>
                    <entry>scope</entry>
                    <entry>No</entry>
                    <entry>Scope of the variable. If '<literal>local</literal>', the variable is explicitly defined on the resource it's requested from. When '<literal>global</literal>', the variable is defined on the parent (or any parent in the parent-tree) of the resource it's requested from. When writing a variable and the scope is omitted, <literal>global</literal> is assumed.</entry>
                  </row>
                  <row>
                    <entry>type</entry>
                    <entry>No</entry>
                    <entry>Type of the variable. See table below for additional information on types. When writing a variable and this value is omitted, the type will be deducted from the raw JSON-attribute request type and is limited to either <literal>string</literal>, <literal>double</literal>, <literal>integer</literal> and <literal>boolean</literal>. It's advised to always include a type to make sure no wrong assumption about the type can be done.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <table>
              <title>Variable Types</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Type name</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>string</entry>
                    <entry>Value is threaded as a <literal>java.lang.String</literal>. Raw JSON-text value is used when writing a variable.</entry>
                  </row>
                  <row>
                    <entry>integer</entry>
                    <entry>Value is threaded as a <literal>java.lang.Integer</literal>. When writing, JSON number value is used as base for conversion, falls back to JSON text.</entry>
                  </row>
                  <row>
                    <entry>short</entry>
                    <entry>Value is threaded as a <literal>java.lang.Short</literal>. When writing, JSON number value is used as base for conversion, falls back to JSON text.</entry>
                  </row>
                  <row>
                    <entry>long</entry>
                    <entry>Value is threaded as a <literal>java.lang.Long</literal>. When writing, JSON number value is used as base for conversion, falls back to JSON text.</entry>
                  </row>
                  <row>
                    <entry>double</entry>
                    <entry>Value is threaded as a <literal>java.lang.Double</literal>. When writing, JSON number value is used as base for conversion, falls back to JSON text.</entry>
                  </row>
                  <row>
                    <entry>boolean</entry>
                    <entry>Value is threaded as a <literal>java.lang.Boolean</literal>. When writing, JSON boolean value is used for conversion.</entry>
                  </row>
                  <row>
                    <entry>date</entry>
                    <entry>Value is treated as a <literal>java.util.Date</literal>. When writing, the JSON text will be converted using ISO-8601 date format.</entry>
                  </row>
                  <row>
                    <entry>binary</entry>
                    <entry>Binary variable, threated as an array of bytes. The <literal>value</literal> attribute is null, the <literal>valueUrl</literal> contains an URL pointing to the raw binary stream.</entry>
                  </row>
                  <row>
                    <entry>serializable</entry>
                    <entry>Serialized representation of a Serializable Java-object. As with the <literal>binary</literal> type, the <literal>value</literal> attribute is null, the <literal>valueUrl</literal> contains an URL pointing to the raw binary stream. All serializable variables (which are not of any of the above types) will be exposed as a variable of this type.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            It's possible to support additional variable-types with a custom JSON representation (either simple value or complex/nested JSON object). By extending the <literal>initializeVariableConverters()</literal> method on <literal>org.activiti.rest.service.api.RestResponseFactory</literal>,
            you can add additional <literal>org.activiti.rest.service.api.engine.variable.RestVariableConverter</literal> classes to support converting your POJO's to a format suitable for transferring through REST and converting the REST-value back to your POJO. The actual transformation to JSON is done by Jackson.
        </para>
       </section>
    </section>
      
  </section>
  <section>
    <title>Deployment</title>
    <para><emphasis role="bold">When using tomcat, please read <link linkend="restUsageInTomcat">Usage in Tomcat</link>.</emphasis></para>
     <section>
      <title>List of Deployments</title>
        <para>
          <programlisting>GET repository/deployments</programlisting>
        </para>
        <para>
            <table>
              <title>URL query parameters</title>
              <tgroup cols='3'>
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <colspec colname="c3"/>
                <colspec colname="c4"/>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>name</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return deployments with the given name.</entry>
                  </row>
                  <row>
                    <entry>nameLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return deployments with a name like the given name.</entry>
                  </row>
                  <row>
                    <entry>category</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return deployments with the given category.</entry>
                  </row>
                  <row>
                    <entry>categoryNotEquals</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return deployments which don't have the given category.</entry>
                  </row>
                  <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return deployments with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return deployments with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns deployments without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>No</entry>
                    <entry>'id' (default), 'name', 'deploytime' or 'tenantId'</entry>
                    <entry>Property to sort on, to be used together with the 'order'.</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>REST Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the request was successful.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "data": [
    {
      "id": "10",
      "name": "activiti-examples.bar",
      "deploymentTime": "2010-10-13T14:54:26.750+02:00",
      "category": "examples",
      "url": "http://localhost:8081/service/repository/deployments/10",
      "tenantId": null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Get a deployment</title>
        <para>
          <programlisting>GET repository/deployments/{deploymentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a deployment - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the deployment to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a deployment - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the deployment was found and returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested deployment was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "id": "10",
  "name": "activiti-examples.bar",
  "deploymentTime": "2010-10-13T14:54:26.750+02:00",
  "category": "examples",
  "url": "http://localhost:8081/service/repository/deployments/10",
  "tenantId" : null
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Create a new deployment</title>
        <para>
          <programlisting>POST repository/deployments</programlisting>
        </para>
        <para>
          <emphasis role="bold">Request body:</emphasis>
        </para>
        <para>The request should body should contain data of type <emphasis>multipart/form-data</emphasis>. There should be only exactly file in the request, any additional files will be ignored. The deployment name is the name
        of the file-field passed in. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with <literal>.bar</literal> or <literal>.zip</literal>.</para>
        <para>An additional parameter (form-field) can be passed in the request body with name <literal>tenantId</literal>. The value of this field will be used as the id of the tenant this deployment is done in.</para>
        <para>
          <table>
              <title>Create a new deployment - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the deployment was created.</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates there was no content present in the request body or the content mime-type is not supported for deployment. The status-description contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "id": "10",
  "name": "activiti-examples.bar",
  "deploymentTime": "2010-10-13T14:54:26.750+02:00",
  "category": null,
  "url": "http://localhost:8081/service/repository/deployments/10",
  "tenantId" : "myTenant"
}</programlisting>
    </para>
  </section>
      <section>
      <title>Delete a deployment</title>
        <para>
          <programlisting>DELETE repository/deployments/{deploymentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a deployment - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the deployment to delete.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Delete a deployment - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the deployment was found and has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested deployment was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>List resources in a deployment</title>
        <para>
          <programlisting>GET repository/deployments/{deploymentId}/resources</programlisting>
        </para>
        <para>
            <table>
              <title>List resources in a deployment - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the deployment to get the resources for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List resources in a deployment - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the deployment was found and the resource list has been returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested deployment was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  {
    "id": "diagrams/my-process.bpmn20.xml",
    "url": "http://localhost:8081/activiti-rest/service/repository/deployments/10/resources/diagrams%2Fmy-process.bpmn20.xml",
    "dataUrl": "http://localhost:8081/activiti-rest/service/repository/deployments/10/resourcedata/diagrams%2Fmy-process.bpmn20.xml",
    "mediaType": "text/xml",
    "type": "processDefinition"
  },
  {
    "id": "image.png",
    "url": "http://localhost:8081/activiti-rest/service/repository/deployments/10/resources/image.png",
    "dataUrl": "http://localhost:8081/activiti-rest/service/repository/deployments/10/resourcedata/image.png",
    "mediaType": "image/png",
    "type": "resource"
  }
]</programlisting>

       <itemizedlist>
        <listitem>
          <para><literal>mediaType</literal>: Contains the media-type the resource has. This is resolved using a (pluggable) <literal>MediaTypeResolver</literal> and contains, by default, a limited number of mime-type mappings.</para>
        </listitem>
         <listitem>
          <para><literal>type</literal>: Type of resource, possible values:</para>
           <itemizedlist>
            <listitem>
              <para><literal>resource</literal>: Plain old resource.</para>
            </listitem>
             <listitem>
              <para><literal>processDefinition</literal>: Resource that contains one or more process-definitions. This resource is picked up by the deployer.</para>
            </listitem>
             <listitem>
              <para><literal>processImage</literal>: Resource that represents a deployed process definition's graphical layout.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      <emphasis>The dataUrl property in the resulting json for a single resource contains the actual URL to use for retrieving the binary resource.</emphasis>
    </para>
  </section>
  <section>
      <title>Get a deployment resource</title>
        <para>
          <programlisting>GET repository/deployments/{deploymentId}/resources/{resourceId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a deployment resource - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the deployment the requested resource is part of.</entry>
                  </row>
                   <row>
                    <entry>resourceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the resource to get. <emphasis role="bold">Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use 'diagrams%2Fmy-process.bpmn20.xml' instead of 'diagrams/Fmy-process.bpmn20.xml'.</emphasis></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a deployment resource - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates both deployment and resource have been found and the resource has been returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "id": "diagrams/my-process.bpmn20.xml",
  "url": "http://localhost:8081/activiti-rest/service/repository/deployments/10/resources/diagrams%2Fmy-process.bpmn20.xml",
  "dataUrl": "http://localhost:8081/activiti-rest/service/repository/deployments/10/resourcedata/diagrams%2Fmy-process.bpmn20.xml",
  "mediaType": "text/xml",
  "type": "processDefinition"
}</programlisting>

      <itemizedlist>
        <listitem>
          <para><literal>mediaType</literal>: Contains the media-type the resource has. This is resolved using a (pluggable) <literal>MediaTypeResolver</literal> and contains, by default, a limited number of mime-type mappings.</para>
        </listitem>
         <listitem>
          <para><literal>type</literal>: Type of resource, possible values:</para>
           <itemizedlist>
            <listitem>
              <para><literal>resource</literal>: Plain old resource.</para>
            </listitem>
             <listitem>
              <para><literal>processDefinition</literal>: Resource that contains one or more process-definitions. This resource is picked up by the deployer.</para>
            </listitem>
             <listitem>
              <para><literal>processImage</literal>: Resource that represents a deployed process definition's graphical layout.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </para>
  </section>  
  
   <section>
      <title>Get a deployment resource content</title>
        <para>
          <programlisting>GET repository/deployments/{deploymentId}/resourcedata/{resourceId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a deployment resource content - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the deployment the requested resource is part of.</entry>
                  </row>
                   <row>
                    <entry>resourceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the resource to get the data for. <emphasis role="bold">Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use 'diagrams%2Fmy-process.bpmn20.xml' instead of 'diagrams/Fmy-process.bpmn20.xml'.</emphasis></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a deployment resource content - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates both deployment and resource have been found and the resource data has been returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
    </para>
    <para>
      The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources 'mimeType' property. Also, a content-disposition header is set,
      allowing browsers to download the file instead of displaying it.
    </para>
  </section>  
 </section>
 <section>
  <title>Process Definitions</title>
  
   <section>
      <title>List of process definitions</title>
        <para>
          <programlisting>GET repository/process-definitions</programlisting>
        </para>
        <para>
            <table>
              <title>List of process definitions - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>version</entry>
                    <entry>No</entry>
                    <entry>integer</entry>
                    <entry>Only return process definitions with the given version.</entry>
                  </row>
                  <row>
                    <entry>name</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with the given name.</entry>
                  </row>
                  <row>
                    <entry>nameLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with a name like the given name.</entry>
                  </row>
                  <row>
                    <entry>key</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with the given key.</entry>
                  </row>
                  <row>
                    <entry>keyLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with a name like the given key.</entry>
                  </row>
                  <row>
                    <entry>resourceName</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with the given resource name.</entry>
                  </row>
                  <row>
                    <entry>resourceNameLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with a name like the given resource name.</entry>
                  </row>
                  <row>
                    <entry>category</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with the given category.</entry>
                  </row>
                  <row>
                    <entry>categoryLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions with a category like the given name.</entry>
                  </row>
                  <row>
                    <entry>categoryNotEquals</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions which don't have the given category.</entry>
                  </row>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions which are part of a deployment with the given id.</entry>
                  </row>
                  <row>
                    <entry>startableByUser</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process definitions which can be started by the given user.</entry>
                  </row>
                  <row>
                    <entry>latest</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Only return the latest process definition versions. Can only be used together with 'key' and 'keyLike' parameters, using any other parameter will result in a 400-response.</entry>
                  </row>
                  <row>
                    <entry>suspended</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns process definitions which are suspended. If <literal>false</literal>, only active process definitions (which are not suspended) are returned.</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>No</entry>
                    <entry>'name' (default), 'id', 'key', 'category', 'deploymentId' and 'version'</entry>
                    <entry>Property to sort on, to be used together with the 'order'.</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List of process definitions - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the process-definitions are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format or that 'latest' is used with other parameters other than 'key' and 'keyLike'. The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "data": [
    { 
      "id" : "oneTaskProcess:1:4",
      "url" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "version" : 1,
      "key" : "oneTaskProcess",
      "category" : "Examples",
      "suspended" : false,
      "name" : "The One Task Process",
      "description" : "This is a process for testing purposes",
      "deploymentId" : "2",
      "deploymentUrl" : "http://localhost:8081/repository/deployments/2",
      "graphicalNotationDefined" : true,
      "resource" : "http://localhost:8182/repository/deployments/2/resources/testProcess.xml",
      "diagramResource" : "http://localhost:8182/repository/deployments/2/resources/testProcess.png",
      "startFormDefined" : false
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      <itemizedlist>
          <listitem>
            <para><literal>graphicalNotationDefined</literal>: Indicates the process definition contains graphical information (BPMN DI).</para>
          </listitem>
          <listitem>
            <para><literal>resource</literal>: Contains the actual deployed BPMN 2.0 xml.</para>
          </listitem>
          <listitem>
            <para><literal>diagramResource</literal>: Contains a graphical representation of the process, null when no diagram is available.</para>
          </listitem>
      </itemizedlist>
    </para>
    </section>
   <section>
      <title>Get a process definition</title>
        <para>
          <programlisting>GET repository/process-definitions/{processDefinitionId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a process definition - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process definition to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a process definition - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process definition was found and returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process definition was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "id" : "oneTaskProcess:1:4",
  "url" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
  "version" : 1,
  "key" : "oneTaskProcess",
  "category" : "Examples",
  "suspended" : false,
  "name" : "The One Task Process",
  "description" : "This is a process for testing purposes",
  "deploymentId" : "2",
  "deploymentUrl" : "http://localhost:8081/repository/deployments/2",
  "graphicalNotationDefined" : true,
  "resource" : "http://localhost:8182/repository/deployments/2/resources/testProcess.xml",
  "diagramResource" : "http://localhost:8182/repository/deployments/2/resources/testProcess.png",
  "startFormDefined" : false
}</programlisting>
      <itemizedlist>
          <listitem>
            <para><literal>graphicalNotationDefined</literal>: Indicates the process definition contains graphical information (BPMN DI).</para>
          </listitem>
          <listitem>
            <para><literal>resource</literal>: Contains the actual deployed BPMN 2.0 xml.</para>
          </listitem>
          <listitem>
            <para><literal>diagramResource</literal>: Contains a graphical representation of the process, null when no diagram is available.</para>
          </listitem>
      </itemizedlist>
    </para>
    </section>
    
    <section>
      <title>Update category for a process definition</title>
        <para>
          <programlisting>PUT repository/process-definitions/{processDefinitionId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{ 
  "category" : "updatedcategory"
}</programlisting>
        </para>
        <para>
          <table>
              <title>Update category for a process definition - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process was category was altered.</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates no category was defined in the request body.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process definition was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>repository/process-definitions/{processDefinitionId}</literal>.
      </para>
 </section>
     <section>
      <title>Get a process definition resource content</title>
        <para>
          <programlisting>GET repository/process-definitions/{processDefinitionId}/resourcedata</programlisting>
        </para>
        <para>
            <table>
              <title>Get a process definition resource content - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process definition to get the resource data for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Response:</emphasis>
    </para>
    <para>
      Exactly the same response codes/boy as <literal>GET repository/deployment/{deploymentId}/resourcedata/{resourceId}</literal>.
    </para>
  </section>  
  
   <section>
      <title>Get a process definition BPMN model</title>
        <para>
          <programlisting>GET repository/process-definitions/{processDefinitionId}/model</programlisting>
        </para>
        <para>
            <table>
              <title>Get a process definition BPMN model - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process definition to get the model for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a process definition BPMN model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process definition was found and the model is returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process definition was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Response body:</emphasis>
       The response body is a JSON representation of the <literal>org.activiti.bpmn.model.BpmnModel</literal> and contains the full process definition model.
<programlisting>
{
   "processes":[
      {
         "id":"oneTaskProcess",
         "xmlRowNumber":7,
         "xmlColumnNumber":60,
         "extensionElements":{

         },
         "name":"The One Task Process",
         "executable":true,
         "documentation":"One task process description",
         
         ...
    ], 
    
    ...
}
</programlisting>
    </para>
    <para>
     
    </para>
  </section>  
 
  <section>
      <title>Suspend a process definition</title>
        <para>
          <programlisting>PUT repository/process-definitions/{processDefinitionId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "suspend",
  "includeProcessInstances" : "false",
  "date" : "2013-04-15T00:42:12Z"
}</programlisting>
        <table id="processDefinitionActionBodyParameters">
              <title>Suspend a process definition - JSON Body parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Required</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>action</entry>
                    <entry>Action to perform. Either <literal>activate</literal> or <literal>suspend</literal>.</entry>
                    <entry>Yes</entry>
                  </row>
                  <row>
                    <entry>includeProcessInstances</entry>
                    <entry>Whether or not to suspend/activate running process-instances for this process-definition. If omitted, the process-instances are left in the state they are.</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>date</entry>
                    <entry>Date (ISO-8601) when the suspension/activation should be executed. If omitted, the suspend/activation is effective immediatly.</entry>
                    <entry>No</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Suspend a process definition - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process was suspended.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process definition was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the requested process definition is already suspended.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>repository/process-definitions/{processDefinitionId}</literal>.
      </para>
 </section>
   <section>
      <title>Activate a process definition</title>
        <para>
          <programlisting>PUT repository/process-definitions/{processDefinitionId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "activate",
  "includeProcessInstances" : "true",
  "date" : "2013-04-15T00:42:12Z"
}</programlisting>

        See suspend process definition <link linkend="processDefinitionActionBodyParameters">JSON Body parameters</link>.
        </para>
        <para>
          <table>
              <title>Activate a process definition - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process was activated.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process definition was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the requested process definition is already active.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>repository/process-definitions/{processDefinitionId}</literal>.
      </para>
 </section>
 
  <section>
      <title>Get all candidate starters for a process-definition</title>
        <para>
          <programlisting>GET repository/process-definitions/{processDefinitionId}/identitylinks</programlisting>
        </para>
        <para>
            <table>
              <title>Get all candidate starters for a process-definition - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process definition to get the identity links for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get all candidate starters for a process-definition - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process definition was found and the requested identity links are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process definition was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "url":"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/groups/admin",
      "user":null,
      "group":"admin",
      "type":"candidate"
   },
   {
      "url":"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit",
      "user":"kermit",
      "group":null,
      "type":"candidate"
   }
]</programlisting>
    </para>
  </section>
  <section>
      <title>Add a candidate starter to a process definition</title>
      <para>
        <programlisting>POST repository/process-definitions/{processDefinitionId}/identitylinks</programlisting>
      </para>
      <para>
          <table>
            <title>Add a candidate starter to a process definition - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the process definition.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
       <emphasis role="bold">Request body (user):</emphasis>
            <programlisting>
{
  "user" : "kermit"
}</programlisting>
    </para>
    <para>
       <emphasis role="bold">Request body (group):</emphasis>
            <programlisting>
{
  "groupId" : "sales"
}</programlisting>
    </para>
      <para>
        <table>
            <title>Add a candidate starter to a process definition - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>201</entry>
                  <entry>Indicates the process definition was found and the identity link was created.</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the requested process definition was not found.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "url":"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit",
  "user":"kermit",
  "group":null,
  "type":"candidate"
}</programlisting>
    </para>
 </section>
 
  <section>
      <title>Delete a candidate starter from a process definition</title>
      <para>
        <programlisting>DELETE repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}</programlisting>
      </para>
      <para>
          <table>
            <title>Delete a candidate starter from a process definition - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the process definition.</entry>
                </row>
                <row>
                  <entry>family</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>Either <literal>users</literal> or <literal>groups</literal>, depending on the type of identity link.</entry>
                </row>
                <row>
                  <entry>identityId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>Either the userId or groupId of the identity to remove as candidate starter.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Delete a candidate starter from a process definition - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>204</entry>
                  <entry>Indicates the process definition was found and the identity link was removed. The response body is intentionally empty.</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the requested process definition was not found or the process definition doesn't have an identity-link that matches the url.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "url":"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit",
  "user":"kermit",
  "group":null,
  "type":"candidate"
}</programlisting>
    </para>
    </section>
    
     <section>
      <title>Get a candidate starter from a process definition</title>
      <para>
        <programlisting>GET repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}</programlisting>
      </para>
      <para>
          <table>
            <title>Get a candidate starter from a process definition - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the process definition.</entry>
                </row>
                <row>
                  <entry>family</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>Either <literal>users</literal> or <literal>groups</literal>, depending on the type of identity link.</entry>
                </row>
                <row>
                  <entry>identityId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>Either the userId or groupId of the identity to get as candidate starter.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Get a candidate starter from a process definition - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the process definition was found and the identity link was returned.</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the requested process definition was not found or the process definition doesn't have an identity-link that matches the url.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "url":"http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4/identitylinks/users/kermit",
  "user":"kermit",
  "group":null,
  "type":"candidate"
}</programlisting>
    </para>
    </section>
 
 </section>
 
 <section>
  <title>Models</title>
  
   <section>
      <title>Get a list of models</title>
        <para>
          <programlisting>GET repository/models</programlisting>
        </para>
        <para>
            <table>
              <title>Get a list of models - URL query parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>id</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with the given id.</entry>
                  </row>
                  <row>
                    <entry>category</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with the given category.</entry>
                  </row>
                   <row>
                    <entry>categoryLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with a category like the given value. Use the <literal>%</literal> character as wildcard.</entry>
                  </row>
                   <row>
                    <entry>categoryNotEquals</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models without the given category.</entry>
                  </row>
                  <row>
                    <entry>name</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with the given name.</entry>
                  </row>
                   <row>
                    <entry>nameLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with a name like the given value. Use the <literal>%</literal> character as wildcard.</entry>
                  </row>
                  <row>
                    <entry>key</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with the given key.</entry>
                  </row>
                  <row>
                    <entry>deploymentId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models which are deployed in the given deployment.</entry>
                  </row>
                  <row>
                    <entry>version</entry>
                    <entry>No</entry>
                    <entry>Integer</entry>
                    <entry>Only return models with the given version.</entry>
                  </row>
                  <row>
                    <entry>latestVersion</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only return models which are the latest version. Best used in combination with <literal>key</literal>. If <literal>false</literal> is passed in as value, this is ignored and all versions are returned.</entry>
                  </row>
                  <row>
                    <entry>deployed</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only deployed models are returned. If <literal>false</literal>, only undeployed models are returned (deploymentId is null).</entry>
                  </row>
                   <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return models with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns models without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>No</entry>
                    <entry>'id' (default), 'category', 'createTime', 'key', 'lastUpdateTime', 'name', 'version' or 'tenantId'</entry>
                    <entry>Property to sort on, to be used together with the 'order'.</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a list of models - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the models are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format. The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "name":"Model name",
         "key":"Model key",
         "category":"Model category",
         "version":2,
         "metaInfo":"Model metainfo",
         "deploymentId":"7",
         "id":"10",
         "url":"http://localhost:8182/repository/models/10",
         "createTime":"2013-06-12T14:31:08.612+0000",
         "lastUpdateTime":"2013-06-12T14:31:08.612+0000",
         "deploymentUrl":"http://localhost:8182/repository/deployments/7",
         "tenantId":null
      },
      
      ...
      
   ],
   "total":2,
   "start":0,
   "sort":"id",
   "order":"asc",
   "size":2
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Get a model</title>
        <para>
          <programlisting>GET repository/models/{modelId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a model - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>modelId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the model to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the model was found and returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"5",
   "url":"http://localhost:8182/repository/models/5",
   "name":"Model name",
   "key":"Model key",
   "category":"Model category",
   "version":2,
   "metaInfo":"Model metainfo",
   "deploymentId":"2",
   "deploymentUrl":"http://localhost:8182/repository/deployments/2",
   "createTime":"2013-06-12T12:31:19.861+0000",
   "lastUpdateTime":"2013-06-12T12:31:19.861+0000",
   "tenantId":null
}</programlisting>
    </para>
    </section>
    
 <section>
      <title>Update a model</title>
        <para>
          <programlisting>PUT repository/models/{modelId}</programlisting>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
{
   "name":"Model name",
   "key":"Model key",
   "category":"Model category",
   "version":2,
   "metaInfo":"Model metainfo",
   "deploymentId":"2",
   "tenantId":"updatedTenant"
}</programlisting>
   All request values are optional. For example, you can only include the 'name' attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: <literal>{"metaInfo" : null}</literal> will clear the metaInfo of the model).
    </para>
        <para>
          <table>
              <title>Update a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the model was found and updated.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"5",
   "url":"http://localhost:8182/repository/models/5",
   "name":"Model name",
   "key":"Model key",
   "category":"Model category",
   "version":2,
   "metaInfo":"Model metainfo",
   "deploymentId":"2",
   "deploymentUrl":"http://localhost:8182/repository/deployments/2",
   "createTime":"2013-06-12T12:31:19.861+0000",
   "lastUpdateTime":"2013-06-12T12:31:19.861+0000",
   "tenantId":""updatedTenant"
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Create a model</title>
        <para>
          <programlisting>POST repository/models</programlisting>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
{
   "name":"Model name",
   "key":"Model key",
   "category":"Model category",
   "version":1,
   "metaInfo":"Model metainfo",
   "deploymentId":"2",
   "tenantId":"tenant""
}</programlisting>
   All request values are optional. For example, you can only include the 'name' attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
    </para>
        <para>
          <table>
              <title>Create a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the model was created.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"5",
   "url":"http://localhost:8182/repository/models/5",
   "name":"Model name",
   "key":"Model key",
   "category":"Model category",
   "version":1,
   "metaInfo":"Model metainfo",
   "deploymentId":"2",
   "deploymentUrl":"http://localhost:8182/repository/deployments/2",
   "createTime":"2013-06-12T12:31:19.861+0000",
   "lastUpdateTime":"2013-06-12T12:31:19.861+0000",
   "tenantId":"tenant"
}</programlisting>
    </para>
    </section>
    
      <section>
      <title>Delete a model</title>
        <para>
          <programlisting>DELETE repository/models/{modelId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a model - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>modelId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the model to delete.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Delete a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the model was found and has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Get the editor source for a model</title>
        <para>
          <programlisting>GET repository/models/{modelId}/source</programlisting>
        </para>
        <para>
            <table>
              <title>Get the editor source for a model - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>modelId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the model.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get the editor source for a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the model was found and source is returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
       Response body contains the model's raw editor source. The response's content-type is set to <literal>application/octet-stream</literal>, regardless of the content of the source.
    </para>
    </section>
    
    <section>
      <title>Set the editor source for a model</title>
         <para>
        <programlisting>PUT repository/models/{modelId}/source</programlisting>
      </para>
      <para>
          <table>
            <title>Set the editor source for a model - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>modelId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the model.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the source.
        </para>
        <para>
          <table>
              <title>Set the editor source for a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the model was found and the source has been updated.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Success response body:</emphasis>
       Response body contains the model's raw editor source. The response's content-type is set to <literal>application/octet-stream</literal>, regardless of the content of the source.
    </para>
  </section>
    
      <section>
      <title>Get the extra editor source for a model</title>
        <para>
          <programlisting>GET repository/models/{modelId}/source-extra</programlisting>
        </para>
        <para>
            <table>
              <title>Get the extra editor source for a model - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>modelId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the model.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get the extra editor source for a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the model was found and source is returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
       Response body contains the model's raw extra editor source. The response's content-type is set to <literal>application/octet-stream</literal>, regardless of the content of the extra source.
    </para>
    </section>
    
    <section>
      <title>Set the extra editor source for a model</title>
         <para>
        <programlisting>PUT repository/models/{modelId}/source-extra</programlisting>
      </para>
      <para>
          <table>
            <title>Set the extra editor source for a model - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>modelId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the model.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the extra source.
        </para>
        <para>
          <table>
              <title>Set the extra editor source for a model - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the model was found and the extra source has been updated.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested model was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Success response body:</emphasis>
       Response body contains the model's raw editor source. The response's content-type is set to <literal>application/octet-stream</literal>, regardless of the content of the source.
    </para>
  </section>
    
 </section>
 
 <section>
  <title>Process Instances</title>
  
   <section>
      <title>Get a process instance</title>
        <para>
          <programlisting>GET runtime/process-instances/{processInstanceId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process instance was found and returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"7",
   "url":"http://localhost:8182/runtime/process-instances/7",
   "businessKey":"myBusinessKey",
   "suspended":false,
   "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4",
   "activityId":"processTask",
   "tenantId": null
}</programlisting>
    </para>
</section>

 <section>
      <title>Delete a process instance</title>
        <para>
          <programlisting>DELETE runtime/process-instances/{processInstanceId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to delete.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Delete a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the process instance was found and deleted. Response body is left empty intentionally.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
</section>

<section>
      <title>Activate or suspend a process instance</title>
        <para>
          <programlisting>PUT runtime/process-instances/{processInstanceId}</programlisting>
        </para>
        <para>
            <table>
              <title>Activate or suspend a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to activate/suspend.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request response body (suspend):</emphasis>
            <programlisting>
{
   "action":"suspend"
}</programlisting>
    </para>
     <para>
       <emphasis role="bold">Request response body (activate):</emphasis>
            <programlisting>
{
   "action":"activate"
}</programlisting>
    </para>
        <para>
          <table>
              <title>Activate or suspend a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process instance was found and action was executed.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates an invalid action was supplied.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                   <row>
                    <entry>409</entry>
                    <entry>Indicates the requested process instance action cannot be executed since the process-instance is already activated/suspended.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
</section>

<section>
      <title>Start a process instance</title>
        <para>
          <programlisting>POST runtime/process-instances</programlisting>
        </para>
        <para>
       <emphasis role="bold">Request body (start by process definition id):</emphasis>
            <programlisting>
{
   "processDefinitionId":"oneTaskProcess:1:158",
   "businessKey":"myBusinessKey",
   "variables": [
      {
        "name":"myVar",
        "value":"This is a variable",
      },
      
      ... 
   ]
}</programlisting>
    </para>
    <para>
       <emphasis role="bold">Request body (start by process definition key):</emphasis>
            <programlisting>
{
   "processDefinitionKey":"oneTaskProcess",
   "businessKey":"myBusinessKey",
   "tenantId": "tenant1",
   "variables": [
      {
        "name":"myVar",
        "value":"This is a variable",
      },
      
      ... 
   ]
}</programlisting>
    </para>
    <para>
       <emphasis role="bold">Request body (start by message):</emphasis>
            <programlisting>
{
   "message":"newOrderMessage",
   "businessKey":"myBusinessKey",
   "tenantId": "tenant1",
   "variables": [
      {
        "name":"myVar",
        "value":"This is a variable",
      },
      
      ... 
   ]
}</programlisting>
    </para>
    <para>
    Only one of <literal>processDefinitionId</literal>, <literal>processDefinitionKey</literal> or <literal>message</literal> can be used in the request body. Parameters <literal>businessKey</literal>, <literal>variables</literal> and <literal>tenantId</literal> are optional. If <literal>tenantId</literal> is omitted, the default tenant will be used.
    More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>. Note that the variable-scope that is supplied is ignored, process-variables are always <literal>local</literal>.
    </para>
        <para>
          <table>
              <title>Start a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the process instance was created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates either the process-definition was not found (based on id or key), no process is started by sending the given message or an invalid variable has been passed. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"7",
   "url":"http://localhost:8182/runtime/process-instances/7",
   "businessKey":"myBusinessKey",
   "suspended":false,
   "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4",
   "activityId":"processTask",
   "tenantId" : null
}</programlisting>
    </para>
</section>

<section id="restProcessInstancesGet">
      <title>List of process instances</title>
        <para>
          <programlisting>GET runtime/process-instances</programlisting>
        </para>
        <para>
            <table>
              <title>List of process instances - URL query parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>id</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instance with the given id.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionKey</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances with the given process definition key.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances with the given process definition id.</entry>
                  </row>
                  <row>
                    <entry>businessKey</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances with the given businessKey.</entry>
                  </row>
                  <row>
                    <entry>involvedUser</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances in which the given user is involved.</entry>
                  </row>
                  <row>
                    <entry>suspended</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only return process instance which are suspended. If <literal>false</literal>, only return process instances which are not suspended (active).</entry>
                  </row>
                  <row>
                    <entry>superProcessInstanceId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances which have the given super process-instance id (for processes that have a call-activities).</entry>
                  </row>
                  <row>
                    <entry>subProcessInstanceId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances which have the given sub process-instance id (for processes started as a call-activity).</entry>
                  </row>
                  <row>
                    <entry>excludeSubprocesses</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Return only process instances which aren't sub processes.</entry>
                  </row>
                  <row>
                    <entry>includeProcessVariables</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Indication to include process variables in the result.</entry>
                  </row>
                  <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return process instances with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns process instances without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Sort field, should be either one of <literal>id</literal> (default), <literal>processDefinitionId</literal>, <literal>tenantId</literal> or <literal>processDefinitionKey</literal>.</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List of process instances - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the process-instances are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format . The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "id":"7",
         "url":"http://localhost:8182/runtime/process-instances/7",
         "businessKey":"myBusinessKey",
         "suspended":false,
         "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4",
         "activityId":"processTask",
         "tenantId" : null
      },
      
      ...
   ],
   "total":2,
   "start":0,
   "sort":"id",
   "order":"asc",
   "size":2
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Query process instances</title>
        <para>
          <programlisting>POST query/process-instances</programlisting>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
{
  "processDefinitionKey":"oneTaskProcess",
  "variables": 
  [
    {
        "name" : "myVariable",
        "value" : 1234,
        "operation" : "equals",
        "type" : "long"
    },
    ...
  ],
  ...
}</programlisting>

The request body can contain all possible filters that can be used in the <link linkend="restProcessInstancesGet">List process instances</link> URL query. On top of these, it's possible to provide an array of variables
to include in the query, with their format <link linkend="restQueryVariable"> described here</link>.
    </para>
    <para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para>
        <para>
          <table>
              <title>Query process instances - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the process-instances are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format . The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "id":"7",
         "url":"http://localhost:8182/runtime/process-instances/7",
         "businessKey":"myBusinessKey",
         "suspended":false,
         "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4",
         "activityId":"processTask",
         "tenantId" : null
      },
      
      ...
   ],
   "total":2,
   "start":0,
   "sort":"id",
   "order":"asc",
   "size":2
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Get diagram for a process instance</title>
        <para>
          <programlisting>GET runtime/process-instances/{processInstanceId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get diagram for a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to get the diagram for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get diagram for a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process instance was found and the diagram was returned.</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates the requested process instance was not found but the process doesn't contain any graphical information (BPMN:DI) and no diagram can be created.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"7",
   "url":"http://localhost:8182/runtime/process-instances/7",
   "businessKey":"myBusinessKey",
   "suspended":false,
   "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/processOne%3A1%3A4",
   "activityId":"processTask"
}</programlisting>
    </para>
</section>
    
     <section>
      <title>Get involved people for process instance</title>
        <para>
          <programlisting>GET runtime/process-instances/{processInstanceId}/identitylinks</programlisting>
        </para>
        <para>
            <table>
              <title>Get involved people for process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to the links for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get involved people for process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process instance was found and links are returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "url":"http://localhost:8182/runtime/process-instances/5/identitylinks/users/john/customType",
      "user":"john",
      "group":null,
      "type":"customType"
   },
   {
      "url":"http://localhost:8182/runtime/process-instances/5/identitylinks/users/paul/candidate",
      "user":"paul",
      "group":null,
      "type":"candidate"
   }
]</programlisting>
Note that the <literal>groupId</literal> will always be null, as it's only possible to involve users with a process-instance.
    </para>
</section>

<section>
      <title>Add an involved user to a process instance</title>
        <para>
          <programlisting>POST runtime/process-instances/{processInstanceId}/identitylinks</programlisting>
        </para>
        <para>
            <table>
              <title>Add an involved user to a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to the links for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
{
  "userId":"kermit",
  "type":"participant"
}</programlisting>
Both <literal>userId</literal> and <literal>type</literal> are required.
    </para>
        <para>
          <table>
              <title>Add an involved user to a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the process instance was found and the link is created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the requested body did not contain a userId or a type.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "url":"http://localhost:8182/runtime/process-instances/5/identitylinks/users/john/customType",
   "user":"john",
   "group":null,
   "type":"customType"
}</programlisting>
Note that the <literal>groupId</literal> will always be null, as it's only possible to involve users with a process-instance.
    </para>
</section>

<section>
      <title>Remove an involved user to from process instance</title>
        <para>
          <programlisting>DELETE runtime/process-instances/{processInstanceId}/identitylinks/users/{userId}/{type}</programlisting>
        </para>
        <para>
            <table>
              <title>Remove an involved user to from process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance.</entry>
                  </row>
                  <row>
                    <entry>userId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the user to delete link for.</entry>
                  </row>
                  <row>
                    <entry>type</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>Type of link to delete.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Remove an involved user to from process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the process instance was found and the link has been deleted. Response body is left empty intentionally.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found or the link to delete doesn't exist. The response status contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "url":"http://localhost:8182/runtime/process-instances/5/identitylinks/users/john/customType",
   "user":"john",
   "group":null,
   "type":"customType"
}</programlisting>
Note that the <literal>groupId</literal> will always be null, as it's only possible to involve users with a process-instance.
    </para>
</section>

 <section>
      <title>List of variables for a process instance</title>
        <para>
          <programlisting>GET runtime/process-instances/{processInstanceId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>List of variables for a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to the variables for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List of variables for a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process instance was found and variables are returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   },
   {
      "name":"byteArrayProcVar",
      "type":"binary",
      "value":null,
      "valueUrl":"http://localhost:8182/runtime/process-instances/5/variables/byteArrayProcVar/data",
      "scope":"local"
   },
   
   ...
]</programlisting>
In case the variable is a binary variable or serializable, the <literal>valueUrl</literal> points to an URL to fetch the raw value. If it's a plain variable, the value is present in the response. 
Note that only <literal>local</literal> scoped variables are returned, as there is no <literal>global</literal> scope for process-instance variables.</para>
</section>

  <section>
      <title>Get a variable for a process instance</title>
        <para>
          <programlisting>GET runtime/process-instances/{processInstanceId}/variables/{variableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a variable for a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to the variables for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>Name of the variable to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a variable for a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates both the process instance and variable were found and variable is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found or the process instance does not have a variable with the given name. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   }</programlisting>
    In case the variable is a binary variable or serializable, the <literal>valueUrl</literal> points to an URL to fetch the raw value. If it's a plain variable, the value is present in the response. 
    Note that only <literal>local</literal> scoped variables are returned, as there is no <literal>global</literal> scope for process-instance variables.</para>
  </section>
  
  
  <section>
      <title>Create (or update) variables on a process instance</title>
        <para>
          <programlisting>POST runtime/process-instances/{processInstanceId}/variables</programlisting>
          <programlisting>PUT runtime/process-instances/{processInstanceId}/variables</programlisting>
        </para>
        <para>
          When using <literal>POST</literal>, all variables that are passed are created. In case one of the variables already exists on the process instance, the request results in an error (409 - CONFLICT). When <literal>PUT</literal> is used,
          unexisting variables are created on the process-instance and existing ones are overridden without any error. 
            <table>
              <title>Create (or update) variables on a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to the variables for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
[
   {
      "name":"intProcVar"
      "type":"integer"
      "value":123
   },
   
   ...
]</programlisting>
        Any number of variables can be passed into the request body array. More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>. Note that scope is ignored, only <literal>local</literal> variables can be set in a process instance.
        </para>
        <para>
          <table>
              <title>Create (or update) variables on a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the process instance was found and variable is created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                   <row>
                    <entry>409</entry>
                    <entry>Indicates the process instance was found but already contains a variable with the given name (only thrown when POST method is used). Use the update-method instead.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   },
   
   ...
   
]</programlisting>
  </para>
  </section>
  
  <section>
      <title>Update a single variable on a process instance</title>
        <para>
          <programlisting>PUT runtime/process-instances/{processInstanceId}/variables/{variableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Update a single variable on a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to the variables for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>Name of the variable to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
 {
    "name":"intProcVar"
    "type":"integer"
    "value":123
 }</programlisting>
        More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>. Note that scope is ignored, only <literal>local</literal> variables can be set in a process instance.
        </para>
        <para>
          <table>
              <title>Update a single variable on a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates both the process instance and variable were found and variable is updated.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found or the process instance does not have a variable with the given name. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   }</programlisting>
  In case the variable is a binary variable or serializable, the <literal>valueUrl</literal> points to an URL to fetch the raw value. If it's a plain variable, the value is present in the response. 
  Note that only <literal>local</literal> scoped variables are returned, as there is no <literal>global</literal> scope for process-instance variables.
  </para>
  </section>
  
   <section>
      <title>Create a new binary variable on a process-instance</title>
        <para>
          <programlisting>POST runtime/process-instances/{processInstanceId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new binary variable on a process-instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to create the new variable for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is created. If omitted, <literal>binary</literal> is assumed and the binary data in the request will be stored as an array of bytes.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "binaryVariable",
  "scope" : "local",
  "type" : "binary",
  "value" : null,
  "valueUrl" : "http://.../runtime/process-instances/123/variables/binaryVariable/data"
}</programlisting>
          <table>
              <title>Create a new binary variable on a process-instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the variable was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of the variable to create was missing. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the process instance already has a variable with the given name. Use the PUT method to update the task variable instead.</entry>
                  </row>
                  <row>
                    <entry>415</entry>
                    <entry>Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Update an existing binary variable on a process-instance</title>
        <para>
          <programlisting>PUT runtime/process-instances/{processInstanceId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>Update an existing binary variable on a process-instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to create the new variable for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is created. If omitted, <literal>binary</literal> is assumed and the binary data in the request will be stored as an array of bytes.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "binaryVariable",
  "scope" : "local",
  "type" : "binary",
  "value" : null,
  "valueUrl" : "http://.../runtime/process-instances/123/variables/binaryVariable/data"
}</programlisting>
          <table>
              <title>Update an existing binary variable on a process-instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the variable was updated and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of the variable to update was missing. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found or the process instance does not have a variable with the given name.</entry>
                  </row>
                  <row>
                    <entry>415</entry>
                    <entry>Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>

</section>
 
  <section>
  <title>Executions</title>
  
   <section>
      <title>Get an execution</title>
        <para>
          <programlisting>GET runtime/executions/{executionId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the execution was found and returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the execution was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"5",
   "url":"http://localhost:8182/runtime/executions/5",
   "parentId":null,
   "parentUrl":null,
   "processInstanceId":"5",
   "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
   "suspended":false,
   "activityId":null,
   "tenantId": null
}</programlisting>
    </para>
  </section>
 <section>
      <title>Execute an action on an execution</title>
        <para>
          <programlisting>PUT runtime/executions/{executionId}</programlisting>
        </para>
        <para>
            <table>
              <title>Execute an action on an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to execute action on.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body (signal an execution):</emphasis>
            <programlisting>
{
  "action":"signal"
}</programlisting>
    </para>
     <para>
       <emphasis role="bold">Request body (signal event received for execution):</emphasis>
            <programlisting>
{
  "action":"signalEventReceived",
  "signalName":"mySignal"
  "variables": [ ... ]
}</programlisting>
 Notifies the execution that a signal event has been received, requires a <literal>signalName</literal> parameter. Optional <literal>variables</literal> can be passed that are set on the execution before the action is executed.
    </para>
     <para>
       <emphasis role="bold">Request body (signal event received for execution):</emphasis>
            <programlisting>
{
  "action":"messageEventReceived",
  "messageName":"myMessage"
  "variables": [ ... ]
}</programlisting>
 Notifies the execution that a message event has been received, requires a <literal>messageName</literal> parameter. Optional <literal>variables</literal> can be passed that are set on the execution before the action is executed.
    </para>
        <para>
          <table>
              <title>Execute an action on an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the execution was found and the action is performed.</entry>
                  </row>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the execution was found, the action was performed and the action caused the execution to end.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates an illegal action was requested, required parameters are missing in the request body or illegal variables are passed in. Status description contains additional information about the error.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the execution was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body (in case execution is not ended due to action):</emphasis>
            <programlisting>
{
   "id":"5",
   "url":"http://localhost:8182/runtime/executions/5",
   "parentId":null,
   "parentUrl":null,
   "processInstanceId":"5",
   "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
   "suspended":false,
   "activityId":null,
   "tenantId" : null
}</programlisting>
    </para>
  </section>
  
  <section>
      <title>Get active activities in an execution</title>
        <para>
          <programlisting>GET runtime/executions/{executionId}/activities</programlisting>
        </para>
        <para>
          Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        </para>
        <para>
            <table>
              <title>Get active activities in an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to get activities for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get active activities in an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the execution was found and activities are returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the execution was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  "userTaskForManager",
  "receiveTask"
]</programlisting>
    </para>
  </section>
  
  <section id="restExecutionsGet">
      <title>List of executions</title>
        <para>
          <programlisting>GET runtime/executions</programlisting>
        </para>
        <para>
            <table>
              <title>List of executions - URL query parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>id</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions with the given id.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionKey</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions with the given process definition key.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions with the given process definition id.</entry>
                  </row>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions which are part of the process instance with the given id.</entry>
                  </row>
                  <row>
                    <entry>messageEventSubscriptionName</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions which are subscribed to a message with the given name.</entry>
                  </row>
                  <row>
                    <entry>signalEventSubscriptionName</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions which are subscribed to a signal with the given name.</entry>
                  </row>
                  <row>
                    <entry>parentId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions which are a direct child of the given execution.</entry>
                  </row>
                    <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return executions with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns executions without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Sort field, should be either one of <literal>processInstanceId</literal> (default), <literal>processDefinitionId</literal>, <literal>processDefinitionKey</literal> or <literal>tenantId</literal>.</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List of executions - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the executions are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format . The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "id":"5",
         "url":"http://localhost:8182/runtime/executions/5",
         "parentId":null,
         "parentUrl":null,
         "processInstanceId":"5",
         "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
         "suspended":false,
         "activityId":null,
         "tenantId":null
      },
      {
         "id":"7",
         "url":"http://localhost:8182/runtime/executions/7",
         "parentId":"5",
         "parentUrl":"http://localhost:8182/runtime/executions/5",
         "processInstanceId":"5",
         "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
         "suspended":false,
         "activityId":"processTask",
         "tenantId":null
      }
   ],
   "total":2,
   "start":0,
   "sort":"processInstanceId",
   "order":"asc",
   "size":2
}</programlisting>
    </para>
    </section>
    
    <section>
      <title>Query executions</title>
        <para>
          <programlisting>POST query/executions</programlisting>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
{
  "processDefinitionKey":"oneTaskProcess",
  "variables": 
  [
    {
        "name" : "myVariable",
        "value" : 1234,
        "operation" : "equals",
        "type" : "long"
    },
    ...
  ],
  "processInstanceVariables": 
  [
    {
        "name" : "processVariable",
        "value" : "some string",
        "operation" : "equals",
        "type" : "string"
    },
    ...
  ],
  ...
}</programlisting>

The request body can contain all possible filters that can be used in the <link linkend="restExecutionsGet">List executions</link> URL query. On top of these, it's possible to provide an array of <literal>variables</literal> and <literal>processInstanceVariables</literal>
to include in the query, with their format <link linkend="restQueryVariable"> described here</link>.
    </para>
    <para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para>
        <para>
          <table>
              <title>Query executions - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the executions are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format . The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "id":"5",
         "url":"http://localhost:8182/runtime/executions/5",
         "parentId":null,
         "parentUrl":null,
         "processInstanceId":"5",
         "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
         "suspended":false,
         "activityId":null,
         "tenantId":null
      },
      {
         "id":"7",
         "url":"http://localhost:8182/runtime/executions/7",
         "parentId":"5",
         "parentUrl":"http://localhost:8182/runtime/executions/5",
         "processInstanceId":"5",
         "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
         "suspended":false,
         "activityId":"processTask",
         "tenantId":null
      }
   ],
   "total":2,
   "start":0,
   "sort":"processInstanceId",
   "order":"asc",
   "size":2
}</programlisting>
    </para>
    </section>
    
    
    <section>
      <title>List of variables for an execution</title>
        <para>
          <programlisting>GET runtime/executions/{executionId}/variables?scope={scope}</programlisting>
        </para>
        <para>
            <table>
              <title>List of variables for an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to the variables for.</entry>
                  </row>
                   <row>
                    <entry>scope</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Either <literal>local</literal> or <literal>global</literal>. If omitted, both local and global scoped variables are returned.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List of variables for an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the execution was found and variables are returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested execution was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"global"
   },
   {
      "name":"byteArrayProcVar",
      "type":"binary",
      "value":null,
      "valueUrl":"http://localhost:8182/runtime/process-instances/5/variables/byteArrayProcVar/data",
      "scope":"local"
   },
   
   ...
]</programlisting>
In case the variable is a binary variable or serializable, the <literal>valueUrl</literal> points to an URL to fetch the raw value. If it's a plain variable, the value is present in the response.
</para> 
</section>

  <section>
      <title>Get a variable for an execution</title>
        <para>
          <programlisting>GET runtime/executions/{executionId}/variables/{variableName}?scope={scope}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a variable for an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to the variables for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>Name of the variable to get.</entry>
                  </row>
                   <row>
                    <entry>scope</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Either <literal>local</literal> or <literal>global</literal>. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists).</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a variable for an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates both the execution and variable were found and variable is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested execution was not found or the execution does not have a variable with the given name in the requested scope (in case scope-query parameter was omitted, variable doesn't exist in local and global scope). Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   }</programlisting>
    In case the variable is a binary variable or serializable, the <literal>valueUrl</literal> points to an URL to fetch the raw value. If it's a plain variable, the value is present in the response.
    </para> 
  </section>
  
  
  <section>
      <title>Create (or update) variables on an execution</title>
        <para>
          <programlisting>POST runtime/executions/{executionId}/variables</programlisting>
          <programlisting>PUT runtime/executions/{executionId}/variables</programlisting>
        </para>
        <para>
          When using <literal>POST</literal>, all variables that are passed are created. In case one of the variables already exists on the execution in the requested scope, the request results in an error (409 - CONFLICT). When <literal>PUT</literal> is used,
          unexisting variables are created on the execution and existing ones are overridden without any error. 
            <table>
              <title>Create (or update) variables on an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to the variables for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
[
   {
      "name":"intProcVar"
      "type":"integer"
      "value":123,
      "scope":"local"
   },
   
   ...
]</programlisting>
        <emphasis role="bold">Note that you can only provide variables that have the same scope. If the request-body array contains variables from mixed scopes, the request results in an error (400 - BAD REQUEST).</emphasis>Any number of variables can be passed into the request body array. More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>. Note that scope is ignored, only <literal>local</literal> variables can be set in a process instance.
        </para>
        <para>
          <table>
              <title>Create (or update) variables on an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the execution was found and variable is created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested execution was not found.</entry>
                  </row>
                   <row>
                    <entry>409</entry>
                    <entry>Indicates the execution was found but already contains a variable with the given name (only thrown when POST method is used). Use the update-method instead.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"local"
   },
   
   ...
   
]</programlisting>
  </para>
  </section>
  
  <section>
      <title>Update a variable on an execution</title>
        <para>
          <programlisting>PUT runtime/executions/{executionId}/variables/{variableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Update a variable on an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to update the variables for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>Name of the variable to update.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
            <programlisting>
 {
    "name":"intProcVar"
    "type":"integer"
    "value":123,
    "scope":"global"
 }</programlisting>
        More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>.
        </para>
        <para>
          <table>
              <title>Update a variable on an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates both the process instance and variable were found and variable is updated.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested process instance was not found or the process instance does not have a variable with the given name. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
   {
      "name":"intProcVar",
      "type":"integer",
      "value":123,
      "scope":"global"
   }</programlisting>
  In case the variable is a binary variable or serializable, the <literal>valueUrl</literal> points to an URL to fetch the raw value. If it's a plain variable, the value is present in the response. 
  </para>
  </section>
  
   <section>
      <title>Create a new binary variable on an execution</title>
        <para>
          <programlisting>POST runtime/executions/{executionId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new binary variable on an execution - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to create the new variable for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is created. If omitted, <literal>binary</literal> is assumed and the binary data in the request will be stored as an array of bytes.</para>
          </listitem>
          <listitem>
            <para><literal>scope</literal>: Scope of variable that is created. If omitted, <literal>local</literal> is assumed.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "binaryVariable",
  "scope" : "local",
  "type" : "binary",
  "value" : null,
  "valueUrl" : "http://.../runtime/executions/123/variables/binaryVariable/data"
}</programlisting>
          <table>
              <title>Create a new binary variable on an execution - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the variable was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of the variable to create was missing. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested execution was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the execution already has a variable with the given name. Use the PUT method to update the task variable instead.</entry>
                  </row>
                  <row>
                    <entry>415</entry>
                    <entry>Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Update an existing binary variable on a process-instance</title>
         <para>
          <programlisting>PUT runtime/executions/{executionId}/variables/{variableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Update an existing binary variable on a process-instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>executionId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the execution to create the new variable for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the variable to update.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is created. If omitted, <literal>binary</literal> is assumed and the binary data in the request will be stored as an array of bytes.</para>
          </listitem>
           <listitem>
            <para><literal>scope</literal>: Scope of variable that is created. If omitted, <literal>local</literal> is assumed.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "binaryVariable",
  "scope" : "local",
  "type" : "binary",
  "value" : null,
  "valueUrl" : "http://.../runtime/executions/123/variables/binaryVariable/data"
}</programlisting>
          <table>
              <title>Update an existing binary variable on a process-instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the variable was updated and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of the variable to update was missing. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested execution was not found or the execution does not have a variable with the given name.</entry>
                  </row>
                  <row>
                    <entry>415</entry>
                    <entry>Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
</section>
 
  <section>
  <title>Tasks</title>
      <section>
      <title>Get a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and returned.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "assignee" : "kermit",
  "createTime" : "2013-04-17T10:17:43.902+0000",
  "delegationState" : "pending",
  "description" : "Task description",
  "dueDate" : "2013-04-17T10:17:43.902+0000",
  "execution" : "http://localhost:8182/runtime/executions/5",
  "id" : "8",
  "name" : "My task",
  "owner" : "owner",
  "parentTask" : "http://localhost:8182/runtime/tasks/9",
  "priority" : 50,
  "processDefinition" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
  "processInstance" : "http://localhost:8182/runtime/process-instances/5",
  "suspended" : false,
  "taskDefinitionKey" : "theTask",
  "url" : "http://localhost:8182/runtime/tasks/8",
  "tenantId" : null
}</programlisting>
      <itemizedlist>
          <listitem>
            <para><literal>delegationState</literal>: Delegation-state of the task, can be <literal>null</literal>, <literal>"pending"</literal> or <literal>"resolved".</literal></para>
          </listitem>
      </itemizedlist>
    </para>
    </section>
 
  <section id="restTasksGet">
      <title>List of tasks</title>
        <para>
          <programlisting>GET runtime/tasks</programlisting>
        </para>
        <para>
            <table>
              <title>List of tasks - URL query parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>name</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with the given name.</entry>
                  </row>
                  <row>
                    <entry>nameLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with a name like the given name.</entry>
                  </row>
                  <row>
                    <entry>description</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with the given description.</entry>
                  </row>
                  <row>
                    <entry>priority</entry>
                    <entry>No</entry>
                    <entry>Integer</entry>
                    <entry>Only return tasks with the given priotiry.</entry>
                  </row>
                  <row>
                    <entry>minimumPriority</entry>
                    <entry>No</entry>
                    <entry>Integer</entry>
                    <entry>Only return tasks with a priority greater than the given value.</entry>
                  </row>
                  <row>
                    <entry>maximumPriority</entry>
                    <entry>No</entry>
                    <entry>Integer</entry>
                    <entry>Only return tasks with a priority lower than the given value.</entry>
                  </row>
                  <row>
                    <entry>assignee</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks assigned to the given user.</entry>
                  </row>
                  <row>
                    <entry>assigneeLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks assigned with an assignee like the given value.</entry>
                  </row>
                  <row>
                    <entry>owner</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks owned by the given user.</entry>
                  </row>
                  <row>
                    <entry>ownerLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks assigned with an owner like the given value.</entry>
                  </row>
                  <row>
                    <entry>unassigned</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Only return tasks that are not assigned to anyone. If <literal>false</literal> is passed, the value is ignored.</entry>
                  </row>
                  <row>
                    <entry>delegationState</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks that have the given delegation state. Possible values are <literal>pending</literal> and <literal>resolved</literal>.</entry>
                  </row>
                  <row>
                    <entry>candidateUser</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of.</entry>
                  </row>
                  <row>
                    <entry>candidateGroup</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks that can be claimed by a user in the given group.</entry>
                  </row>
                  <row>
                    <entry>involvedUser</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks in which the given user is involved.</entry>
                  </row>
                  <row>
                    <entry>taskDefinitionKey</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with the given task definition id.</entry>
                  </row>
                  <row>
                    <entry>taskDefinitionKeyLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with a given task definition id like the given value.</entry>
                  </row>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of the process instance with the given id.</entry>
                  </row>
                  <row>
                    <entry>processInstanceBusinessKey</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of the process instance with the given business key.</entry>
                  </row>
                  <row>
                    <entry>processInstanceBusinessKeyLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of the process instance which has a business key like the given value.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionKey</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of a process instance which has a process definition with the given key.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionKeyLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of a process instance which has a process definition with a key like the given value.</entry>
                  </row>
                   <row>
                    <entry>processDefinitionName</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of a process instance which has a process definition with the given name.</entry>
                  </row>
                  <row>
                    <entry>processDefinitionNameLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of a process instance which has a process definition with a name like the given value.</entry>
                  </row>
                  <row>
                    <entry>executionId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks which are part of the execution with the given id.</entry>
                  </row>
                  <row>
                    <entry>createdOn</entry>
                    <entry>No</entry>
                    <entry>ISO Date</entry>
                    <entry>Only return tasks which are created on the given date.</entry>
                  </row>
                  <row>
                    <entry>createdBefore</entry>
                    <entry>No</entry>
                    <entry>ISO Date</entry>
                    <entry>Only return tasks which are created before the given date.</entry>
                  </row>
                  <row>
                    <entry>createdAfter</entry>
                    <entry>No</entry>
                    <entry>ISO Date</entry>
                    <entry>Only return tasks which are created after the given date.</entry>
                  </row>
                  <row>
                    <entry>dueOn</entry>
                    <entry>No</entry>
                    <entry>ISO Date</entry>
                    <entry>Only return tasks which are due on the given date.</entry>
                  </row>
                  <row>
                    <entry>dueBefore</entry>
                    <entry>No</entry>
                    <entry>ISO Date</entry>
                    <entry>Only return tasks which are due before the given date.</entry>
                  </row>
                  <row>
                    <entry>dueAfter</entry>
                    <entry>No</entry>
                    <entry>ISO Date</entry>
                    <entry>Only return tasks which are due after the given date.</entry>
                  </row>
                  <row>
                    <entry>withoutDueDate</entry>
                    <entry>No</entry>
                    <entry>boolean</entry>
                    <entry>Only return tasks which don't have a due date. The property is ignored if the value is <literal>false</literal>.</entry>
                  </row>
                  <row>
                    <entry>withoutDueDate</entry>
                    <entry>No</entry>
                    <entry>boolean</entry>
                    <entry>Only return tasks which don't have a due date. The property is ignored if the value is <literal>false</literal>.</entry>
                  </row>
                  <row>
                    <entry>withoutDueDate</entry>
                    <entry>No</entry>
                    <entry>boolean</entry>
                    <entry>Only return tasks which don't have a due date. The property is ignored if the value is <literal>false</literal>.</entry>
                  </row>
                  <row>
                    <entry>excludeSubTasks</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Only return tasks that are not a subtask of another task.</entry>
                  </row>
                  <row>
                    <entry>active</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.</entry>
                  </row>
                  <row>
                    <entry>includeTaskLocalVariables</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Indication to include task local variables in the result.</entry>
                  </row>
                  <row>
                    <entry>includeProcessVariables</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>Indication to include process variables in the result.</entry>
                  </row>
                  <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return tasks with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns tasks without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>List of tasks - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the tasks are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format or that 'delegationState' has an invalid value (other than 'pending' and 'resolved'). The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "data": [
    { 
      "assignee" : "kermit",
      "createTime" : "2013-04-17T10:17:43.902+0000",
      "delegationState" : "pending",
      "description" : "Task description",
      "dueDate" : "2013-04-17T10:17:43.902+0000",
      "execution" : "http://localhost:8182/runtime/executions/5",
      "id" : "8",
      "name" : "My task",
      "owner" : "owner",
      "parentTask" : "http://localhost:8182/runtime/tasks/9",
      "priority" : 50,
      "processDefinition" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "processInstance" : "http://localhost:8182/runtime/process-instances/5",
      "suspended" : false,
      "taskDefinitionKey" : "theTask",
      "url" : "http://localhost:8182/runtime/tasks/8",
      "tenantId" : null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
    </para>
    </section>
    
   <section>
      <title>Query for tasks</title>
        <para>
          <programlisting>POST query/tasks</programlisting>
        </para>
        <para>
          <emphasis role="bold">Request body:</emphasis>
          <programlisting>
{
  "name" : "My task",
  "description" : "The task description",
  
  ...
  
  "taskVariables" : [
    {
      "name" : "myVariable",
      "value" : 1234,
      "operation" : "equals",
      "type" : "long"
    }
  ],
    
    "processInstanceVariables" : [
      {
         ... 
      }
    ]
  ]
}</programlisting> 
        </para>
        <para>
          All supported JSON parameter fields allowed are exactly the same as the parameters found for <link linkend="restTasksGet">getting a collection of tasks</link>, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri's that are too long. On top of that, the query allows
          for filtering based on task and process variables. The <literal>taskVariables</literal> and <literal>processInstanceVariables</literal> are both json-arrays containing objects with the format <link linkend="restQueryVariable"> as described here.</link>
        </para>
        <para>
          <table>
              <title>Query for tasks - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates request was successful and the tasks are returned</entry>
                  </row>
                   <row>
                    <entry>400</entry>
                    <entry>Indicates a parameter was passed in the wrong format or that 'delegationState' has an invalid value (other than 'pending' and 'resolved'). The status-message contains additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "data": [
    { 
      "assignee" : "kermit",
      "createTime" : "2013-04-17T10:17:43.902+0000",
      "delegationState" : "pending",
      "description" : "Task description",
      "dueDate" : "2013-04-17T10:17:43.902+0000",
      "execution" : "http://localhost:8182/runtime/executions/5",
      "id" : "8",
      "name" : "My task",
      "owner" : "owner",
      "parentTask" : "http://localhost:8182/runtime/tasks/9",
      "priority" : 50,
      "processDefinition" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "processInstance" : "http://localhost:8182/runtime/process-instances/5",
      "suspended" : false,
      "taskDefinitionKey" : "theTask",
      "url" : "http://localhost:8182/runtime/tasks/8",
      "tenantId" : null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
    </para>
    </section>
      
  <section>
      <title>Update a task</title>
        <para>
          <programlisting>PUT runtime/tasks/{taskId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{ 
  "assignee" : "assignee",
  "delegationState" : "resolved",
  "description" : "New task description",
  "dueDate" : "2013-04-17T13:06:02.438+02:00",
  "name" : "New task name",
  "owner" : "owner",
  "parentTaskId" : "3",
  "priority" : 20
}</programlisting>
      All request values are optional. For example, you can only include the 'assignee' attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: <literal>{"dueDate" : null}</literal> will clear the duedate of the task).
       </para>
        <para>
          <table>
              <title>Update a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was updated.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the requested task was updated simultaneously.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>runtime/tasks/{taskId}</literal>.
      </para>
  </section>
   <section>
      <title>Task actions</title>
        <para>
          <programlisting>POST runtime/tasks/{taskId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Complete a task - Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "complete",
  "variables" : ...
}</programlisting>
       Completes the task. Optional variable array can be passed in using the <literal>variables</literal> property. More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the <literal>TaskService.completeTask(taskId, variables)</literal> invocation.
       </para>
       <para>
         <emphasis role="bold">Claim a task - Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "claim",
  "assignee" : "userWhoClaims"
}</programlisting>
      Claims the task by the given assignee. If the assignee is <literal>null</literal>, the task is assigned to no-one, claimable agian.
       </para>
       <para>
         <emphasis role="bold">Delegate a task - Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "delegate",
  "assignee" : "userToDelegateTo"
}</programlisting>
      Delegates the task to the given assignee. The assignee is required.
       </para>
       <para>
         <emphasis role="bold">Resolve a task - Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "resolve"
}</programlisting>
Resolves the task delegation. The task is assigned back to the task owner (if any).
       </para>
        <para>
          <table>
              <title>Task actions - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the action was executed.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>When the body contains an invalid value or when the assignee is missing when the action requires it.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the action cannot be performed due to a conflict. Either the task was updates simultaneously or the task was claimed by another user, in case of the '<literal>claim</literal>' action.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>runtime/tasks/{taskId}</literal>.
      </para>
  </section>
      <section>
      <title>Delete a task</title>
        <para>
          <programlisting>DELETE runtime/tasks/{taskId}?cascadeHistory={cascadeHistory}&amp;deleteReason={deleteReason}</programlisting>
        </para>
        <para>
            <table>
              <title>>Delete a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to delete.</entry>
                  </row>
                  <row>
                    <entry>cascadeHistory</entry>
                    <entry>False</entry>
                    <entry>Boolean</entry>
                    <entry>Whether or not to delete the HistoricTask instance when deleting the task (if applicable). If not provided, this value defaults to false.</entry>
                  </row>
                  <row>
                    <entry>deleteReason</entry>
                    <entry>False</entry>
                    <entry>String</entry>
                    <entry>Reason why the task is deleted. This value is ignored when <literal>cascadeHistory</literal> is true.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>>Delete a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the task was found and has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                  <row>
                    <entry>403</entry>
                    <entry>Indicates the requested task cannot be deleted because it's part of a workflow.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
   <section>
      <title>Get all variables for a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/variables?scope={scope}</programlisting>
        </para>
        <para>
            <table>
              <title>Get all variables for a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get variables for.</entry>
                  </row>
                  <row>
                    <entry>scope</entry>
                    <entry>False</entry>
                    <entry>String</entry>
                    <entry>Scope of variables to be returned. When '<literal>local</literal>', only task-local variables are returned. When '<literal>global</literal>', only variables from the task's parent execution-hierarchy are returned. When the parameter is omitted, both local and global variables are returned.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get all variables for a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the requested variables are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  { 
    "name" : "doubleTaskVar",
    "scope" : "local",
    "type" : "double",
    "value" : 99.99
  },
  {
    "name" : "stringProcVar",
    "scope" : "global",
    "type" : "string",
    "value" : "This is a ProcVariable"
  },
  
  ...
  
]</programlisting>

      The variables are returned as a JSON array. Full response description can be found in the general <link linkend="restVariables">REST-variables section</link>. 
    </para>
  </section>
  
   <section>
      <title>Get a variable from a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/variables/{variableName}?scope={scope}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a variable from a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get a variable for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the variable to get.</entry>
                  </row>
                  <row>
                    <entry>scope</entry>
                    <entry>False</entry>
                    <entry>String</entry>
                    <entry>Scope of variable to be returned. When '<literal>local</literal>', only task-local variable value is returned. When '<literal>global</literal>', only variable value from the task's parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get a variable from a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the requested variables are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the task doesn't have a variable with the given name (in the given scope). Status message provides additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "myTaskVariable",
  "scope" : "local",
  "type" : "string",
  "value" : "Hello my friend"
}</programlisting>
      Full response body description can be found in the general <link linkend="restVariables">REST-variables section</link>. 
    </para>
  </section>
  
  <section>
      <title>Get the binary data for a variable</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/variables/{variableName}/data?scope={scope}</programlisting>
        </para>
        <para>
            <table>
              <title>Get the binary data for a variable - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get a variable data for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the variable to get data for. Only variables of type <literal>binary</literal> and <literal>serializable</literal> can be used. If any other type of variable is used, a <literal>404</literal> is returned.</entry>
                  </row>
                  <row>
                    <entry>scope</entry>
                    <entry>False</entry>
                    <entry>String</entry>
                    <entry>Scope of variable to be returned. When '<literal>local</literal>', only task-local variable value is returned. When '<literal>global</literal>', only variable value from the task's parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get the binary data for a variable - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the requested variables are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the task doesn't have a variable with the given name (in the given scope) or the variable doesn't have a binary stream available. Status message provides additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Success response body:</emphasis>
      The response body contains the binary value of the variable. When the variable is of type <literal>binary</literal>, the content-type of the response is set to <literal>application/octet-stream</literal>, regardless of the content of the variable or the request accept-type header. In case of <literal>serializable</literal>, <literal>application/x-java-serialized-object</literal> is used as content-type. 
    </para>
  </section>
  
  <section>
      <title>Create new variables on a task</title>
        <para>
          <programlisting>POST runtime/tasks/{taskId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>Create new variables on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to create the new variable for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body for creating simple (non-binary) variables:</emphasis>
            <programlisting>
[
  { 
    "name" : "myTaskVariable",
    "scope" : "local",
    "type" : "string",
    "value" : "Hello my friend"
  },
  {
    ...
  }
]</programlisting>
The request body should be an array containing one or more JSON-objects representing the variables that should be created.
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable</para>
          </listitem>
          <listitem>
            <para><literal>scope</literal>: Scope of variable that is created. If omitted, <literal>local</literal> is assumed.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).</para>
          </listitem>
          <listitem>
            <para><literal>value</literal>: Variable value.</para>
          </listitem>
      </itemizedlist>
      More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>.
        </para>
        <para>
        <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  { 
    "name" : "myTaskVariable",
    "scope" : "local",
    "type" : "string",
    "value" : "Hello my friend"
  },
  {
    ...
  }
]</programlisting>
          <table>
              <title>Create new variables on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the variables were created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of a variable to create was missing or that an attempt is done to create a variable on a standalone task (without a process associated) with scope <literal>global</literal> or an empty array of variables was included in the request or request did not contain an array of variables. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the task already has a variable with the given name. Use the PUT method to update the task variable instead.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
   <section>
      <title>Create a new binary variable on a task</title>
        <para>
          <programlisting>POST runtime/tasks/{taskId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new binary variable on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to create the new variable for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>scope</literal>: Scope of variable that is created. If omitted, <literal>local</literal> is assumed.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is created. If omitted, <literal>binary</literal> is assumed and the binary data in the request will be stored as an array of bytes.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "binaryVariable",
  "scope" : "local",
  "type" : "binary",
  "value" : null,
  "valueUrl" : "http://.../runtime/tasks/123/variables/binaryVariable/data"
}</programlisting>
          <table>
              <title>Create a new binary variable on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the variable was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of the variable to create was missing or that an attempt is done to create a variable on a standalone task (without a process associated) with scope <literal>global</literal>. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the task already has a variable with the given name. Use the PUT method to update the task variable instead.</entry>
                  </row>
                  <row>
                    <entry>415</entry>
                    <entry>Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
   <section>
      <title>Update an existing variable on a task</title>
        <para>
          <programlisting>PUT runtime/tasks/{taskId}/variables/{variableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Update an existing variable on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to update the variable for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the variable to update.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body for updating simple (non-binary) variables:</emphasis>
            <programlisting>
{ 
  "name" : "myTaskVariable",
  "scope" : "local",
  "type" : "string",
  "value" : "Hello my friend"
}</programlisting>
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable</para>
          </listitem>
          <listitem>
            <para><literal>scope</literal>: Scope of variable that is updated. If omitted, <literal>local</literal> is assumed.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).</para>
          </listitem>
          <listitem>
            <para><literal>value</literal>: Variable value.</para>
          </listitem>
      </itemizedlist>
      More information about the variable format can be found in <link linkend="restVariables">the REST variables section</link>.
        </para>
        <para>
        <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "myTaskVariable",
  "scope" : "local",
  "type" : "string",
  "value" : "Hello my friend"
}</programlisting>
          <table>
              <title>Update an existing variable on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the variables was updated and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of a variable to update was missing or that an attempt is done to update a variable on a standalone task (without a process associated) with scope <literal>global</literal>. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the task doesn't have a variable with the given name in the given scope. Status message contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Updating a binary variable on a task</title>
        <para>
          <programlisting>PUT runtime/tasks/{taskId}/variables/{variableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Updating a binary variable on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to update the variable for.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the variable to update.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>scope</literal>: Scope of variable that is updated. If omitted, <literal>local</literal> is assumed.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of variable that is updated. If omitted, <literal>binary</literal> is assumed and the binary data in the request will be stored as an array of bytes.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "name" : "binaryVariable",
  "scope" : "local",
  "type" : "binary",
  "value" : null,
  "valueUrl" : "http://.../runtime/tasks/123/variables/binaryVariable/data"
}</programlisting>
          <table>
              <title>Updating a binary variable on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the variable was updated and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the name of the variable to update was missing or that an attempt is done to update a variable on a standalone task (without a process associated) with scope <literal>global</literal>. Status message provides additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the variable to update doesn't exist for the given task in the given scope.</entry>
                  </row>
                  <row>
                    <entry>415</entry>
                    <entry>Indicates the serializable data contains an object for which no class is present in the JVM running the Activiti engine and therefore cannot be deserialized.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Delete a variable on a task</title>
        <para>
          <programlisting>DELETE runtime/tasks/{taskId}/variables/{variableName}?scope={scope}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a variable on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task the variable to delete belongs to.</entry>
                  </row>
                  <row>
                    <entry>variableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the variable to delete.</entry>
                  </row>
                  <row>
                    <entry>scope</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Scope of variable to delete in. Can be either <literal>local</literal> or <literal>global</literal>. If omitted, <literal>local</literal> is assumed.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Delete a variable on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the task variable was found and has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the task doesn't have a variable with the given name. Status message contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Delete all local variables on a task</title>
        <para>
          <programlisting>DELETE runtime/tasks/{taskId}/variables</programlisting>
        </para>
        <para>
            <table>
              <title>Delete all local variables on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task the variable to delete belongs to.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Delete all local variables on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates all local task variables have been deleted. Response-body is intentionally empty.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get all identity links for a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/identitylinks</programlisting>
        </para>
        <para>
            <table>
              <title>Get all identity links for a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the identity links for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get all identity links for a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the requested identity links are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  { 
    "userId" : "kermit",
    "groupId" : null,
    "type" : "candidate",
    "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/users/kermit/candidate"
  },
  {
    "userId" : null,
    "groupId" : "sales",
    "type" : "candidate",
    "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/groups/sales/candidate"
  },
  
  ...
]</programlisting>
    </para>
  </section>
  
   <section>
      <title>Get all identitylinks for a task for either groups or users</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/identitylinks/users
GET runtime/tasks/{taskId}/identitylinks/groups</programlisting>
        </para>
        <para>
        Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        </para>
  </section>
  <section>
  <title>Get a single identity link on a task</title>
      <para>
        <programlisting>GET runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}</programlisting>
      </para>
      <para>
          <table>
            <title>Get all identitylinks for a task for either groups or users - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>taskId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the task .</entry>
                </row>
                <row>
                  <entry>family</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>Either <literal>groups</literal> or <literal>users</literal>, depending on what kind of identity is targetted.</entry>
                </row>
                <row>
                  <entry>identityId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the identity.</entry>
                </row>
                <row>
                  <entry>type</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The type of identity link.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Get all identitylinks for a task for either groups or users - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the task and identity link was found and returned.</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the requested task was not found or the task doesn't have the requested identityLink. The status contains additional information about this error.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "userId" : null,
  "groupId" : "sales",
  "type" : "candidate",
  "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/groups/sales/candidate"
}</programlisting>
  </para>
</section>
    
  <section>
    <title>Create an identity link on a task</title>
      <para>
        <programlisting>POST runtime/tasks/{taskId}/identitylinks</programlisting>
      </para>
      <para>
          <table>
            <title>Create an identity link on a task - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>taskId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the task .</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
       <emphasis role="bold">Request body (user):</emphasis>
            <programlisting>
{
  "userId" : "kermit",
  "type" : "candidate",
}</programlisting>
    </para>
    <para>
       <emphasis role="bold">Request body (group):</emphasis>
            <programlisting>
{
  "groupId" : "sales",
  "type" : "candidate",
}</programlisting>
    </para>
      <para>
        <table>
            <title>Create an identity link on a task - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>201</entry>
                  <entry>Indicates the task was found and the identity link was created.</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the requested task was not found or the task doesn't have the requested identityLink. The status contains additional information about this error.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "userId" : null,
  "groupId" : "sales",
  "type" : "candidate",
  "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/identitylinks/groups/sales/candidate"
}</programlisting>
    </para>
    </section>
    
    
     <section>
      <title>Delete an identity link on a task</title>
         <para>
        <programlisting>DELETE runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}</programlisting>
      </para>
      <para>
          <table>
            <title>Delete an identity link on a task - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>taskId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the task.</entry>
                </row>
                <row>
                  <entry>family</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>Either <literal>groups</literal> or <literal>users</literal>, depending on what kind of identity is targetted.</entry>
                </row>
                <row>
                  <entry>identityId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the identity.</entry>
                </row>
                <row>
                  <entry>type</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The type of identity link.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <table>
              <title>Delete an identity link on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the task and identity link were found and the link has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the task doesn't have the requested identityLink. The status contains additional information about this error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Create a new comment on a task</title>
        <para>
          <programlisting>POST runtime/tasks/{taskId}/comments</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new comment on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to create the comment for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{ 
  "message" : "This is a comment on the task."
}</programlisting>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "id" : "123",
  "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/comments/123",
  "message" : "This is a comment on the task.",
  "author" : "kermit"
}</programlisting>
          <table>
              <title>Create a new comment on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the comment was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the comment is missing from the request.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get all comments on a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/comments</programlisting>
        </para>
        <para>
            <table>
              <title>Get all comments on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the comments for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  { 
    "id" : "123",
    "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/comments/123",
    "message" : "This is a comment on the task.",
    "author" : "kermit"
  },
  { 
    "id" : "456",
    "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/comments/456",
    "message" : "This is another comment on the task.",
    "author" : "gonzo"
  }
]</programlisting>
          <table>
              <title>Get all comments on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the comments are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get a comment on a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/comments/{commentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a comment on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the comment for.</entry>
                  </row>
                  <row>
                    <entry>commentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the comment.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "id" : "123",
  "url" : "http://localhost:8081/activiti-rest/service/runtime/tasks/100/comments/123",
  "message" : "This is a comment on the task.",
  "author" : "kermit"
}</programlisting>
          <table>
              <title>Get a comment on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task and comment were found and the comment is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the tasks doesn't have a comment with the given ID.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Delete a comment on a task</title>
        <para>
          <programlisting>DELETE runtime/tasks/{taskId}/comments/{commentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a comment on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to delete the comment for.</entry>
                  </row>
                  <row>
                    <entry>commentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the comment.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <table>
            <title>Delete a comment on a task - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>204</entry>
                  <entry>Indicates the task and comment were found and the comment is deleted. Response body is left empty intentionally.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested task was not found or the tasks doesn't have a comment with the given ID.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
  </section>
    <section>
      <title>Get all events for a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/events</programlisting>
        </para>
        <para>
            <table>
              <title>Get all events for a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the events for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  { 
    "action" : "AddUserLink",
    "id" : "4",
    "message" : [ "gonzo", "contributor" ],
    "taskUrl" : "http://localhost:8182/runtime/tasks/2",
    "time" : "2013-05-17T11:50:50.000+0000",
    "url" : "http://localhost:8182/runtime/tasks/2/events/4",
    "userId" : null
  },
  
  ...

]</programlisting>
          <table>
              <title>Get all events for a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the events are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get an event on a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/events/{eventId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get an event on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the event for.</entry>
                  </row>
                  <row>
                    <entry>eventId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the event.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "action" : "AddUserLink",
  "id" : "4",
  "message" : [ "gonzo", "contributor" ],
  "taskUrl" : "http://localhost:8182/runtime/tasks/2",
  "time" : "2013-05-17T11:50:50.000+0000",
  "url" : "http://localhost:8182/runtime/tasks/2/events/4",
  "userId" : null
}</programlisting>
          <table>
              <title>Get an event on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task and event were found and the event is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the tasks doesn't have an event with the given ID.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  
    <section>
      <title>Create a new attachment on a task, containing a link to an external resource</title>
        <para>
          <programlisting>POST runtime/tasks/{taskId}/attachments</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new attachment on a task, containing a link to an external resource - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to create the attachment for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{ 
  "name":"Simple attachment",
  "description":"Simple attachment description",
  "type":"simpleType",
  "externalUrl":"http://activiti.org"
}</programlisting>
Only the attachment name is required to create a new attachment.
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "id":"3",
  "url":"http://localhost:8182/runtime/tasks/2/attachments/3",
  "name":"Simple attachment",
  "description":"Simple attachment description",
  "type":"simpleType",
  "taskUrl":"http://localhost:8182/runtime/tasks/2",
  "processInstanceUrl":null,
  "externalUrl":"http://activiti.org",
  "contentUrl":null
}</programlisting>
          <table>
              <title>Create a new attachment on a task, containing a link to an external resource - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the attachment was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the attachment name is missing from the request.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
  <title>Create a new attachment on a task, with an attached file</title>
        <para>
          <programlisting>POST runtime/tasks/{taskId}/attachments</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new attachment on a task, with an attached file - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to create the attachment for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:
      <itemizedlist>
          <listitem>
            <para><literal>name</literal>: Required name of the variable.</para>
          </listitem>
          <listitem>
            <para><literal>description</literal>: Description of the attachment, optional.</para>
          </listitem>
          <listitem>
            <para><literal>type</literal>: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.</para>
          </listitem>
      </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
      "id":"5",
      "url":"http://localhost:8182/runtime/tasks/2/attachments/5",
      "name":"Binary attachment",
      "description":"Binary attachment description",
      "type":"binaryType",
      "taskUrl":"http://localhost:8182/runtime/tasks/2",
      "processInstanceUrl":null,
      "externalUrl":null,
      "contentUrl":"http://localhost:8182/runtime/tasks/2/attachments/5/content"
   }</programlisting>
          <table>
              <title>Create a new attachment on a task, with an attached file - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the attachment was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the attachment name is missing from the request or no file was present in the request. The error-message contains additional information.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get all attachments on a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/attachments</programlisting>
        </para>
        <para>
            <table>
              <title>Get all attachments on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the attachments for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  {
    "id":"3",
    "url":"http://localhost:8182/runtime/tasks/2/attachments/3",
    "name":"Simple attachment",
    "description":"Simple attachment description",
    "type":"simpleType",
    "taskUrl":"http://localhost:8182/runtime/tasks/2",
    "processInstanceUrl":null,
    "externalUrl":"http://activiti.org",
    "contentUrl":null
  },
  {
    "id":"5",
    "url":"http://localhost:8182/runtime/tasks/2/attachments/5",
    "name":"Binary attachment",
    "description":"Binary attachment description",
    "type":"binaryType",
    "taskUrl":"http://localhost:8182/runtime/tasks/2",
    "processInstanceUrl":null,
    "externalUrl":null,
    "contentUrl":"http://localhost:8182/runtime/tasks/2/attachments/5/content"
  }
]</programlisting>
          <table>
              <title>Get all attachments on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task was found and the attachments are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get an attachment on a task</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/attachments/{attachmentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get an attachment on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get the attachment for.</entry>
                  </row>
                  <row>
                    <entry>attachmentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the attachment.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
  {
    "id":"5",
    "url":"http://localhost:8182/runtime/tasks/2/attachments/5",
    "name":"Binary attachment",
    "description":"Binary attachment description",
    "type":"binaryType",
    "taskUrl":"http://localhost:8182/runtime/tasks/2",
    "processInstanceUrl":null,
    "externalUrl":null,
    "contentUrl":"http://localhost:8182/runtime/tasks/2/attachments/5/content"
  }</programlisting>
  <itemizedlist>
    <listitem>
      <para>
        <literal>externalUrl - contentUrl:</literal>In case the attachment is a link to an external resource, the <literal>externalUrl</literal> contains the URL to the external content. If the attachment content is present in the
        Activiti engine, the <literal>contentUrl</literal> will contain an URL where the binary content can be streamed from.
      </para>
    </listitem>
    <listitem>
      <para>
        <literal>type:</literal>Can be any arbitrary value. When a valid formatted media-type (eg. application/xml, text/plain) is included, the binary content HTTP response content-type will be set the the given value.
      </para>
    </listitem>
  </itemizedlist>
   
        </para>
        <para>
          <table>
              <title>Get an attachment on a task - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task and attachment were found and the attachment is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the tasks doesn't have a attachment with the given ID.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get the content for an attachment</title>
        <para>
          <programlisting>GET runtime/tasks/{taskId}/attachment/{attachmentId}/content</programlisting>
        </para>
        <para>
            <table>
              <title>Get the content for an attachment - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to get a variable data for.</entry>
                  </row>
                  <row>
                    <entry>attachmentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the attachment, a <literal>404</literal> is returned when the attachment points to an external URL rather than content attached in Activiti.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get the content for an attachment - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the task and attachment was found and the requested content is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found or the task doesn't have an attachment with the given id or the attachment doesn't have a binary stream available. Status message provides additional information.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
       <emphasis role="bold">Success response body:</emphasis>
      The response body contains the binary content. By default, the content-type of the response is set to <literal>application/octet-stream</literal> unless the attachment type contains a valid Content-type. 
    </para>
  </section>
  <section>
      <title>Delete an attachment on a task</title>
        <para>
          <programlisting>DELETE runtime/tasks/{taskId}/attachments/{attachmentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete an attachment on a task - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>taskId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the task to delete the attachment for.</entry>
                  </row>
                  <row>
                    <entry>attachmentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the attachment.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <table>
            <title>Delete an attachment on a task - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>204</entry>
                  <entry>Indicates the task and attachment were found and the attachment is deleted. Response body is left empty intentionally.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested task was not found or the tasks doesn't have a attachment with the given ID.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
  </section>
</section>
<section>
  <title>History</title>
  <section>
    <title>Get a historic process instance</title>
    <para>
      <programlisting>GET history/historic-process-instances/{processInstanceId}</programlisting>
    </para>
    <para>
      <table>
          <title>Get a historic process instance - Response codes</title>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Response code</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>200</entry>
                <entry>Indicates that the historic process instances could be found.</entry>
              </row>
              <row>
                <entry>404</entry>
                <entry>Indicates that the historic process instances could not be found.</entry>
              </row>
            </tbody>
         </tgroup>
      </table>
    </para>
    <para>
      <emphasis role="bold">Success response body:</emphasis>
        <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "businessKey" : "myKey",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "startUserId" : "kermit",
      "startActivityId" : "startEvent",
      "endActivityId" : "endEvent",
      "deleteReason" : null,
      "superProcessInstanceId" : "3",
      "url" : "http://localhost:8182/history/historic-process-instances/5",
      "variables": null,
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section id="restHistoricProcessInstancesGet">
    <title>List of historic process instances</title>
      <para>
        <programlisting>GET history/historic-process-instances</programlisting>
      </para>
      <para>
          <table>
            <title>List of historic process instances - URL parameters</title>
            <tgroup cols='4'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>processInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An id of the historic process instance.</entry>
                </row>
                <row>
                  <entry>processDefinitionKey</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition key of the historic process instance.</entry>
                </row>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition id of the historic process instance.</entry>
                </row>
                <row>
                  <entry>businessKey</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The business key of the historic process instance.</entry>
                </row>
                <row>
                  <entry>involvedUser</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An involved user of the historic process instance.</entry>
                </row>
                <row>
                  <entry>finished</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication if the historic process instance is finished.</entry>
                </row>
                <row>
                  <entry>superProcessInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An optional parent process id of the historic process instance.</entry>
                </row>
                <row>
                  <entry>excludeSubprocesses</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Return only historic process instances which aren't sub processes.</entry>
                </row>
                <row>
                  <entry>finishedAfter</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic process instances that were finished after this date.</entry>
                </row>
                <row>
                  <entry>finishedBefore</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic process instances that were finished before this date.</entry>
                </row>
                <row>
                  <entry>startedAfter</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic process instances that were started after this date.</entry>
                </row>
                <row>
                  <entry>startedBefore</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic process instances that were started before this date.</entry>
                </row>
                <row>
                  <entry>startedBy</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>Return only historic process instances that were started by this user.</entry>
                </row>
                <row>
                  <entry>includeProcessVariables</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>An indication if the historic process instance variables should be returned as well.</entry>
                </row>
                <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return instances with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return instances with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns instances without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                <row>
                  <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>List of historic process instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that historic process instances could be queried.</entry>
                </row>
                <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "businessKey" : "myKey",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "startUserId" : "kermit",
      "startActivityId" : "startEvent",
      "endActivityId" : "endEvent",
      "deleteReason" : null,
      "superProcessInstanceId" : "3",
      "url" : "http://localhost:8182/history/historic-process-instances/5",
      "variables": [
        {
          "name": "test",
          "variableScope": "local",
          "value": "myTest"
        }
      ],
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Query for historic process instances</title>
      <para>
        <programlisting>POST query/historic-process-instances</programlisting>
      </para>
      <para>
        <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{
  "processDefinitionId" : "oneTaskProcess%3A1%3A4",
  ...
  
  "variables" : [
    {
      "name" : "myVariable",
      "value" : 1234,
      "operation" : "equals",
      "type" : "long"
    }
  ]
}</programlisting> 
      </para>
      <para>
        All supported JSON parameter fields allowed are exactly the same as the parameters found for <link linkend="restHistoricProcessInstancesGet">getting a collection of historic process instances</link>, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri's that are too long. On top of that, the query allows
        for filtering based on process variables. The <literal>variables</literal> property is a json-array containing objects with the format <link linkend="restQueryVariable"> as described here.</link>
      </para>
      <para>
        <table>
            <title>Query for historic process instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the tasks are returned</entry>
                </row>
                 <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "businessKey" : "myKey",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "startUserId" : "kermit",
      "startActivityId" : "startEvent",
      "endActivityId" : "endEvent",
      "deleteReason" : null,
      "superProcessInstanceId" : "3",
      "url" : "http://localhost:8182/history/historic-process-instances/5",
      "variables": [
        {
          "name": "test",
          "variableScope": "local",
          "value": "myTest"
        }
      ],
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Delete a historic process instance</title>
      <para>
        <programlisting>DELETE history/historic-process-instances/{processInstanceId}</programlisting>
      </para>
      <para>
        <table>
            <title>Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that the historic process instance was deleted.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates that the historic process instance could not be found.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    </section>
    <section>
      <title>Get the identity links of a historic process instance</title>
      <para>
        <programlisting>GET history/historic-process-instance/{processInstanceId}/identitylinks</programlisting>
      </para>
      <para>
        <table>
            <title>Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the identity links are returned</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the process instance could not be found.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
[
 {
  "type" : "participant",
  "userId" : "kermit",
  "groupId" : null,
  "taskId" : null,
  "taskUrl" : null,
  "processInstanceId" : "5",
  "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/5"
 }
]</programlisting>
      </para>
    </section>
    <section>
      <title>Get the binary data for a historic process instance variable</title>
      <para>
        <programlisting>GET history/historic-process-instances/{processInstanceId}/variables/{variableName}/data</programlisting>
      </para>
      <para>
        <table>
            <title>Get the binary data for a historic process instance variable - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the process instance was found and the requested variable data is returned.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested process instance was not found or the process instance doesn't have a variable with the given name or the variable doesn't have a binary stream available. Status message provides additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
      <emphasis role="bold">Success response body:</emphasis>
      The response body contains the binary value of the variable. When the variable is of type <literal>binary</literal>, the content-type of the response is set to <literal>application/octet-stream</literal>, regardless of the content of the variable or the request accept-type header. In case of <literal>serializable</literal>, <literal>application/x-java-serialized-object</literal> is used as content-type. 
    </para>
  </section>
   <section>
      <title>Create a new comment on a historic process instance</title>
        <para>
          <programlisting>POST history/historic-process-instances/{processInstanceId}/comments</programlisting>
        </para>
        <para>
            <table>
              <title>Create a new comment on a historic process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to create the comment for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
       <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{ 
  "message" : "This is a comment."
}</programlisting>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "id" : "123",
  "url" : "http://localhost:8081/activiti-rest/history/historic-process-instances/100/comments/123",
  "message" : "This is a comment.",
  "author" : "kermit"
}</programlisting>
          <table>
              <title>Create a new comment on a historic process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the comment was created and the result is returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the comment is missing from the request.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested historic process instance was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
   <section>
      <title>Get all comments on a historic process instance</title>
        <para>
          <programlisting>GET history/historic-process-instances/{processInstanceId}/comments</programlisting>
        </para>
        <para>
            <table>
              <title>Get all comments on a process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the process instance to get the comments for.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
  { 
    "id" : "123",
    "url" : "http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/123",
    "message" : "This is a comment",
    "author" : "kermit"
  },
  { 
    "id" : "456",
    "url" : "http://localhost:8081/activiti-rest/service/history/historic-process-instances/100/comments/456",
    "message" : "This is another comment.",
    "author" : "gonzo"
  }
]</programlisting>
          <table>
              <title>Get all comments on a process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the process instance was found and the comments are returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested task was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
   <section>
      <title>Get a comment on a historic process instance</title>
        <para>
          <programlisting>GET history/historic-process-instances/{processInstanceId}/comments/{commentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a comment on a historic process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the historic process instance to get the comment for.</entry>
                  </row>
                  <row>
                    <entry>commentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the comment.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{ 
  "id" : "123",
  "url" : "http://localhost:8081/activiti-rest/history/historic-process-instances/100/comments/123",
  "message" : "This is a comment.",
  "author" : "kermit"
}</programlisting>
          <table>
              <title>Get a comment on a historic process instance - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the historic process instance and comment were found and the comment is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested historic process instance was not found or the historic process instance doesn't have a comment with the given ID.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Delete a comment on a historic process instance</title>
        <para>
          <programlisting>DELETE history/historic-process-instances/{processInstanceId}/comments/{commentId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a comment on a historic process instance - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the historic process instance to delete the comment for.</entry>
                  </row>
                  <row>
                    <entry>commentId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the comment.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <table>
            <title>Delete a comment on a historic process instance - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>204</entry>
                  <entry>Indicates the historic process instance and comment were found and the comment is deleted. Response body is left empty intentionally.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested task was not found or the historic process instance doesn't have a comment with the given ID.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
  </section>
    <section>
    <title>Get a single historic task instance</title>
    <para>
      <programlisting>GET history/historic-task-instances/{taskId}</programlisting>
    </para>
    <para>
      <table>
          <title>Get a single historic task instance - Response codes</title>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Response code</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>200</entry>
                <entry>Indicates that the historic task instances could be found.</entry>
              </row>
              <row>
                <entry>404</entry>
                <entry>Indicates that the historic task instances could not be found.</entry>
              </row>
            </tbody>
         </tgroup>
      </table>
    </para>
    <para>
      <emphasis role="bold">Success response body:</emphasis>
        <programlisting>
{
  "id" : "5",
  "processDefinitionId" : "oneTaskProcess%3A1%3A4",
  "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
  "processInstanceId" : "3",
  "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/3",
  "executionId" : "4",
  "name" : "My task name",
  "description" : "My task description",
  "deleteReason" : null,
  "owner" : "kermit",
  "assignee" : "fozzie",
  "startTime" : "2013-04-17T10:17:43.902+0000",
  "endTime" : "2013-04-18T14:06:32.715+0000",
  "durationInMillis" : 86400056,
  "workTimeInMillis" : 234890,
  "claimTime" : "2013-04-18T11:01:54.715+0000",
  "taskDefinitionKey" : "taskKey",
  "formKey" : null,
  "priority" : 50,
  "dueDate" : "2013-04-20T12:11:13.134+0000",
  "parentTaskId" : null,
  "url" : "http://localhost:8182/history/historic-task-instances/5",
  "variables": null,
  "tenantId":null
}</programlisting>
      </para>
    </section>
    <section id="restHistoricTaskInstancesGet">
      <title>Get historic task instances</title>
      <para>
        <programlisting>GET history/historic-task-instances</programlisting>
      </para>
      <para>
          <table>
            <title>Get historic task instances - URL parameters</title>
            <tgroup cols='4'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>taskId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An id of the historic task instance.</entry>
                </row>
                <row>
                  <entry>processInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process instance id of the historic task instance.</entry>
                </row>
                <row>
                  <entry>processDefinitionKey</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition key of the historic task instance.</entry>
                </row>
                <row>
                  <entry>processDefinitionKeyLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition key of the historic task instance, which matches the given value.</entry>
                </row>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition id of the historic task instance.</entry>
                </row>
                <row>
                  <entry>processDefinitionName</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition name of the historic task instance.</entry>
                </row>
                 <row>
                  <entry>processDefinitionNameLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition name of the historic task instance, which matches the given value.</entry>
                </row>
                <row>
                  <entry>processBusinessKey</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process instance business key of the historic task instance.</entry>
                </row>
                <row>
                  <entry>processBusinessKeyLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process instance business key of the historic task instance that matches the given value.</entry>
                </row>
                <row>
                  <entry>executionId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The execution id of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskDefinitionKey</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task definition key for tasks part of a process</entry>
                </row>
                <row>
                  <entry>taskName</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task name of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskNameLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task name with 'like' operator for the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskDescription</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task description of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskDescriptionLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task description with 'like' operator for the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskDefinitionKey</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task identifier from the process definition for the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskDeleteReason</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task delete reason of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskDeleteReasonLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task delete reason with 'like' operator for the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskAssignee</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The assignee of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskAssigneeLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The assignee with 'like' operator for the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskOwner</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The owner of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskOwnerLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The owner with 'like' operator for the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskInvolvedUser</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An involved user of the historic task instance.</entry>
                </row>
                <row>
                  <entry>taskPriority</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The priority of the historic task instance.</entry>
                </row>
                <row>
                  <entry>finished</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication if the historic task instance is finished.</entry>
                </row>
                <row>
                  <entry>processFinished</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication if the process instance of the historic task instance is finished.</entry>
                </row>
                <row>
                  <entry>parentTaskId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An optional parent task id of the historic task instance.</entry>
                </row>
                <row>
                  <entry>dueDate</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that have a due date equal this date.</entry>
                </row>
                <row>
                  <entry>dueDateAfter</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that have a due date after this date.</entry>
                </row>
                <row>
                  <entry>dueDateBefore</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that have a due date before this date.</entry>
                </row>
                <row>
                  <entry>withoutDueDate</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Return only historic task instances that have no due-date. When <literal>false</literal> is provided as value, this parameter is ignored.</entry>
                </row>
                <row>
                  <entry>taskCompletedOn</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that have been completed on this date.</entry>
                </row>
                <row>
                  <entry>taskCompletedAfter</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that have been completed after this date.</entry>
                </row>
                <row>
                  <entry>taskCompletedBefore</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that have been completed before this date.</entry>
                </row>
                <row>
                  <entry>taskCreatedOn</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that were created on this date.</entry>
                </row>
                <row>
                  <entry>taskCreatedBefore</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that were created before this date.</entry>
                </row>
                <row>
                  <entry>taskCreatedAfter</entry>
                  <entry>No</entry>
                  <entry>Date</entry>
                  <entry>Return only historic task instances that were created after this date.</entry>
                </row>
                <row>
                  <entry>includeTaskLocalVariables</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>An indication if the historic task instance local variables should be returned as well.</entry>
                </row>
                <row>
                  <entry>includeProcessVariables</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>An indication if the historic task instance global variables should be returned as well.</entry>
                </row>
                <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return historic task instances with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return historic task instances with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns historic task instances without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                <row>
                  <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Get historic task instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that historic process instances could be queried.</entry>
                </row>
                <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "processInstanceId" : "3",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/3",
      "executionId" : "4",
      "name" : "My task name",
      "description" : "My task description",
      "deleteReason" : null,
      "owner" : "kermit",
      "assignee" : "fozzie",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "workTimeInMillis" : 234890,
      "claimTime" : "2013-04-18T11:01:54.715+0000",
      "taskDefinitionKey" : "taskKey",
      "formKey" : null,
      "priority" : 50,
      "dueDate" : "2013-04-20T12:11:13.134+0000",
      "parentTaskId" : null,
      "url" : "http://localhost:8182/history/historic-task-instances/5",
      "taskVariables": [
        {
          "name": "test",
          "variableScope": "local",
          "value": "myTest"
        }
      ],
      "processVariables": [
        {
          "name": "processTest",
          "variableScope": "global",
          "value": "myProcessTest"
        }
      ],
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Query for historic task instances</title>
      <para>
        <programlisting>POST query/historic-task-instances</programlisting>
      </para>
      <para>
        <emphasis role="bold">Query for historic task instances - Request body:</emphasis>
        <programlisting>
{
  "processDefinitionId" : "oneTaskProcess%3A1%3A4",
  ...
  
  "variables" : [
    {
      "name" : "myVariable",
      "value" : 1234,
      "operation" : "equals",
      "type" : "long"
    }
  ]
}</programlisting> 
      </para>
      <para>
        All supported JSON parameter fields allowed are exactly the same as the parameters found for <link linkend="restHistoricTaskInstancesGet">getting a collection of historic task instances</link>, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri's that are too long. On top of that, the query allows
        for filtering based on process variables. The <literal>taskVariables</literal> and <literal>processVariables</literal> properties are json-arrays containing objects with the format <link linkend="restQueryVariable"> as described here.</link>
      </para>
      <para>
        <table>
            <title>Query for historic task instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the tasks are returned</entry>
                </row>
                 <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "processInstanceId" : "3",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/3",
      "executionId" : "4",
      "name" : "My task name",
      "description" : "My task description",
      "deleteReason" : null,
      "owner" : "kermit",
      "assignee" : "fozzie",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "workTimeInMillis" : 234890,
      "claimTime" : "2013-04-18T11:01:54.715+0000",
      "taskDefinitionKey" : "taskKey",
      "formKey" : null,
      "priority" : 50,
      "dueDate" : "2013-04-20T12:11:13.134+0000",
      "parentTaskId" : null,
      "url" : "http://localhost:8182/history/historic-task-instances/5",
      "taskVariables": [
        {
          "name": "test",
          "variableScope": "local",
          "value": "myTest"
        }
      ],
      "processVariables": [
        {
          "name": "processTest",
          "variableScope": "global",
          "value": "myProcessTest"
        }
      ],
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Delete a historic task instance</title>
      <para>
        <programlisting>DELETE history/historic-task-instances/{taskId}</programlisting>
      </para>
      <para>
        <table>
            <title>Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that the historic task instance was deleted.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates that the historic task instance could not be found.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    </section>
    <section>
      <title>Get the identity links of a historic task instance</title>
      <para>
        <programlisting>GET history/historic-task-instance/{taskId}/identitylinks</programlisting>
      </para>
      <para>
        <table>
            <title>Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the identity links are returned</entry>
                </row>
                 <row>
                  <entry>404</entry>
                  <entry>Indicates the task instance could not be found.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
[
 {
  "type" : "assignee",
  "userId" : "kermit",
  "groupId" : null,
  "taskId" : "6",
  "taskUrl" : "http://localhost:8182/history/historic-task-instances/5",
  "processInstanceId" : null,
  "processInstanceUrl" : null
 }
]</programlisting>
      </para>
    </section>
    <section>
      <title>Get the binary data for a historic task instance variable</title>
      <para>
        <programlisting>GET history/historic-task-instances/{taskId}/variables/{variableName}/data</programlisting>
      </para>
      <para>
        <table>
            <title>Get the binary data for a historic task instance variable - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the task instance was found and the requested variable data is returned.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested task instance was not found or the process instance doesn't have a variable with the given name or the variable doesn't have a binary stream available. Status message provides additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
        The response body contains the binary value of the variable. When the variable is of type <literal>binary</literal>, the content-type of the response is set to <literal>application/octet-stream</literal>, regardless of the content of the variable or the request accept-type header. In case of <literal>serializable</literal>, <literal>application/x-java-serialized-object</literal> is used as content-type. 
      </para>
    </section>
    <section id="restHistoricActivityInstancesGet">
      <title>Get historic activity instances</title>
      <para>
        <programlisting>GET history/historic-activity-instances</programlisting>
      </para>
      <para>
          <table>
            <title>Get historic activity instances - URL parameters</title>
            <tgroup cols='4'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>activityId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An id of the activity instance.</entry>
                </row>
                <row>
                  <entry>activityInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>An id of the historic activity instance.</entry>
                </row>
                <row>
                  <entry>activityName</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The name of the historic activity instance.</entry>
                </row>
                <row>
                  <entry>activityType</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The element type of the historic activity instance.</entry>
                </row>
                <row>
                  <entry>executionId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The execution id of the historic activity instance.</entry>
                </row>
                <row>
                  <entry>finished</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication if the historic activity instance is finished.</entry>
                </row>
                <row>
                  <entry>taskAssignee</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The assignee of the historic activity instance.</entry>
                </row>
                <row>
                  <entry>processInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process instance id of the historic activity instance.</entry>
                </row>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process definition id of the historic activity instance.</entry>
                </row>
                <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return instances with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return instances with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns instances without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                <row>
                  <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Get historic activity instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that historic activity instances could be queried.</entry>
                </row>
                <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "activityId" : "4",
      "activityName" : "My user task",
      "activityType" : "userTask",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "processInstanceId" : "3",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/3",
      "executionId" : "4",
      "taskId" : "4",
      "calledProcessInstanceId" : null,
      "assignee" : "fozzie",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Query for historic activity instances</title>
      <para>
        <programlisting>POST query/historic-activity-instances</programlisting>
      </para>
      <para>
        <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{
  "processDefinitionId" : "oneTaskProcess%3A1%3A4"
}</programlisting> 
      </para>
      <para>
        All supported JSON parameter fields allowed are exactly the same as the parameters found for <link linkend="restHistoricTaskInstancesGet">getting a collection of historic task instances</link>, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri's that are too long.
      </para>
      <para>
        <table>
            <title>Query for historic activity instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the activities are returned</entry>
                </row>
                 <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "5",
      "activityId" : "4",
      "activityName" : "My user task",
      "activityType" : "userTask",
      "processDefinitionId" : "oneTaskProcess%3A1%3A4",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definitions/oneTaskProcess%3A1%3A4",
      "processInstanceId" : "3",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/3",
      "executionId" : "4",
      "taskId" : "4",
      "calledProcessInstanceId" : null,
      "assignee" : "fozzie",
      "startTime" : "2013-04-17T10:17:43.902+0000",
      "endTime" : "2013-04-18T14:06:32.715+0000",
      "durationInMillis" : 86400056,
      "tenantId":null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section id="restHistoricVariableInstancesGet">
      <title>List of historic variable instances</title>
      <para>
        <programlisting>GET history/historic-variable-instances</programlisting>
      </para>
      <para>
          <table>
            <title>List of historic variable instances - URL parameters</title>
            <tgroup cols='4'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>processInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process instance id of the historic variable instance.</entry>
                </row>
                <row>
                  <entry>taskId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task id of the historic variable instance.</entry>
                </row>
                <row>
                  <entry>excludeTaskVariables</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication to exclude the task variables from the result.</entry>
                </row>
                <row>
                  <entry>variableName</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The variable name of the historic variable instance.</entry>
                </row>
                <row>
                  <entry>variableNameLike</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The variable name using the 'like' operator for the historic variable instance.</entry>
                </row>
                <row>
                  <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>List of historic variable instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that historic variable instances could be queried.</entry>
                </row>
                <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "14",
      "processInstanceId" : "5",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/5",
      "taskId" : "6",
      "variable" : {
        "name" : "myVariable",
        "variableScope", "global",
        "value" : "test"
      }
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Query for historic variable instances</title>
      <para>
        <programlisting>POST query/historic-variable-instances</programlisting>
      </para>
      <para>
        <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{
  "processDefinitionId" : "oneTaskProcess%3A1%3A4",
  ...
  
  "variables" : [
    {
      "name" : "myVariable",
      "value" : 1234,
      "operation" : "equals",
      "type" : "long"
    }
  ]
}</programlisting> 
      </para>
      <para>
        All supported JSON parameter fields allowed are exactly the same as the parameters found for <link linkend="restHistoricVariableInstancesGet">getting a collection of historic process instances</link>, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri's that are too long. On top of that, the query allows
        for filtering based on process variables. The <literal>variables</literal> property is a json-array containing objects with the format <link linkend="restQueryVariable"> as described here.</link>
      </para>
      <para>
        <table>
            <title>Query for historic variable instances - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the tasks are returned</entry>
                </row>
                 <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "14",
      "processInstanceId" : "5",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/5",
      "taskId" : "6",
      "variable" : {
        "name" : "myVariable",
        "variableScope", "global",
        "value" : "test"
      }
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Get the binary data for a historic task instance variable</title>
      <para>
        <programlisting>GET history/historic-variable-instances/{varInstanceId}/data</programlisting>
      </para>
      <para>
        <table>
            <title>Get the binary data for a historic task instance variable - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the variable instance was found and the requested variable data is returned.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested variable instance was not found or the variable instance doesn't have a variable with the given name or the variable doesn't have a binary stream available. Status message provides additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
      <emphasis role="bold">Success response body:</emphasis>
      The response body contains the binary value of the variable. When the variable is of type <literal>binary</literal>, the content-type of the response is set to <literal>application/octet-stream</literal>, regardless of the content of the variable or the request accept-type header. In case of <literal>serializable</literal>, <literal>application/x-java-serialized-object</literal> is used as content-type. 
    </para>
  </section>
    <section id="restHistoricDetailGet">
    <title>Get historic detail</title>
      <para>
        <programlisting>GET history/historic-detail</programlisting>
      </para>
      <para>
          <table>
            <title>Get historic detail - URL parameters</title>
            <tgroup cols='4'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>id</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The id of the historic detail.</entry>
                </row>
                <row>
                  <entry>processInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The process instance id of the historic detail.</entry>
                </row>
                <row>
                  <entry>executionId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The execution id of the historic detail.</entry>
                </row>
                <row>
                  <entry>activityInstanceId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The activity instance id of the historic detail.</entry>
                </row>
                <row>
                  <entry>taskId</entry>
                  <entry>No</entry>
                  <entry>String</entry>
                  <entry>The task id of the historic detail.</entry>
                </row>
                <row>
                  <entry>selectOnlyFormProperties</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication to only return form properties in the result.</entry>
                </row>
                <row>
                  <entry>selectOnlyVariableUpdates</entry>
                  <entry>No</entry>
                  <entry>Boolean</entry>
                  <entry>Indication to only return variable updates in the result.</entry>
                </row>
                <row>
                  <entry namest="c1" nameend="c4"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Get historic detail - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that historic detail could be queried.</entry>
                </row>
                <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "26",
      "processInstanceId" : "5",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/5",
      "executionId" : "6",
      "activityInstanceId", "10",
      "taskId" : "6",
      "taskUrl" : "http://localhost:8182/history/historic-task-instances/6",
      "time" : "2013-04-17T10:17:43.902+0000",
      "detailType" : "variableUpdate",
      "revision" : 2,
      "variable" : {
        "name" : "myVariable",
        "variableScope", "global",
        "value" : "test"
      },
      "propertyId", null,
      "propertyValue", null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Query for historic details</title>
      <para>
        <programlisting>POST query/historic-detail</programlisting>
      </para>
      <para>
        <emphasis role="bold">Request body:</emphasis>
        <programlisting>
{
  "processInstanceId" : "5",
}</programlisting> 
      </para>
      <para>
        All supported JSON parameter fields allowed are exactly the same as the parameters found for <link linkend="restHistoricDetailGet">getting a collection of historic process instances</link>, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri's that are too long.
      </para>
      <para>
        <table>
            <title>Query for historic details - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the historic details are returned</entry>
                </row>
                 <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "id" : "26",
      "processInstanceId" : "5",
      "processInstanceUrl" : "http://localhost:8182/history/historic-process-instances/5",
      "executionId" : "6",
      "activityInstanceId", "10",
      "taskId" : "6",
      "taskUrl" : "http://localhost:8182/history/historic-task-instances/6",
      "time" : "2013-04-17T10:17:43.902+0000",
      "detailType" : "variableUpdate",
      "revision" : 2,
      "variable" : {
        "name" : "myVariable",
        "variableScope", "global",
        "value" : "test"
      },
      "propertyId", null,
      "propertyValue", null
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Get the binary data for a historic detail variable</title>
      <para>
        <programlisting>GET history/historic-detail/{detailId}/data</programlisting>
      </para>
      <para>
        <table>
            <title>Get the binary data for a historic detail variable - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the historic detail instance was found and the requested variable data is returned.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates the requested historic detail instance was not found or the historic detail instance doesn't have a variable with the given name or the variable doesn't have a binary stream available. Status message provides additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
        The response body contains the binary value of the variable. When the variable is of type <literal>binary</literal>, the content-type of the response is set to <literal>application/octet-stream</literal>, regardless of the content of the variable or the request accept-type header. In case of <literal>serializable</literal>, <literal>application/x-java-serialized-object</literal> is used as content-type. 
      </para>
    </section>
  </section>
  <section>
    <title>Forms</title>
    <section>
      <title>Get form data</title>
      <para>
        <programlisting>GET form/form-data</programlisting>
      </para>
      <para>
          <table>
            <title>Get form data - URL parameters</title>
            <tgroup cols='4'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>taskId</entry>
                  <entry>Yes (if no processDefinitionId)</entry>
                  <entry>String</entry>
                  <entry>The task id corresponding to the form data that needs to be retrieved.</entry>
                </row>
                <row>
                  <entry>processDefinitionId</entry>
                  <entry>Yes (if no taskId)</entry>
                  <entry>String</entry>
                  <entry>The process definition id corresponding to the start event form data that needs to be retrieved.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <table>
            <title>Get form data - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates that form data could be queried.</entry>
                </row>
                <row>
                  <entry>404</entry>
                  <entry>Indicates that form data could not be found.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body:</emphasis>
          <programlisting>
{
  "data": [
    { 
      "formKey" : null,
      "deploymentId" : "2",
      "processDefinitionId" : "3",
      "processDefinitionUrl" : "http://localhost:8182/repository/process-definition/3",
      "taskId" : "6",
      "taskUrl" : "http://localhost:8182/runtime/task/6",
      "formProperties" : [
        {
          "id" : "room",
          "name" : "Room",
          "type" : "string",
          "value" : null,
          "readable" : true,
          "writable" : true,
          "required" : true,
          "datePattern" : null,
          "enumValues" : [
            {
              "id" : "normal",
              "name" : "Normal bed"
            },
            {
              "id" : "kingsize",
              "name" : "Kingsize bed"
            },
          ]
        }
      ]
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "name",
  "order": "asc",
  "size": 1
}</programlisting>
      </para>
    </section>
    <section>
      <title>Submit task form data</title>
      <para>
        <programlisting>POST form/form-data</programlisting>
      </para>
      <para>
        <emphasis role="bold">Request body for task form:</emphasis>
        <programlisting>
{
  "taskId" : "5",
  "properties" : [
    {
      "id" : "room",
      "value" : "normal"
    }
  ]
}</programlisting> 
      </para>
      <para>
        <emphasis role="bold">Request body for start event form:</emphasis>
        <programlisting>
{
  "processDefinitionId" : "5",
  "businessKey" : "myKey", (optional)
  "properties" : [
    {
      "id" : "room",
      "value" : "normal"
    }
  ]
}</programlisting> 
      </para>
      <para>
        <table>
            <title>Submit task form data - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates request was successful and the form data was submitted</entry>
                </row>
                 <row>
                  <entry>400</entry>
                  <entry>Indicates an parameter was passed in the wrong format. The status-message contains additional information.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
      <para>
        <emphasis role="bold">Success response body for start event form data (no response for task form data):</emphasis>
          <programlisting>
{
  "id" : "5",
  "url" : "http://localhost:8182/history/historic-process-instances/5",
  "businessKey" : "myKey",
  "suspended", false,
  "processDefinitionId" : "3",
  "processDefinitionUrl" : "http://localhost:8182/repository/process-definition/3",
  "activityId" : "myTask"
}</programlisting>
      </para>
    </section>
  </section>
  <section>
    <title>Database tables</title>
    <section>
      <title>List of tables</title>
      <para>
        <programlisting>GET management/tables</programlisting>
      </para>
      <para>
        <table>
            <title>List of tables - Response codes</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Response code</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>200</entry>
                  <entry>Indicates the request was successful.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
[
   {
      "name":"ACT_RU_VARIABLE",
      "url":"http://localhost:8182/management/tables/ACT_RU_VARIABLE",
      "count":4528
   },
   {
      "name":"ACT_RU_EVENT_SUBSCR",
      "url":"http://localhost:8182/management/tables/ACT_RU_EVENT_SUBSCR",
      "count":3
   },
   
   ...
   
]</programlisting>
    </para>
    </section>
    
    <section>
      <title>Get a single table</title>
        <para>
          <programlisting>GET management/tables/{tableName}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a single table - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>tableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the table to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
      "name":"ACT_RE_PROCDEF",
      "url":"http://localhost:8182/management/tables/ACT_RE_PROCDEF",
      "count":60
}</programlisting>
          <table>
              <title>Get a single table - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the table exists and the table count is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested table does not exist.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
    <section>
      <title>Get column info for a single table</title>
        <para>
          <programlisting>GET management/tables/{tableName}/columns</programlisting>
        </para>
        <para>
            <table>
              <title>Get column info for a single table - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>tableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the table to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "tableName":"ACT_RU_VARIABLE",
   "columnNames":[
      "ID_",
      "REV_",
      "TYPE_",
      "NAME_",
      ...
   ],
   "columnTypes":[
      "VARCHAR",
      "INTEGER",
      "VARCHAR",
      "VARCHAR",
      ...
   ]
}</programlisting>
          <table>
              <title>Get column info for a single table - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the table exists and the table column info is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested table does not exist.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Get row data for a single table</title>
        <para>
          <programlisting>GET management/tables/{tableName}/data</programlisting>
        </para>
        <para>
            <table>
              <title>Get row data for a single table - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>tableName</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The name of the table to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
            <table>
              <title>Get row data for a single table - URL query parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>start</entry>
                    <entry>No</entry>
                    <entry>Integer</entry>
                    <entry>Index of the first row to fetch. Defaults to 0.</entry>
                  </row>
                  <row>
                    <entry>size</entry>
                    <entry>No</entry>
                    <entry>Integer</entry>
                    <entry>Number of rows to fetch, starting from <literal>start</literal>. Defaults to 10.</entry>
                  </row>
                  <row>
                    <entry>orderAscendingColumn</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Name of the column to sort the resulting rows on, ascending.</entry>
                  </row>
                  <row>
                    <entry>orderDescendingColumn</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Name of the column to sort the resulting rows on, descending.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
  "total":3,
   "start":0,
   "sort":null,
   "order":null,
   "size":3,
   
   "data":[
      {
         "TASK_ID_":"2",
         "NAME_":"var1",
         "REV_":1,
         "TEXT_":"123",
         "LONG_":123,
         "ID_":"3",
         "TYPE_":"integer"
      },
      ...
   ]
 
}</programlisting>
          <table>
              <title>Get row data for a single table - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the table exists and the table row data is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested table does not exist.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
    
</section>


<section>
    <title>Engine</title>
    <section>
      <title>Get engine properties</title>
        <para>
          <programlisting>GET management/properties</programlisting>
        </para>
        <para>
        Returns a read-only view of the properties used internally in the engine.
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "next.dbid":"101",
   "schema.history":"create(5.15)",
   "schema.version":"5.15"
}</programlisting>
          <table>
              <title>Get engine properties - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the properties are returned.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get engine info</title>
        <para>
          <programlisting>GET management/engine</programlisting>
        </para>
        <para>
        Returns a read-only view of the engine that is used in this REST-service.
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "name":"default",
   "version":"5.15",
   "resourceUrl":"file://activiti/activiti.cfg.xml",
   "exception":null
}</programlisting>
          <table>
              <title>Get engine info - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the engine info is returned.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
</section>
<section>
  <title>Runtime</title>
  <section>
      <title>Signal event received</title>
        <para>
          <programlisting>POST runtime/signals</programlisting>
        </para>
        <para>
        Notifies the engine that a signal event has been received, not explicitally related to a specific execution. 
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{ 
  "signalName": "My Signal",
  "tenantId" : "execute",
  "async": true,
  "variables": [
      {"name": "testVar", "value": "This is a string"},
      ...
  ]
}</programlisting>
        <table>
              <title>Signal event received - JSON Body parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Required</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>signalName</entry>
                    <entry>Name of the signal</entry>
                    <entry>Yes</entry>
                  </row>
                  <row>
                    <entry>tenantId</entry>
                    <entry>ID of the tenant that the signal event should be processed in</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>async</entry>
                    <entry>If <literal>true</literal>, handling of the signal will happen asynchronously. Return code will be <literal>202 - Accepted</literal> to indicate the request is accepted but not yet executed. If <literal>false</literal>, 
                    handling the signal will be done immedialty and result (<literal>200 - OK</literal>) will only return after this completed successfully. Defaults to <literal>false</literal> if omitted.</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>variables</entry>
                    <entry>Array of variables (in the general variables format) to use as payload to pass along with the signal. Cannot be used in case <literal>async</literal> is set to <literal>true</literal>, this will result in an error.</entry>
                    <entry>No</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
          <table>
              <title>Signal event received - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicated signal has been processed and no errors occured.</entry>
                  </row>
                  <row>
                    <entry>202</entry>
                    <entry>Indicated signal processing is queued as a job, ready to be executed.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Signal not processed. The signal name is missing or variables are used toghether with async, which is not allowed. Response body contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
 </section>
 
 
<section>
    <title>Jobs</title>
    <section>
      <title>Get a single job</title>
        <para>
          <programlisting>GET management/jobs/{jobId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a single job - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>jobId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the job to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"8",
   "url":"http://localhost:8182/management/jobs/8",
   "processInstanceId":"5",
   "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
   "processDefinitionId":"timerProcess:1:4",
   "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/timerProcess%3A1%3A4",
   "executionId":"7",
   "executionUrl":"http://localhost:8182/runtime/executions/7",
   "retries":3,
   "exceptionMessage":null,
   "dueDate":"2013-06-04T22:05:05.474+0000",
   "tenantId":null
}</programlisting>
          <table>
              <title>Get a single job - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the job exists and is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested job does not exist.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Delete a job</title>
        <para>
          <programlisting>DELETE management/jobs/{jobId}</programlisting>
        </para>
        <para>
            <table>
              <title>Delete a job - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>jobId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the job to delete.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Delete a job - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the job was found and has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                   <row>
                    <entry>404</entry>
                    <entry>Indicates the requested job was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Execute a single job</title>
        <para>
          <programlisting>POST management/jobs/{jobId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{ 
  "action" : "execute"
}</programlisting>
        <table>
              <title>Execute a single job - JSON Body parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Required</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>action</entry>
                    <entry>Action to perform. Only <literal>execute</literal> is supported.</entry>
                    <entry>Yes</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Execute a single job - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the job was executed. Response-body is intentionally empty.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested job was not found.</entry>
                  </row>
                  <row>
                    <entry>500</entry>
                    <entry>Indicates the an exception occurred while executing the job. The status-description contains additional detail about the error. The full error-stacktrace can be fetched later on if needed.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
 </section>
 
 <section>
      <title>Get the exception stacktrace for a job</title>
        <para>
          <programlisting>GET management/jobs/{jobId}/exception-stacktrace</programlisting>
        </para>
        <para>
        <table>
              <title>Get the exception stacktrace for a job - URL parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Required</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>jobId</entry>
                    <entry>Id of the job to get the stacktrace for.</entry>
                    <entry>Yes</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <table>
              <title>Get the exception stacktrace for a job - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of <literal>text/plain</literal>.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested job was not found or the job doesn't have an exception stacktrace. Status-description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
 </section>
 
 <section>
      <title>Get a list of jobs</title>
        <para>
          <programlisting>GET management/jobs</programlisting>
        </para>
        <para>
        <table>
              <title>Get a list of jobs - URL query parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Type</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>id</entry>
                    <entry>Only return job with the given id</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>processInstanceId</entry>
                    <entry>Only return jobs part of a process with the given id</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>executionId</entry>
                    <entry>Only return jobs part of an execution with the given id</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>processDefinitionId</entry>
                    <entry>Only return jobs with the given process definition id</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>withRetriesLeft</entry>
                    <entry>If <literal>true</literal>, only return jobs with retries left. If false, this parameter is ignored.</entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry>executable</entry>
                    <entry>If <literal>true</literal>, only return jobs which are executable. If false, this parameter is ignored.</entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry>timersOnly</entry>
                    <entry>If <literal>true</literal>, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with <literal>'messagesOnly'</literal>.</entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry>messagesOnly</entry>
                    <entry>If <literal>true</literal>, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with <literal>'timersOnly'</literal></entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry>withException</entry>
                    <entry>If <literal>true</literal>, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</entry>
                    <entry>Boolean</entry>
                  </row>
                  <row>
                    <entry>dueBefore</entry>
                    <entry>Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</entry>
                    <entry>Date</entry>
                  </row>
                  <row>
                    <entry>dueAfter</entry>
                    <entry>Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</entry>
                    <entry>Date</entry>
                  </row>
                  <row>
                    <entry>exceptionMessage</entry>
                    <entry>Only return jobs with the given exception message</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>tenantId</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return jobs with the given tenantId.</entry>
                  </row>
                 <row>
                    <entry>tenantIdLike</entry>
                    <entry>No</entry>
                    <entry>String</entry>
                    <entry>Only return jobs with a tenantId like the given value.</entry>
                  </row>
                  <row>
                    <entry>withoutTenantId</entry>
                    <entry>No</entry>
                    <entry>Boolean</entry>
                    <entry>If <literal>true</literal>, only returns jobs without a tenantId set. If <literal>false</literal>, the <literal>withoutTenantId</literal> parameter is ignored.</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>Field to sort results on, should be one of <literal>id</literal>, <literal>dueDate</literal>, <literal>executionId</literal>, <literal>processInstanceId</literal>, <literal>retries</literal> or <literal>tenantId</literal>.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c3"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "id":"13",
         "url":"http://localhost:8182/management/jobs/13",
         "processInstanceId":"5",
         "processInstanceUrl":"http://localhost:8182/runtime/process-instances/5",
         "processDefinitionId":"timerProcess:1:4",
         "processDefinitionUrl":"http://localhost:8182/repository/process-definitions/timerProcess%3A1%3A4",
         "executionId":"12",
         "executionUrl":"http://localhost:8182/runtime/executions/12",
         "retries":0,
         "exceptionMessage":"Can't find scripting engine for 'unexistinglanguage'",
         "dueDate":"2013-06-07T10:00:24.653+0000",
         "tenantId":null
      },
      
      ...
   ],
   "total":2,
   "start":0,
   "sort":"id",
   "order":"asc",
   "size":2
}</programlisting>
          <table>
              <title>Get a list of jobs - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the requested jobs were returned.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates an illegal value has been used in a url query parameter or the both <literal>'messagesOnly'</literal> and <literal>'timersOnly'</literal> are used as parameters. Status description contains additional details about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
 </section>
    
</section>

<section>
  <title>Users</title>
  
  <section>
      <title>Get a single user</title>
        <para>
          <programlisting>GET identity/users/{userId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a single user - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>userId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the user to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"testuser",
   "firstName":"Fred",
   "lastName":"McDonald",
   "url":"http://localhost:8182/identity/users/testuser",
   "email":"no-reply@activiti.org"
}</programlisting>
          <table>
              <title>Get a single user - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user exists and is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user does not exist.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Get a list of users</title>
        <para>
          <programlisting>GET identity/users</programlisting>
        </para>
        <para>
        <table>
              <title>Get a list of users - URL query parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Type</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>id</entry>
                    <entry>Only return user with the given id</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>firstName</entry>
                    <entry>Only return users with the given firstname</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>lastName</entry>
                    <entry>Only return users with the given lastname</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>email</entry>
                    <entry>Only return users with the given email</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>firstNameLike</entry>
                    <entry>Only return userswith a firstname like the given value. Use <literal>%</literal> as wildcard-character.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>lastNameLike</entry>
                    <entry>Only return users with a lastname like the given value. Use <literal>%</literal> as wildcard-character.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>emailLike</entry>
                    <entry>Only return users with an email like the given value. Use <literal>%</literal> as wildcard-character.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>memberOfGroup</entry>
                    <entry>Only return users which are a member of the given group.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>potentialStarter</entry>
                    <entry>Only return users which are potential starters for a process-definition with the given id.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>Field to sort results on, should be one of <literal>id</literal>, <literal>firstName</literal>, <literal>lastname</literal> or <literal>email</literal>.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c3"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
      {
         "id":"anotherUser",
         "firstName":"Tijs",
         "lastName":"Barrez",
         "url":"http://localhost:8182/identity/users/anotherUser",
         "email":"no-reply@alfresco.org"
      },
      {
         "id":"kermit",
         "firstName":"Kermit",
         "lastName":"the Frog",
         "url":"http://localhost:8182/identity/users/kermit",
         "email":null
      },
      {
         "id":"testuser",
         "firstName":"Fred",
         "lastName":"McDonald",
         "url":"http://localhost:8182/identity/users/testuser",
         "email":"no-reply@activiti.org"
      }
   ],
   "total":3,
   "start":0,
   "sort":"id",
   "order":"asc",
   "size":3
}</programlisting>
          <table>
              <title>Get a list of users - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the requested users were returned.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
 </section>
 
  <section>
      <title>Update a user</title>
        <para>
          <programlisting>PUT identity/users/{userId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{
  "firstName":"Tijs",
  "lastName":"Barrez",
  "email":"no-reply@alfresco.org",
  "password":"pass123"
}</programlisting>
      All request values are optional. For example, you can only include the 'firstName' attribute in the request body JSON-object, only updating the firstName of the user, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the user-value will be updated to null. Example: <literal>{"firstName" : null}</literal> will clear the firstName of the user).
       </para>
        <para>
          <table>
              <title>Update a user - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user was updated.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the requested user was updated simultaneously.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>identity/users/{userId}</literal>.
      </para>
  </section>
  
   <section>
      <title>Create a user</title>
        <para>
          <programlisting>POST identity/users</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{
  "id":"tijs",
  "firstName":"Tijs",
  "lastName":"Barrez",
  "email":"no-reply@alfresco.org",
  "password":"pass123"
}</programlisting>
       </para>
        <para>
          <table>
              <title>Create a user - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the user was created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the id of the user was missing.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>identity/users/{userId}</literal>.
      </para>
  </section>
  
  <section>
      <title>Delete a user</title>
         <para>
        <programlisting>DELETE identity/users/{userId}</programlisting>
      </para>
      <para>
          <table>
            <title>Delete a user - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to delete.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <table>
              <title>Delete a user - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the user was found and  has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
      <title>Get a user's picture</title>
         <para>
        <programlisting>GET identity/users/{userId}/picture</programlisting>
      </para>
      <para>
          <table>
            <title>Get a user's picture - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to get the picture for.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <emphasis role="bold">Response Body:</emphasis>
          The response body contains the raw picture data, representing the user's picture. The Content-type of the response corresponds to the mimeType that was set when creating the picture.
          <table>
              <title>Get a user's picture - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user was found and has a picture, which is returned in the body.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found or the user does not have a profile picture. Status-description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Updating a user's picture</title>
         <para>
        <programlisting>GET identity/users/{userId}/picture</programlisting>
      </para>
      <para>
          <table>
            <title>Updating a user's picture - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to get the picture for.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
       <emphasis role="bold">Request body:</emphasis>
           The request should be of type <literal>multipart/form-data</literal>. There should be a single file-part included with the binary value of the picture. On top of that, the following additional form-fields can be present:
        <itemizedlist>
            <listitem>
              <para><literal>mimeType</literal>: Optional mime-type for the uploaded picture. If omitted, the default of <literal>image/jpeg</literal> is used as a mime-type for the picture.</para>
            </listitem>
        </itemizedlist>
        </para>
        <para>
          <table>
              <title>Updating a user's picture - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user was found and the picture has been updated. The response-body is left empty intentionally.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>List a user's info</title>
         <para>
        <programlisting>PUT identity/users/{userId}/info</programlisting>
      </para>
      <para>
          <table>
            <title>List a user's info - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to get the info for.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <emphasis role="bold">Response Body:</emphasis>
<programlisting>
[
   {
      "key":"key1",
      "url":"http://localhost:8182/identity/users/testuser/info/key1"
   },
   {
      "key":"key2",
      "url":"http://localhost:8182/identity/users/testuser/info/key2"
   }
]</programlisting>
          <table>
              <title>List a user's info - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user was found and list of info (key and url) is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Get a user's info</title>
         <para>
        <programlisting>GET identity/users/{userId}/info/{key}</programlisting>
      </para>
      <para>
          <table>
            <title>Get a user's info - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to get the info for.</entry>
                </row>
                <row>
                  <entry>key</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The key of the user info to get.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <emphasis role="bold">Response Body:</emphasis>
<programlisting>
{
   "key":"key1",
   "value":"Value 1",
   "url":"http://localhost:8182/identity/users/testuser/info/key1"
}</programlisting>
          <table>
              <title>Get a user's info - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user was found and the user has info for the given key..</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found or the user doesn't have info for the given key. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Update a user's info</title>
         <para>
        <programlisting>PUT identity/users/{userId}/info/{key}</programlisting>
      </para>
      <para>
          <table>
            <title>Update a user's info - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to update the info for.</entry>
                </row>
                <row>
                  <entry>key</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The key of the user info to update.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
       <para>
          <emphasis role="bold">Request Body:</emphasis>
<programlisting>
{
   "value":"The updated value"
}</programlisting>
      </para>
        <para>
          <emphasis role="bold">Response Body:</emphasis>
<programlisting>
{
   "key":"key1",
   "value":"The updated value",
   "url":"http://localhost:8182/identity/users/testuser/info/key1"
}</programlisting>
          <table>
              <title>Update a user's info - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the user was found and the info has been updated.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the value was missing from the request body.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found or the user doesn't have info for the given key. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
   <section>
      <title>Create a new user's info entry</title>
         <para>
        <programlisting>POST identity/users/{userId}/info</programlisting>
      </para>
      <para>
          <table>
            <title>Create a new user's info entry - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to create the info for.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
       <para>
          <emphasis role="bold">Request Body:</emphasis>
<programlisting>
{
   "key":"key1",
   "value":"The value"
}</programlisting>
      </para>
        <para>
          <emphasis role="bold">Response Body:</emphasis>
<programlisting>
{
   "key":"key1",
   "value":"The value",
   "url":"http://localhost:8182/identity/users/testuser/info/key1"
}</programlisting>
          <table>
              <title>Create a new user's info entry - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the user was found and the info has been created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the key or value was missing from the request body. Status description contains additional information about the error.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates there is already an info-entry with the given key for the user, update the resource instance (<literal>PUT</literal>).</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Delete a user's info</title>
         <para>
        <programlisting>DELETE identity/users/{userId}/info/{key}</programlisting>
      </para>
      <para>
          <table>
            <title>Delete a user's info - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to delete the info for.</entry>
                </row>
                <row>
                  <entry>key</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The key of the user info to delete.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <table>
              <title>Delete a user's info - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the user was found and the info for the given key has been deleted. Response body is left empty intentionally.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested user was not found or the user doesn't have info for the given key. Status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
</section>
<section>
  <title>Groups</title>
   <section>
      <title>Get a single group</title>
        <para>
          <programlisting>GET identity/groups/{groupId}</programlisting>
        </para>
        <para>
            <table>
              <title>Get a single group - URL parameters</title>
              <tgroup cols='3'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Required</entry>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>groupId</entry>
                    <entry>Yes</entry>
                    <entry>String</entry>
                    <entry>The id of the group to get.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "id":"testgroup",
   "url":"http://localhost:8182/identity/groups/testgroup",
   "name":"Test group",
   "type":"Test type"
}</programlisting>
          <table>
              <title>Get a single group - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the group exists and is returned.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested group does not exist.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  
  <section>
      <title>Get a list of groups</title>
        <para>
          <programlisting>GET identity/groups</programlisting>
        </para>
        <para>
        <table>
              <title>Get a list of groups - URL query parameters</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Description</entry>
                    <entry>Type</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>id</entry>
                    <entry>Only return group with the given id</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>name</entry>
                    <entry>Only return groups with the given name</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>type</entry>
                    <entry>Only return groups with the given type</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>nameLike</entry>
                    <entry>Only return groups with a name like the given value. Use <literal>%</literal> as wildcard-character.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>member</entry>
                    <entry>Only return groups which have a member with the given username.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>potentialStarter</entry>
                    <entry>Only return groups which members are potential starters for a process-definition with the given id.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry>sort</entry>
                    <entry>Field to sort results on, should be one of <literal>id</literal>, <literal>name</literal> or <literal>type</literal>.</entry>
                    <entry>String</entry>
                  </row>
                  <row>
                    <entry namest="c1" nameend="c3"><para>The general <link linkend="restPagingAndSort">paging and sorting query-parameters</link> can be used for this URL.</para></entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
         <para>
          <emphasis role="bold">Success response body:</emphasis>
            <programlisting>
{
   "data":[
     {
        "id":"testgroup",
        "url":"http://localhost:8182/identity/groups/testgroup",
        "name":"Test group",
        "type":"Test type"
     },

      ...
   ],
   "total":3,
   "start":0,
   "sort":"id",
   "order":"asc",
   "size":3
}</programlisting>
          <table>
              <title>Get a list of groups - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the requested groups were returned.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
 </section>
 
  <section>
      <title>Update a group</title>
        <para>
          <programlisting>PUT identity/groups/{groupId}</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{
   "name":"Test group",
   "type":"Test type"
}</programlisting>
      All request values are optional. For example, you can only include the 'name' attribute in the request body JSON-object, only updating the name of the group, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the group-value will be updated to null.
       </para>
        <para>
          <table>
              <title>Update a group - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>200</entry>
                    <entry>Indicates the group was updated.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested group was not found.</entry>
                  </row>
                  <row>
                    <entry>409</entry>
                    <entry>Indicates the requested group was updated simultaneously.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>identity/groups/{groupId}</literal>.
      </para>
  </section>
  
   <section>
      <title>Create a group</title>
        <para>
          <programlisting>POST identity/groups</programlisting>
        </para>
        <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{
   "id":"testgroup",
   "name":"Test group",
   "type":"Test type"
}</programlisting>
       </para>
        <para>
          <table>
              <title>Create a group - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the group was created.</entry>
                  </row>
                  <row>
                    <entry>400</entry>
                    <entry>Indicates the id of the group was missing.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
    <para>
       <emphasis role="bold">Success response body:</emphasis> see response for <literal>identity/groups/{groupId}</literal>.
      </para>
  </section>
  
  <section>
      <title>Delete a group</title>
         <para>
        <programlisting>DELETE identity/groups/{groupId}</programlisting>
      </para>
      <para>
          <table>
            <title>Delete a group - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>groupId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the group to delete.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <table>
              <title>Delete a group - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the group was found and  has been deleted. Response-body is intentionally empty.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested group was not found.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
  </section>
  <section>
    <title>Get members in a group</title>
    <para>There is no GET allowed on <literal>identity/groups/members</literal>. Use the <literal>identity/users?memberOfGroup=sales</literal> URL to get all users that are part of a particular group.</para>
  </section>
  <section>
      <title>Add a member to a group</title>
         <para>
        <programlisting>POST identity/groups/{groupId}/members</programlisting>
      </para>
      <para>
          <table>
            <title>Add a member to a group - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>groupId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the group to add a member to.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
       <para>
         <emphasis role="bold">Body JSON:</emphasis>
           <programlisting>
{
   "userId":"kermit"
}</programlisting>
       </para>
        <para>
          <table>
              <title>Add a member to a group - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>201</entry>
                    <entry>Indicates the group was found and the member has been added.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the userId was not included in the request body.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested group was not found.</entry>
                  </row>
                   <row>
                    <entry>409</entry>
                    <entry>Indicates the requested user is already a member of the group.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
         <emphasis role="bold">Response Body:</emphasis>
           <programlisting>
{
   "userId":"kermit",
   "groupId":"sales",
    "url":"http://localhost:8182/identity/groups/sales/members/kermit"
}</programlisting>
       </para>
  </section>
  <section>
      <title>Delete a member from a group</title>
         <para>
        <programlisting>DELETE identity/groups/{groupId}/members/{userId}</programlisting>
      </para>
      <para>
          <table>
            <title>Delete a member from a group - URL parameters</title>
            <tgroup cols='3'>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Required</entry>
                  <entry>Value</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>groupId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the group to remove a member from.</entry>
                </row>
                <row>
                  <entry>userId</entry>
                  <entry>Yes</entry>
                  <entry>String</entry>
                  <entry>The id of the user to remove.</entry>
                </row>
              </tbody>
           </tgroup>
        </table>
      </para>
        <para>
          <table>
              <title>Delete a member from a group - Response codes</title>
              <tgroup cols='2'>
                <thead>
                  <row>
                    <entry>Response code</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>204</entry>
                    <entry>Indicates the group was found and the member has been deleted. The response body is left empty intentionally.</entry>
                  </row>
                  <row>
                    <entry>404</entry>
                    <entry>Indicates the requested group was not found or that the user is not a member of the group. The status description contains additional information about the error.</entry>
                  </row>
                </tbody>
             </tgroup>
          </table>
        </para>
        <para>
         <emphasis role="bold">Response Body:</emphasis>
           <programlisting>
{
   "userId":"kermit",
   "groupId":"sales",
    "url":"http://localhost:8182/identity/groups/sales/members/kermit"
}</programlisting>
       </para>
  </section>
  
</section>

<!-- Legacy -->
  <section>

    <title>Legacy REST - General Usage</title>
    <para><emphasis role="bold">The following section contains documentation of the Legacy REST-api, which has been deprecated since the 5.15 release. The REST-urls will not be removed in the future but will not be maintained. Any future additions and improvements will be done to the new REST API.</emphasis></para>
    <para>
      Activiti includes a REST API to the Activiti Engine that can be installed by deploying the activiti-rest.war file to a servlet container like Apache Tomcat.
      By default the Activiti Engine will connect to a standalone H2 database. You can change the database settings in the db.properties file in the WEB-INF/classes folder.
      The REST API uses JSON format (http://www.json.org) and is built upon the Restlet (http://www.restlet.org).
    </para>

    <para>
      Each REST API call has its individual authorization level and you must be logged in as a user to invoke a REST API
      call (except for the /login service). Authentication is done using Basic HTTP Authentication, so if you logged in as
      an admin (i.e. kermit) you should be able to perform all calls as described below.
    </para>

    <para>
      The API follows normal REST API conventions using GET for read operations, POST for creating objects, PUT for updating and
      performing operations on already created objects and finally DELETE for deleting objects. When performing a call
      that affects multiple objects POST is used on all such operations for consistency and making sure that an unlimited
      number of objects may be used. The reason for using POST is that the HTTP DELETE method doesn't implicitly allow
      request bodies and therefore, a call using DELETE, in theory, could get it's request body stripped out by a proxy.
      So to be certain this doesn't happen we use POST, even when PUT could have been used to update multiple objects,
      for consistency.
    </para>

    <para>
      All rest calls use a content type of "application/json" (except for upload requests which uses "multipart/form-data").
    </para>

    <para>
      The base URL for invoking a REST call is http://localhost:8080/activiti-rest/service/.
      So for example to list the process definitions in the engine point your browser to:
      http://localhost:8080/activiti-rest/service/process-definitions
    </para>

    <para>
      You may also use curl to run queries against the REST API, e.g.:
      <programlisting>curl --basic --user kermit:kermit http://localhost:8080/activiti-rest/service/tasks?assignee=kermit</programlisting>
    </para>

    <para>
      Please look below to see what REST API calls that currently are available.
      Please consider the "API" sections as a "one line hint" to what functionality of the core API that is used to implement the REST API call.
    </para>

  </section>

  <section>

    <!-- REPOSITORY -->

    <title>Repository</title>

    <section>
      <title>Upload Deployment</title>
      <para>
        Uploads and installs a deployment of format .bpmn20.xml, .bpmn, .bar or .zip using normal "html form upload"
        (enctype=multipart/form-data) in other words not a json-request. The deployment information is returned as a response if the deploy action succeeds.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Request: </emphasis>
            <literal>POST /deployment</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">API: </emphasis>
            <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().createDeployment().name(fileName).deploymentBuilder.deploy()</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Response:</emphasis>
            <programlisting>
{
  "id": "10",
  "name": "activiti-examples.bar",
  "deploymentTime": "2010-10-13T14:54:26.750+02:00",
  "category": "examples"
}</programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Get Deployments</title>
      <para>
        Returns a paginated list deployments that can be sorted by "id", "name" or "deploymentTime".
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Request: </emphasis>
            <literal>GET /deployments?start={start=0}&amp;size={size=10}&amp;sort={sort=id}&amp;order={order=asc}</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">API: </emphasis>
            <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().createDeploymentQuery().listPage()</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Response:</emphasis>
            <programlisting>
{
  "data": [
    {
      "id": "10",
      "name": "activiti-examples.bar",
      "deploymentTime": "2010-10-13T14:54:26.750+02:00",
      "category": "examples"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    
    <section>
      <title>Get Deployment Resources</title>
      <para>
        Returns all resources from the deployment.
        Example: /deployment/10/resources
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Request: </emphasis>
            <literal>GET /deployment/{deploymentId}/resources</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">API: </emphasis>
            <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().getDeploymentResourceNames(deploymentId)</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Response:</emphasis>
            <programlisting>
{
  "id": "10",
  "name": "activiti-examples.bar",
  "deploymentTime": "2010-10-13T14:54:26.750+02:00",
  "category": "examples",
  "resources": ["resource1", "resource2"]
}</programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Get Deployment Resource</title>
      <para>
        Returns a resource from the deployment.
        Example: /deployment/10/resource/org/activiti/examples/bpmn/usertask/FinancialReportProcess.bpmn20.xml
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Request: </emphasis>
            <literal>GET /deployment/{deploymentId}/resource/{resourceName}</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">API: </emphasis>
            <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().getResourceAsStream(deploymentId, resourceName)</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Response:</emphasis>
            <programlisting>I.e a .bpmn20.xml file, an image or whatever type of file the deployment resource contained.</programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Delete Deployment</title>
      <para>
        Deletes a deployment.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Request: </emphasis>
            <literal>DELETE /deployment/{deploymentId}?cascade={cascade?}</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">API: </emphasis>
            <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().deleteDeployment(deploymentId)</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Response:</emphasis>
            <programlisting>
{
  "success": true
}</programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Delete Deployments</title>
      <para>
        Deletes multiple deployment.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Request: </emphasis>
            <literal>POST /deployments/delete?cascade={cascade?}</literal>
            <programlisting>
{
"deploymentIds": [ "10", "11" ]
}</programlisting>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">API: </emphasis>
            <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().deleteDeployment(deploymentId)</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Response:</emphasis>
            <programlisting>
{
  "success": true
}</programlisting>
          </para>
        </listitem>
      </itemizedlist>
    </section>

  </section>

  <!-- ENGINE -->

    <section>

      <title>Engine</title>

      <section>
        <title>Get Process Engine</title>
        <para>
          Returns the process engine initialization details. If something went wrong during startup, details
          about the error will be given in the "exception" attribute in the response.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request: </emphasis>
              <literal>GET /process-engine</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API: </emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "name": "default",
  "resourceUrl": "jar:file:\//&lt;path-to-deployment&gt;\/activiti-cfg.jar!\/activiti.properties",
  "exception": null,
  "version": "5.11"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

    </section>

    <!-- PROCESSES -->

    <section>

      <title>Processes</title>

      <section>
        <title>List Process Definitions</title>
        <para>
          Returns details about the deployed process definitions that can be sorted by "id", "name", "version" or
          "deploymentId". The name of the BPMN2.0 XML process diagram is given in the "resourceName" attribute and can,
          in combination with the "deploymentId" attribute, be retrieved from the GET Deployment Resource REST API call
          above.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /process-definitions?start={start=0}&amp;size={size=10}&amp;sort={sort=id}&amp;order={order=asc}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().createProcessDefinitionQuery().listPage()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "id": "financialReport:1",
      "key": "financialReport",
      "version": 1,
      "name": "Monthly financial report",
      "resourceName": "org/activiti/examples/bpmn/usertask/FinancialReportProcess.bpmn20.xml",
      "diagramResourceName": "org/activiti/examples/bpmn/usertask/FinancialReportProcess.png",
      "deploymentId": "10",
      "startFormResourceKey": null,
      "isGraphicNotationDefined": true                 
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Get Process Definition Form Properties</title>
        <para>
          Returns a process definition's form properties.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /process-definition/{processDefinitionId}/properties</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getFormService().getStartFormData(processDefinitionId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
                "data": [
    {
      "id": "fullName",
      "name": "Full name",
      "value": "${name}",
      "type": "String",
      "required": false,
      "readable": true,
      "writeable": true               
    }
  ]
              </programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Process Definition Form Resource</title>
        <para>
          Returns a process definition's form.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /process-definition/{processDefinitionId}/form</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().getRenderedStartFormById(processDefinitionId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>&lt;user-defined-response&gt;</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
          <title>Get Process Definition Diagram</title>
          <para>
          Returns a PNG diagram of the process definition if it's available.
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">Request:</emphasis>
                <literal>GET /process-definition/{processDefinitionId}/diagram</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">API:</emphasis>
                <literal>repositoryService.getResourceAsStream(processDefinition.getDeploymentId(), processDefinition.getDiagramResourceName());</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">Response:</emphasis>
                <programlisting>Png diagram of the process definition.</programlisting>
              </para>
            </listitem>
          </itemizedlist>
      </section>

      <section>
        <title>Start Process Instance</title>
        <para>
          Creates a process instance based on a process definition and returns details about the newly created process instance.
          Additional variables (from a form) may be passed using the body object. In other words placing attributes
          next to the "processDefinitionId" attribute.
        </para>
        <para>
          Note that if a value is submitted as true (instead of "true") it will be treated as a
          Boolean even if no descriptor is used. The same is also valid for number, i.e., 123 will become an Integer
          but "123" will become a String (unless a descriptor is defined).
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /process-instance</literal>
              <programlisting>
{
  "processDefinitionId":"financialReport:1:1700",
  "businessKey":"order-4711"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRuntimeService().startProcessInstanceById(processDefinitionId[, businessKey][, variables])</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "217",
  "processDefinitionId": "financialReport:1:1700",
  "businessKey": "order-4711",
  "processInstanceId": "217"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

        <section>
          <title>List Process Instances</title>
          <para>
            Returns details about the active process instances that can be sorted by "id", "startTime", "businessKey" or
            "processDefinitionId". You can filter instances by "processDefinitionId" and "businessKey".
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">Paginated Request:</emphasis>
                <literal>GET /process-instances?start={start=0}&amp;size={size=10}&amp;sort={sort=id}&amp;order={order=asc}&amp;businessKey={businessKey}&amp;processDefinitionId={processDefinitionId}</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">API:</emphasis>
                <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getHistoryService().createHistoricProcessInstanceQuery().xxx.listPages()</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">Paginated Response:</emphasis>
                <programlisting>
  {
    "data": [
      {
        "id": "2",
        "processDefinitionId": "financialReport:1",
        "businessKey": "55",
        "startTime": "2010-10-13T14:54:26.750+02:00",
        "startUserId": "kermit"
      }
    ],
    "total": 1,
    "start": 0,
    "sort": "id",
    "order": "asc",
    "size": 1
  }</programlisting>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        
        <section>
          <title>Get Process Instance Details</title>
          <para>
            Returns all details about a specific process instance. This can be a running or completed process instance.
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">Request:</emphasis>
                <literal>GET /process-instance/{processInstanceId}</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">API:</emphasis>
                <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getHistoryService().createHistoricProcessInstanceQuery().processInstanceId(..).singleResult()</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">Response:</emphasis>
                <programlisting>
  {
    "id": "2",
    "processDefinitionId": "financialReport:1",
    "businessKey": "55",
    "startTime": "2010-10-13T14:54:26.750+02:00",
    "startActivityId": "startFinancialAnalysis",
    "startUserId": "kermit",
    "completed": false,
    "tasks": [
      {
        "taskId": "3",
        "taskName": "Analyze report",
        "owner": null,
        "assignee": "Kermit",
        "startTime": "2010-10-13T14:53:26.750+02:00",
        "completed": false
      }
    ],
    "activities": [
      {
        "activityId": "4",
        "activityName": "Get report",
        "activityType": "ServiceTask",
        "startTime": "2010-10-13T14:53:25.750+02:00",
        "completed": true,
        "startTime": "2010-10-13T14:53:25.950+02:00",
        "duration": 200
      }
    ],
    "variables": [
      {
        "variableName": "reportName",
        "variableValue": "classified.pdf",
      }
    ]
    "historyVariables": [
      {
        "variableName": "reportName",
        "variableValue": "classified.pdf",
        "variableType": "String",
        "revision": 1,
        "time": "2010-10-13T14:53:26.750+02:00"
      }
    ]
    
  }</programlisting>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        
        <section>
            <title>Get Process Instance Diagram</title>
            <para>
            Returns a PNG diagram of process with highlighted active executions. Returns 404 if process definition does not contain DI information.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">Request:</emphasis>
                  <literal>GET /process-instance/{processInstanceId}/diagram</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">API:</emphasis>
                  <literal>ProcessDiagramGenerator.generateDiagram(pde, "png", getRuntimeService().getActiveActivityIds(processInstanceId));</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">Response:</emphasis>
                  <programlisting>Png diagram of process with highlighted active executions.</programlisting>
                </para>
              </listitem>
            </itemizedlist>
        </section>
        
        <section>
            <title>Get open tasks for a process instance</title>
            <para>
            Returns a list of open tasks for a running process instance
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">Request:</emphasis>
                  <literal>GET /process-instance/{processInstanceId}/tasks</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">API:</emphasis>
                  <literal>taskService.createTaskQuery().processInstanceId(processInstanceId);</literal>
                </para>
              </listitem>
              <listitem>
            <para>
              <emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "id": "127",
      "name": "Handle vacation request",
      "description": "Vacation request by Kermit",
      "delegationState": "pending",
      "dueDate": "2010-10-13T14:54:26.750+02:00",
      "priority": 50,
      "assignee": null,
      "executionId": "118",
      "formResourceKey": "org/activiti/examples/taskforms/approve.form",
      "owner": "Kermit",
      "parentTaskId": "120",
      "processDefinitionId": "financialReport:1",
      "processInstanceId": "123",
      "taskDefinitionKey": "125"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
         </itemizedlist>
        </section>
        <section>
            <title>Signal an activity (receive task) for a specific process instance</title>
            <para>
            Signals an activity execution (receive task).
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">Request:</emphasis>
                  <literal>POST /process-instance/{processInstanceId}/signal</literal>
                  <programlisting>
{
  "activityId":"receiveTask",
  "variable1":"value",
  "variable2":"value"
}</programlisting>
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">API:</emphasis>
                  <literal>runtimeService.signal(execution.getId(), variables);</literal>
                </para>
              </listitem>
              <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
         </itemizedlist>
        </section>

        <section>
            <title>Trigger a signal for a specific process instance</title>
            <para>
            Sends a signal to a specific process instance, causing any subscribing signal event to fire. Additional variables may be passed in the body. If you don't want to set any variables, you may leave the body empty.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="bold">Request:</emphasis>
                  <literal>POST /process-instance/{processInstanceId}/event/{signalName}</literal>
                  <programlisting>
{
  "variable1":"value",
  "variable2":"value"
}</programlisting>
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis role="bold">API:</emphasis>
                  <literal>runtimeService.signalEventReceived(signalName, execution.getId()[, variables]);</literal>
                </para>
              </listitem>
              <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
         </itemizedlist>
        </section>

    </section>



    <!-- TASKS -->

    <section>

      <title>Tasks</title>

      <section>
        <title>Get Task Summary</title>
        <para>
          Returns a task summary for a specific user: The number of tasks assigned the user, how many unassigned tasks
          that the user may claim and how many unassigned tasks there are per group that the user is a member of.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /tasks-summary?user={userId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createTaskQuery().xxx().count()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "assigned": {
    "total": 0
  },
  "unassigned": {
    "total": 1,
    "groups":
    {
      "accountancy": 1,
      "sales": 0,
      "engineering": 0,
      "management": 0
    }
  }
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List Tasks</title>
        <para>
          Returns a paginated list of tasks that can be sorted by: "id", "name", "description", "priority", "assignee",
          "executionId" or "processInstanceId". The list must be based on a user of a specific role: assignee
          (lists the tasks assigned to the user) or candidate (lists the tasks that the user may claim) or a candidate
          group (lists tasks that the members of the group may claim). If the task has a form it is given in the
          "formResourceKey" attribute. The form for a task can be retrieved from the GET Task Form REST API call.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /tasks?[assignee={userId}|candidate={userId}|candidate-group={groupId}]&amp;start={start=0}&amp;size={size=10}&amp;sort={sort=id}&amp;order={order=asc}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Example:</emphasis>
              <programlisting>curl --basic --user kermit:kermit http://localhost:8080/activiti-rest/service/tasks?assignee=kermit</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createTaskQuery().xxx().listPage()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "id": "127",
      "name": "Handle vacation request",
      "description": "Vacation request by Kermit",
      "delegationState": "pending",
      "dueDate": "2010-10-13T14:54:26.750+02:00",
      "priority": 50,
      "assignee": null,
      "executionId": "118",
      "formResourceKey": "org/activiti/examples/taskforms/approve.form",
      "owner": "Kermit",
      "parentTaskId": "120",
      "processDefinitionId": "financialReport:1",
      "processInstanceId": "123",
      "taskDefinitionKey": "125"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Task</title>
        <para>
          Returns details about the task with the task id.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /task/{taskId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createTaskQuery().taskId(taskId).singleResult()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
      "id": "127",
      "name": "Handle vacation request",
      "description": "Vacation request by Kermit",
      "delegationState": "pending",
      "dueDate": "2010-10-13T14:54:26.750+02:00",
      "priority": 50,
      "assignee": null,
      "executionId": "118",
      "formResourceKey": "org/activiti/examples/taskforms/approve.form",
      "owner": "Kermit",
      "parentTaskId": "120",
      "processDefinitionId": "financialReport:1",
      "processInstanceId": "123",
      "taskDefinitionKey": "125",
      "subTaskList": [
        {
          "id": "129",
          "name": "Analyze request",
          "description": "Analyze request",
          "delegationState": "pending",
          "dueDate": "2010-10-13T14:54:26.750+02:00",
          "priority": 50,
          "assignee": null,
          "executionId": "118",
          "owner": "Kermit",
          "parentTaskId": "127"
        }
      ],
      "identityLinkList" : [
        {
          "type": "candidate",
          "userId": "Fozzie",
          "groupId": null
        }
      ],
      "attachmentList" : [
        {
          "id": "130",
          "name": "vacation_request.xls",
          "description": "Vacation request",
          "type": "application/pdf",
          "url": null
        }
      ]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Task Form</title>
        <para>
          Returns a task's form.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /task/{taskId}/form</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().getRenderedTaskForm(taskId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>&lt;user-defined-response&gt;</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Perform Task Operation</title>
        <para>
          Performs an operation (claim, unclaim, assign or complete) on a task.
          For the "complete" operation additional variables (from a form) may be passed in the body.
          To read more about additional variables from forms, visit the Start Process Instance section
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /task/{taskId}/[claim|unclaim|complete|assign]</literal>
              Claim and unclaim don't need a JSON body, but for complete you can provide a number of variables and for assign a userId field is required.
              An example body for the complete operation:
              <programlisting>
{
      "variableName1": "variableValue1",
      "variableName2": "variableValue2"
}</programlisting>
              An example body for the assign operation:
              <programlisting>
{
      "userId": "newAssignee"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().xxx(taskId ...)</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      	  
	  <section>
        <title>List Form Properties</title>
        <para>
          Returns a list of properties of a form of a running task, which is defined by the process.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /form/{taskId}/properties</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getFormService().getTaskFormData(taskId).getFormProperties()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "id": "userName",
      "name": "User",
      "value": "foobar",
      "type": "string",
      "required": "true",
      "readable": "true",
      "writable": "true"
    }
]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    
    <section>
        <title>Add attachment to a task</title>
        <para>
          Add an attachment to a task instance
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /task/{taskId}/attachment</literal>
              <programlisting>{}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createAttachment(...)</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
        {
          "id": "130",
          "name": "vacation_request.xls",
          "description": "Vacation request",
          "type": "application/pdf",
          "url": null
        }</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
          <title>Get task attachment</title>
          <para>
          Returns the task attachment
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">Request:</emphasis>
                <literal>GET /attachment/{attachmentId}</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">API:</emphasis>
                <literal>taskService.getAttachment(attachmentId);</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">Response:</emphasis>
                <programlisting>The attachment.</programlisting>
              </para>
            </listitem>
          </itemizedlist>
      </section>    
    
    <section>
        <title>Add url to a task</title>
        <para>
          Add an url to a task instance
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /task/{taskId}/url</literal>
              <programlisting>{}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createAttachment(...)</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
        {
          "id": "130",
          "name": "google.com",
          "description": "Good search site",
          "type": null,
          "url": "http://www.google.com"
        }</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>


    <!-- IDENTITY -->

    <section>

      <title>Identity</title>

      <section>
        <title>Login</title>
        <para>
          Authenticates a user. If user and password doesn't match a response with status 403 is returned.
          If authentication is successful, a response with status 200 is returned.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /login</literal>
              <programlisting>
{
  "userId": "kermit",
  "password": "kermit"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().checkPassword(userId, password)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get User</title>
        <para>
          Returns details about a user.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /user/{userId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().createUserQuery().userId(userId).singleResult();</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "kermit",
  "firstName": "Kermit",
  "lastName": "the Frog",
  "email": "kermit@server.com"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List User's Groups</title>
        <para>
          Returns a paginated list groups belonging to a user that can be sort by "id", "name" or "type".
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /user/{userId}/groups?start={start=0}&amp;size={size=10}&amp;sort={sort=id}&amp;order={order=asc}</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().xxx(userId)</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  data: [
    {
      "id": "admin",
      "name": "System administrator",
      "type": "security-role"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Search users</title>
        <para>
          Returns a list users from whom the first or last name corresponds to the search text.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /users?searchText=ker</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().createUserQuery().userFirstNameLike(searchText).list()</literal>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().createUserQuery().userLastNameLike(searchText).list()</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  data: [
    {
      "id": "kermit",
      "firstName": "Kermit",
      "lastName": "the Frog",
      "email": "kermit@server.com"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Create user</title>
        <para>
          Creates a new user.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /user</literal>
              <programlisting>
{
  "id": "kermit",
  "firstName": "Kermit",
  "lastName": "the Frog",
  "email": "kermit@server.com",
  "password": "kermit"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().newUser();</literal>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().saveUser();</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Add user to groups</title>
        <para>
          Adds user to the groups posted to this REST service.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /user/{userId}/groups</literal>
              <programlisting>
["management", "sales"]
</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>identityService().createMembership(userId, groupId);</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Remove user from group</title>
        <para>
          Removes user from a group.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>DELETE /user/{userId}/groups/{groupId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>identityService().deleteMembership(userId, groupId);</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
          <title>Get user picture</title>
          <para>
          Returns the task attachment
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis role="bold">Request:</emphasis>
                <literal>GET /user/{userId}/picture</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">API:</emphasis>
                <literal>identityService.getUserPicture(userId);</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">Response:</emphasis>
                <programlisting>The user picture.</programlisting>
              </para>
            </listitem>
          </itemizedlist>
      </section>

      <section>
        <title>Get Group</title>
        <para>
          Returns details about a group.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /group/{groupId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().createGroupQuery().groupId(groupId).singleResult();</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "admin",
  "name": "System administrator",
  "type": "security-role"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List Group Users</title>
        <para>
          Returns details about a group's users that can be sorted by "id", "firstName", "lastName" or "email".
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /group/{groupId}/users</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().createUserQuery().memberOfGroup(groupId).list()</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  data: [
    {
      "id": "kermit",
      "firstName": "Kermit",
      "lastName": "the Frog",
      "email": "kermit@server.com"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    
    <section>
        <title>Search groups</title>
        <para>
          Returns a list of groups from whom the id or name corresponds to the search text.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /groups?searchText=ad</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>identityService.createGroupQuery().list()</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  data: [
    {
      "id": "admin",
      "name": "System administrator",
      "type": "security-role"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    
    <section>
        <title>Create group</title>
        <para>
          Creates a new group.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /group</literal>
              <programlisting>
{
  "id": "admin",
  "name": "System administrator",
  "type": "security-role"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>identityService.newGroup();</literal>
              <literal>identityService.saveGroup();</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Add users to a group</title>
        <para>
          Adds users to a group.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /group/{groupId}/users</literal>
              <programlisting>
["kermit", "fozzie"]
</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>identityService().createMembership(userId, groupId);</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Remove user from group</title>
        <para>
          Removes user from a group.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>DELETE /group/{groupId}/users/{userId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>identityService().deleteMembership(userId, groupId);</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
   </section>


    <!-- MANAGEMENT -->

    <section>

      <title>Management</title>

      <section>
        <title>List Jobs</title>
        <para>
          Returns a paginated list of jobs that can be sorted by "id", "process-instance-id", "execution-id",
          "due-date", "retries" or some custom arbitrary property id. The list can also be filtered by
          process instance id, due date or if the jobs have retries, are executable or only have messages or timers.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /management/jobs?process-instance={processInstanceId?}&amp;with-retries-left={withRetriesLeft=false}&amp;executable={executable=false}&amp;only-timers={onlyTimers=false}&amp;only-messages={onlyMessage=false}&amp;duedate-lt={iso8601Date}&amp;duedate-ltoe={iso8601Date}&amp;duedate-ht={iso8601Date}&amp;duedate-htoe={iso8601Date}&amp;start={start=0}&amp;size={size=10}&amp;sort={sort=id}&amp;order={order=asc}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).createJobQuery().xxx().listPage()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "id": "212",
      "executionId": "211",
      "retries": -1,
      "processInstanceId": "210",
      "dueDate": null,
      "assignee": null,
      "exceptionMessage": "Can\'t find scripting engine for \'groovy\'"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 1
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Job</title>
        <para>
          Returns details about a job.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /management/job({jobId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).createJobQuery().id(jobId).singleResult()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "212",
  "executionId": "211",
  "retries": -1,
  "processInstanceId": "210",
  "dueDate": null,
  "assignee": null,
  "exceptionMessage": "Can\'t find scripting engine for \'groovy\'",
  "stacktrace": "org.activiti.engine.ActivitiException: Can't find scripting engine for 'groovy'\n\tat ..."
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Execute Job</title>
        <para>
          Executes a job.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /management/job/{jobId}/execute</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().executeJob(jobId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Execute Jobs</title>
        <para>
          Executes multiple job.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /management/jobs/execute</literal>
              <programlisting>
{
  "jobIds": [ "212" ]
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().executeJob(jobId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List Database Tables</title>
        <para>
          Returns meta data information about all database tables in the engine.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /management/tables</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().getTableCount()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "tableName": "ACT_GE_PROPERTY",
      "noOfResults": 2
    }
  ]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Table Meta Data</title>
        <para>
          Returns meta data about a database table.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /management/table/{tableName}</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().getTableMetaData(tableName))</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "tableName": "ACT_GE_PROPERTY",
  "columnNames": ["REV_","NAME_","VALUE_"],
  "columnNames": ["class java.lang.Integer", "class java.lang.String", "class java.lang.String"]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>


      <section>
        <title>Get Table Data</title>
        <para>
          Returns a paginated list of database table data.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Paginated Request:</emphasis>
              <literal>GET /management/table/{tableName}/data</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().createTablePageQuery().tableName(tableName).start(start).size(size).orderXXX(sort).singleResult();
              </literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Paginated Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "NAME_": "schema.version",
      "REV_": "1",
      "VALUE_": "5.10"
    },
    {
      "NAME_": "next.dbid",
      "REV_": "4",
      "VALUE_": "310"
    }
  ],
  "total": 2,
  "start": 0,
  "sort": "NAME_",
  "order": "asc",
  "size": 2
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

    </section>
    
</chapter>
