<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">
<chapter id="activitiDesigner">
  <title>Eclipse Designer</title>
  
  <para>
  	Activiti comes with an Eclipse plugin, the Activiti Eclipse Designer, that can be used to
    graphically model, test and deploy BPMN 2.0 processes.
  </para>
  
  <section id="eclipseDesignerInstallation">
    <title>Installation</title>
    <para>
    	The following installation instructions are verified on <ulink
        url="http://www.eclipse.org/downloads/">Eclipse Indigo</ulink>. Note that Eclipse Helio is <emphasis role="bold">NOT</emphasis> supported.
    </para>
    <para>
    	Go to <emphasis role="bold">Help -> Install New Software</emphasis>. In the following
      panel, click on <emphasis>Add</emphasis> button and fill in the following fields:
      
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Name: </emphasis>Activiti BPMN 2.0 designer</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Location:
            </emphasis>http://activiti.org/designer/update/</para>
        </listitem>
      </itemizedlist>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/designer.add.update.site.png"/>
        </imageobject>
      </mediaobject>
      Make sure the <emphasis role="bold">"Contact all updates sites.."</emphasis>
      checkbox is <emphasis role="bold">checked</emphasis>, because all the necessary plugins will then be downloaded by Eclipse.
    </para>
  </section>
  
  <section id="eclipseDesignerEditorFeatures">
    <title>Activiti Designer editor features</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>
          	Create Activiti projects and diagrams.
          	
          	<mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.create.activiti.project.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
          	The Activiti Designer creates a .bpmn file when creating a new Activiti diagram. When opened with the Activiti Diagram Editor view
            this will provide a graphical modeling canvas and palette. The same file can however be opened with an XML editor and it then shows
            the BPMN 2.0 XML elements of the process definition. So the Activiti Designer works with only one file for both the graphical diagram
            as well as the BPMN 2.0 XML. Note that in Activiti 5.9 the .bpmn extension is not yet supported as deployment artifact for a process definition.
            Therefore the "create deployment artifacts" feature of the Activiti Designer generates a BAR file with a .bpmn20.xml file that contains the content
            of the .bpmn file. You can also do a quick file rename yourself. Also note that you can open a .bpmn20.xml file with the Activiti Diagram Editor view as well.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.bpmn.file.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
          	BPMN 2.0 XML files can be imported into the Activiti Designer and a diagram will be created. Just copy the BPMN 2.0 XML file
            to your project and open the file with the Activiti Diagram Editor view.
            The Activiti Designer uses the BPMN DI information of the file to create the diagram. If you have a BPMN 2.0 XML file without
            BPMN DI information, no diagram can be created.
          
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.open.importedfile.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
          	For deployment a BAR file and optionally a JAR file is created by the Activiti Designer by right-clicking on an
          	Activiti project in the package explorer and choosing the <emphasis>Create deployment artifacts</emphasis> option
          	at the bottom of the popup menu. For more information about the deployment functionality of the Designer look a the
          	<link linkend="eclipseDesignerDeployment">deployment</link> section.
          
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.create.deployment.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>Generate a unit test (right click on a BPMN 2.0 XML file in the package explorer
            and select <emphasis>generate unit test</emphasis>) A unit test is generated with an
            Activiti configuration that runs on an embedded H2 database. You can now run the unit
            test to test your process definition.
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.unittest.generate.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
          	The Activiti project is generated as a Maven project. To configure the dependencies
            you need to run <emphasis>mvn eclipse:eclipse</emphasis> and the Maven dependencies
            will be configured as expected. Note that for process design Maven dependencies are not needed.
            They are only needed to run unit tests.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.project.maven.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section id="eclipseDesignerBPMNFeatures">
    <title>Activiti Designer BPMN features</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>
          	Support for start none event, start error event, timer start event, end none event, end error event, sequence flow, 
            parallel gateway, exclusive gateway, inclusive gateway, event gateway, embedded subprocess, event sub process, call activity, pool, lane, 
            script task, user task, service task, mail task, manual task, business rule task, receive task,
            timer boundary event, error boundary event, signal boundary event, timer catching event, signal catching event, signal throwing event,
            none throwing event and four Alfresco specific elements (user, script, mail tasks and start event).
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.process.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            You can quickly change the type of a task by hovering over the element and choosing the new task type.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.quick.change.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            You can quickly add new elements hovering over an element and choosing a new element type.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.quick.new.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
          	Java class, expression or delegate expression configuration is supported for the Java service task. In
            addition field extensions can be configured.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.servicetask.property.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        
        <listitem>
          <para>
            Support for pools and lanes. Because Activiti reads different pools as different process definition, it makes the most sense to use only one pool.
            If you use multiple pools, be aware that drawing sequence flows between the pools will result in problems when deploying the process in the Activiti Engine.
            You can add as much lanes to a pool as you want.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.poolandlanes.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        
        <listitem>
          <para>
            You can add labels to sequence flows by filling the name property. 
            You can position the labels yourself as the position is saved as part of the BPMN 2.0 XML DI information.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.labels.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        
        <listitem>
          <para>
            Support for event sub processes.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.eventsubprocess.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        
        <listitem>
          <para>
          	Support for expanded embedded sub processes. You can also add an embedded sub process in another embedded sub process.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.embeddedprocess.canvas.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        
        <listitem>
          <para>
          	Support for timer boundary events on tasks and embedded sub processes. Although, the timer boundary event makes 
          	the most sense when using it on a user task or an embedded sub process in the Activiti Designer.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.timerboundary.canvas.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        
        <listitem>
          <para>
          	Support for additional Activiti extensions like the Mail task, the candidate
            configuration of User tasks and Script task configuration.
            
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.mailtask.property.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
          	Support for the Activiti execution and task listeners. You can also add field extensions for execution listeners.
          
          	<mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.listener.configuration.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> Support for conditions on sequence flows. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.sequence.condition.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section id="eclipseDesignerDeployment">
    <title>Activiti Designer deployment features</title>
    <para>
    	Deploying process definitions and task forms on the Activiti Engine is not hard. You need a BAR file containing the process
    	definition BPMN 2.0 XML file and optionally task forms and an image of the process that can be viewed in the Activiti
    	Explorer. In the Activiti Designer it's made very easy to create a BAR file. When you've finished your process
    	implementation just right-click on your Activiti project in the package explorer and choose for the
    	<emphasis role="bold">Create deployment artifacts</emphasis> option at the bottom of the popup menu.
    	
    	<mediaobject>
         <imageobject>
           <imagedata align="center" fileref="images/designer.create.deployment.png"/>
         </imageobject>
       </mediaobject>
   	</para>
   	<para>
    	Then a deployment directory is created containing the BAR file and optionally a JAR file with the Java classes of your
    	Activiti project.
    	
    	<mediaobject>
         <imageobject>
           <imagedata align="center" fileref="images/designer.deployment.dir.png"/>
         </imageobject>
       </mediaobject>
    </para>
    <para>
    	This file can now be uploaded to the Activiti Engine using the deployments tab in Activiti Explorer, and you are ready to go.
    	
    </para>
    <para>
    	When your project contains Java classes, the deployment is a bit more work. In that case the 
    	<emphasis role="bold">Create deployment artifacts</emphasis> step in the Activiti Designer will also generate a JAR
    	file containing the compiled classes. This JAR file must be deployed to the activiti-XXX/WEB-INF/lib directory
    	in your Activiti Tomcat installation directory. This makes the classes available on the classpath of the Activiti Engine.
    </para>
  </section>
  
  <section id="eclipseDesignerExtending">
    <title>Extending Activiti Designer</title>
    <para>You can extend the default functionality
      offered by Activiti Designer. This section documents which extensions are available, how they
      can be used and provides some usage examples. Extending Activiti Designer is useful in cases
      where the default functionality doesn't suit your needs, you require additional capabilities
      or have domain specific requirements when modeling business processes. Extension of Activiti
      Designer falls into two distinct categories, extending the palette and extending output
      formats. Each of these extension ways requires a specific approach and different technical
      expertise.</para>
    <para>
      <note>
        <para>Extending Activiti Designer requires technical knowledge and more specifically,
          knowledge of programming in Java. Depending on the type of extension you want to create,
          you might also need to be familiar with Maven, Eclipse, OSGi, Eclipse extensions and
          SWT.</para>
      </note>
    </para>
    <section id="eclipseDesignerCustomizingPalette">
      <title>Customizing the palette</title>
      <para>You can customize the palette that is offered to users when modeling processes. The
        palette is the collection of shapes that can be dragged onto the canvas in a process diagram
        and is displayed to the right hand side of the canvas. As you can see in the default
        palette, the default shapes are grouped into compartments (these are called "drawers") for
        Events, Gateways and so on. There are two options built-in to Activiti Designer to customize
        the drawers and shapes in the palette:<itemizedlist>
          <listitem>
            <para>Adding your own shapes / nodes to existing or new drawers </para>
          </listitem>
          <listitem>
            <para>Disabling any or all of the default BPMN 2.0 shapes offered by Activiti Designer,
              with the exception of the connection and selection tools</para>
          </listitem>
        </itemizedlist></para>
      <para>In order to customize the palette, you create a JAR file that is added to a specific
        installation of Activiti Designer (more on <link linkend="eclipseDesignerApplyingExtension">how
          to do that</link> later). Such a JAR file is called an <emphasis>extension</emphasis>. By
        writing classes that are included in your extension, Activiti Designer understands which
        customizations you wish to make. In order for this to work, your classes should implement
        certain interfaces. There is an integration library available with those interfaces and base
        classes to extend which you should add to your project's classpath. </para>
      <para>You can find the code examples listed below in source control with Activiti Designer.
        Take a look in the <literal>examples/money-tasks</literal> directory in the
          <literal>projects/designer</literal> directory of Activiti's source code.</para>
      <para>
        <note>
          <para>You can setup your project in whichever tool you prefer and build the JAR with your
            build tool of choice. For the instructions below, a setup is assumed with Eclipse
            Helios, using Maven (3.x) as build tool, but any setup should enable you to create the
            same results.</para>
        </note>
      </para>
      <section>
        <title>Extension setup (Eclipse/Maven)</title>
        <para>Download and extract <ulink url="http://www.eclipse.org/downloads">Eclipse</ulink>
          (most recent versions should work) and a recent version (3.x) of <ulink
            url="http://maven.apache.org/download.html">Apache Maven</ulink>. If you use a 2.x
          version of Maven, you will run into problems when building your project, so make sure your
          version is up to date. We assume you are familiar with using basic features and the Java
          editor in Eclipse. It's up to you whether your prefer to use Eclipse's features for Maven
          or run Maven commands from a command prompt.</para>
        <para>Create a new project in Eclipse. This can be a general project type. Create a
            <literal>pom.xml</literal> file at the root of the project to contain the Maven project
          setup. Also create folders for the <literal>src/main/java</literal> and
            <literal>src/main/resources</literal> folders, which are Maven conventions for your Java
          source files and resources respectively. Open the <literal>pom.xml</literal> file and add
          the following lines:</para>
        <para>
          <programlisting>&lt;project 
  xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  &lt;modelVersion>4.0.0&lt;/modelVersion>

  &lt;groupId>org.acme&lt;/groupId>
  &lt;artifactId>money-tasks&lt;/artifactId>
  &lt;version>1.0.0&lt;/version>
  &lt;packaging>jar&lt;/packaging>
  &lt;name>Acme Corporation Money Tasks&lt;/name>
...
&lt;/project></programlisting>
        </para>
        <para>As you can see, this is just a basic pom.xml file that defines a
            <literal>groupId</literal>, <literal>artifactId</literal> and <literal>version</literal>
          for the project. We will create a customization that includes a single custom node for our
          money business.</para>
        <para>Add the integration library to your project's dependencies by including this
          dependency in your <literal>pom.xml</literal> file:</para>
        <para>
          <programlisting>&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.activiti.designer&lt;/groupId&gt;
    &lt;artifactId&gt;org.activiti.designer.integration&lt;/artifactId&gt;
    &lt;version&gt;5.12.0&lt;/version&gt; &lt;!-- Use the current Activiti Designer version --&gt;
    &lt;scope&gt;compile&lt;/scope&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;
...
&lt;repositories&gt;
  &lt;repository&gt;
      &lt;id&gt;Activiti&lt;/id&gt;
      &lt;url&gt;https://maven.alfresco.com/nexus/content/groups/public/&lt;/url&gt;
   &lt;/repository&gt;
&lt;/repositories&gt;</programlisting>
        </para>
        <para>Finally, in the<literal> pom.xml</literal> file, add the configuration for the
            <literal>maven-compiler-plugin</literal> so the Java source level is at least 1.5 (see
          snippet below). You will need this in order to use annotations. You can also include
          instructions for Maven to generate the JAR's <literal>MANIFEST.MF</literal> file. This is
          not required, but you can use a specific property in the manifest to provide a name for
          your extension (this name may be shown at certain places in the designer and is primarily
          intended for future use if you have several extensions in the designer). If you wish to do
          so, include the following snippet in <literal>pom.xml</literal>: </para>
        <para>
          <programlisting>&lt;build>
  &lt;plugins>
        &lt;plugin>
      &lt;artifactId>maven-compiler-plugin&lt;/artifactId>
      &lt;configuration>
        &lt;source>1.5&lt;/source>
        &lt;target>1.5&lt;/target>
        &lt;showDeprecation>true&lt;/showDeprecation>
        &lt;showWarnings>true&lt;/showWarnings>
        &lt;optimize>true&lt;/optimize>
      &lt;/configuration>
    &lt;/plugin>
    &lt;plugin>
      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
      &lt;artifactId>maven-jar-plugin&lt;/artifactId>
      &lt;version>2.3.1&lt;/version>
      &lt;configuration>
        &lt;archive>
          &lt;index>true&lt;/index>
          &lt;manifest>
            &lt;addClasspath>false&lt;/addClasspath>
            &lt;addDefaultImplementationEntries>true&lt;/addDefaultImplementationEntries>
          &lt;/manifest>
          &lt;manifestEntries>
            &lt;ActivitiDesigner-Extension-Name>Acme Money&lt;/ActivitiDesigner-Extension-Name>
          &lt;/manifestEntries>
        &lt;/archive>
      &lt;/configuration>
    &lt;/plugin>
  &lt;/plugins>
&lt;/build></programlisting>
        </para>
        <para>The name for the extension is described by the
            <literal>ActivitiDesigner-Extension-Name</literal> property. The only thing left to do
          now is tell Eclipse to setup the project according to the instructions in
            <literal>pom.xml</literal>. So open up a command shell and go to the root folder of your
          project in the Eclipse workspace. Then execute the following Maven command:</para>
        <para>
          <programlisting>mvn eclipse:eclipse</programlisting>
        </para>
        <para>Wait until the build is successful. Refresh the project (use the project's context
          menu (right-click) and select <literal>Refresh</literal>). You should now have the
            <literal>src/main/java</literal> and <literal>src/main/resources</literal> folders as
          source folders in the Eclipse project.</para>
        <note>
          <para>You can of course also use the <ulink url="http://www.eclipse.org/m2e"
              >m2eclipse</ulink> plugin and simply enable Maven dependency management from the
            context menu (right-click) of the project. Then choose <literal>Maven</literal> >
              <literal>Update project configuration</literal> from the project's context menu. That
            should setup the source folders as well. </para>
        </note>
        <para>That's it for the setup. Now you're ready to start creating customizations to Activiti
          Designer!</para>
      </section>
      <section id="eclipseDesignerApplyingExtension">
        <title>Applying your extension to Activiti Designer</title>
        <para>You might be wondering how you can add your extension to Activiti Designer so your
          customizations are applied. These are the steps to do just that: <itemizedlist>
            <listitem>
              <para>Once you've created your extension JAR (for instance, by performing a mvn
                install in your project to build it with Maven), you need to transfer the extension
                to the computer where Activiti Designer is installed; </para>
            </listitem>
            <listitem>
              <para>Store the extension somewhere on the hard drive where it will be able to remain
                and remember the location. <emphasis>Note: </emphasis> the location must be outside the Eclipse workspace of Activiti Designer - 
                storing the extension inside the workspace will lead to the user getting a popup error message and the extensions being unavailable;</para>
            </listitem>
            <listitem>
              <para>Start Activiti Designer and from the menu, select <literal>Window</literal> >
                  <literal>Preferences</literal>
              </para>
            </listitem>
            <listitem>
              <para>In the preferences screen, type <literal>user</literal> as keyword. You should
                see an option to access the <literal>User Libraries</literal> in Eclipse in the
                  <literal>Java</literal> section.</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center"
                      fileref="images/designer.preferences.userlibraries.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
            <listitem>
              <para>Select the User Libraries item and a tree view shows up to the right where you
                can add libraries. You should see the default group where you can add extensions to
                Activiti Designer (depending on your Eclipse installation, you might see several
                others as well). </para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center"
                      fileref="images/designer.preferences.userlibraries.activiti.empty.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
            <listitem>
              <para>Select the <literal>Activiti Designer Extensions</literal> group and click the
                  <literal>Add JARs...</literal> button. Navigate to to folder where your extension
                is stored and select the extension file you want to add. After completing this, your
                preferences screen should show the extension as part of the <literal>Activiti
                  Designer Extensions</literal> group, as shown below.</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center"
                      fileref="images/designer.preferences.userlibraries.activiti.moneytasks.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
            <listitem>
              <para>Click the <literal>OK</literal> button to save and close the preferences dialog.
                The <literal>Activiti Designer Extensions</literal> group is automatically added to
                new Activiti projects you create. You can see the user library as entry in the
                project's tree in the Navigator or Package Explorer. If you already had Activiti
                projects in the workspace, you should also see the new extensions show up in the
                group. An example is shown below.</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="images/designer.userlibraries.project.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
          </itemizedlist></para>
        <para>Diagrams you open will now have the shapes from the new extension in their palette (or
          shapes disabled, depending on the customizations in your extension). If you already had a
          diagram opened, close and reopen it to see the changes in the palette.</para>
      </section>
      <section>
        <title>Adding shapes to the palette</title>
        <para>
          With your project set up, you can now easily add shapes to the palette. Each shape you
          wish to add is represented by a class in your JAR. Take note that these classes are not
          the classes that will be used by the Activiti engine during runtime. In your extension you
          describe the properties that can be set in Activiti Designer for each shape. From these
          shapes, you can also define the runtime characteristics that should be used by the engine 
          when a process instance reaches the node in the process. The runtime characteristics can use any 
          of the options that Activiti supports for regular <literal>ServiceTask</literal>s. 
          See <link linkend="eclipseDesignerConfiguringRuntime">this section</link> for more 
          details.
        </para>
        <para>A shape's class is a simple Java class, to which a number of annotations are added.
          The class should implement the <literal>CustomServiceTask</literal> interface, but you
          shouldn't implement this interface yourself. Extend the
            <literal>AbstractCustomServiceTask</literal> base class instead (at the moment you MUST
          extend this class directly, so no abstract classes in between). In the Javadoc for that
          class you can find instructions on the defaults it provides and when you should override
          any of the methods it already implements. Overrides allow you to do things such as
          providing icons for the palette and in the shape on the canvas (these can be different)
          and specifying the base shape you want the node to have (activity, event, gateway).</para>
        <para>
          <programlisting>/**
 * @author John Doe
 * @version 1
 * @since 1.0.0
 */
public class AcmeMoneyTask extends AbstractCustomServiceTask {
...
}</programlisting>
        </para>
        <para>You will need to implement the <literal>getName()</literal> method to determine the
          name the node will have in the palette. You can also put the nodes in their own drawer and
          provide an icon. Override the appropriate methods from
            <literal>AbstractCustomServiceTask</literal>. If you want to provide an icon, make sure
          it's in the <literal>src/main/resources</literal> package in your JAR and is about 16x16
          pixels and a JPEG or PNG format. The path you supply is relative to that folder.</para>
        <para>You can add properties to the shape by adding members to the class and annotating them
          with the <literal>@Property</literal> annotation like this:</para>
        <para>
          <programlisting>@Property(type = PropertyType.TEXT, displayName = "Account Number")
@Help(displayHelpShort = "Provide an account number", displayHelpLong = HELP_ACCOUNT_NUMBER_LONG)
private String accountNumber;</programlisting>
        </para>
        <para>There are several <literal>PropertyType</literal> values you can use, which are
          described in more detail in <link linkend="eclipseDesignerPropertyTypes">this section</link>. You
          can make a field required by setting the required attribute to true. A message and red
          background will appear if the user doesn't fill out the field.</para>
        <para>If you want to ensure the order of the various properties in your class as they appear
          in the property screen, you should specify the order attribute of the
            <literal>@Property</literal> annotation.</para>
        <para>As you can see, there's also an <literal>@Help</literal> annotation that's used to
          provide the user some guidance when filling out the field. You can also use the
            <literal>@Help</literal> annotation on the class itself - this information is shown at
          the top of the property sheet presented to the user.</para>
        <para>Below is the listing for a further elaboration of the <literal>MoneyTask</literal>. A
          comment field has been added and you can see an icon is included for the node.</para>
        <para>
          <programlisting>/**
 * @author John Doe
 * @version 1
 * @since 1.0.0
 */
@Runtime(javaDelegateClass = "org.acme.runtime.AcmeMoneyJavaDelegation")
@Help(displayHelpShort = "Creates a new account", displayHelpLong = "Creates a new account using the account number specified")
public class AcmeMoneyTask extends AbstractCustomServiceTask {

  private static final String HELP_ACCOUNT_NUMBER_LONG = "Provide a number that is suitable as an account number.";

  @Property(type = PropertyType.TEXT, displayName = "Account Number", required = true)
  @Help(displayHelpShort = "Provide an account number", displayHelpLong = HELP_ACCOUNT_NUMBER_LONG)
  private String accountNumber;

  @Property(type = PropertyType.MULTILINE_TEXT, displayName = "Comments")
  @Help(displayHelpShort = "Provide comments", displayHelpLong = "You can add comments to the node to provide a brief description.")
  private String comments;

  /*
   * (non-Javadoc)
   * 
   * @see org.activiti.designer.integration.servicetask.AbstractCustomServiceTask #contributeToPaletteDrawer()
   */
  @Override
  public String contributeToPaletteDrawer() {
    return "Acme Corporation";
  }

  @Override
  public String getName() {
    return "Money node";
  }

  /*
   * (non-Javadoc)
   * 
   * @see org.activiti.designer.integration.servicetask.AbstractCustomServiceTask #getSmallIconPath()
   */
  @Override
  public String getSmallIconPath() {
    return "icons/coins.png";
  }
}</programlisting>
        </para>
        <para>If you extend Activiti Designer with this shape, The palette and corresponding node
          will look like this:</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/designer.palette.add.money.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>The properties screen for the money task is shown below. Note the required message for
          the <literal>accountNumber</literal> field.</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center"
                fileref="images/designer.palette.add.money.properties.required.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>
        	Users can enter static text or use expressions that use process variables in the property fields when creating diagrams 
        	(e.g. &quot;This little piggy went to ${piggyLocation}&quot;). Generally, 
        	this applies to text fields where users are free to enter any text. If you expect users to want to use expressions and you apply runtime behavior 
        	to your <literal>CustomServiceTask</literal> (using <literal>@Runtime</literal>), make sure to use <literal>Expression</literal> fields in the 
        	delegate class so the expressions are correctly resolved at runtime. More information on runtime behavior can be found in  
        	<link linkend="eclipseDesignerConfiguringRuntime">this section</link>.
        </para>
        <para>The help for fields is offered by the buttons to the right of each property. Clicking
          on the button shows a popup as displayed below.</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/designer.palette.add.money.help.png"/>
            </imageobject>
          </mediaobject>
        </para>
        
      	<section id="eclipseDesignerConfiguringRuntime">
      		<title>Configuring runtime execution of Custom Service Tasks</title>
      		
      		<para>
      			With your fields setup and your extension applied to Designer, users can configure 
      			the properties of the service task when modelling a process. In most cases, you will 
      			want to use these user-configured properties when the process is executed by Activiti. 
      			To do this, you must instruct Activiti which class to instantiate when the process reaches 
      			your <literal>CustomServiceTask</literal>. 
      		</para>
      		
      		<para>
      			There is a special annotation for specifying the runtime characteristics of your <literal>CustomServiceTask</literal>, 
      			the <literal>@Runtime</literal> annotation. Here's an example of how to use it:
      		</para>
      		
      		<programlisting>@Runtime(javaDelegateClass = "org.acme.runtime.AcmeMoneyJavaDelegation")</programlisting>

          <para>
            Your <literal>CustomServiceTask</literal> will result in a normal <literal>ServiceTask</literal> in the BPMN output 
            of processes modelled with it. Activiti enables <link linkend="bpmnJavaServiceTask">several ways</link> to define the runtime characteristics of <literal>ServiceTask</literal>s. Therefore, the <literal>@Runtime</literal> annotation can take one of three attributes, which match directly to the options 
            Activiti provides, like this:
            <itemizedlist>
              <listitem>
                <para>
                  <literal>javaDelegateClass</literal> maps to <literal>activiti:class</literal> in the BPMN output. Specify the fully qualified classname of a class that implements <literal>JavaDelegate</literal>. 
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>expression</literal> maps to <literal>activiti:expression</literal> in the BPMN output. Specify an expression to a method to be executed, such as a method in a Spring Bean. You should <emphasis>not</emphasis> specify any <literal>@Property</literal> 
                  annotations on fields when using this option. For more information, see below.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>javaDelegateExpression</literal> maps to <literal>activiti:delegateExpression</literal> in the BPMN output. Specify an expression to  a class that implements <literal>JavaDelegate</literal>.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          	
          	<para>
          		The user's property values will be injected into the runtime class 
          		if you provide members in the class for Activiti to inject into. The names should match the names of the members 
          		in your <literal>CustomServiceTask</literal>. For more information, consult <link linkend="serviceTaskFieldInjection">this part</link> 
          		of the userguide. Note that since version 5.11.0 of the Designer you can use the <literal>Expression</literal> interface for dynamic field values.
              This means that the value of the property in the Activiti Designer must contain an expression and this expression will then be injected
              into an <literal>Expression</literal> property in the <literal>JavaDelegate</literal> implementation class.
          	</para>

            <note>
              <para>
                You can use <literal>@Property</literal> annotations on members of your <literal>CustomServiceTask</literal>, but this will not work if you use <literal>@Runtime</literal>'s <literal>expression</literal> attribute. The reason for this is that the 
                expression you specify will be attempted to be resolved to a <emphasis>method</emphasis> by Activiti, not to a class. Therefore, no injection into 
                a class will be performed. Any members marked with <literal>@Property</literal> will be ignored by Designer if you use <literal>expression</literal> in your <literal>@Runtime</literal> annotation. Designer will not render them as editable fields in the node's property pane and will produce no output 
                for the properties in the process' BPMN.
              </para>      
            </note>

            <note>
              <para>
                Note that the runtime class shouldn't be in your extension JAR, as it's dependent on the Activiti
                libraries. Activiti needs to be able to find it at runtime, so it needs to be on the Activiti engine's 
                classpath.
              </para>
            </note>

            <para>
              The examples project in Designer's source tree contains examples of the different options for configuring <literal>@Runtime</literal>. Take a look in the money-tasks project for some starting points. The examples refer to delegate class examples that are in the money-delegates project.
            </para>
          
        </section>
      </section>
      <section id="eclipseDesignerPropertyTypes">
        <title>Property types </title>
        <para>This section describes the property types you can use for a
            <literal>CustomServiceTask</literal> by setting its type to a
            <literal>PropertyType</literal> value.</para>
        <section>
          <title>PropertyType.TEXT</title>
          <para>Creates a single line text field as shown below. Can be a required field and shows
            validation messages as a tooltip. Validation failures are displayed by changing the
            background of the field to a light red color.</para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.text.png"/>
              </imageobject>
            </mediaobject>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.text.invalid.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.MULTILINE_TEXT</title>
          <para>Creates a multiline text field as shown below (height is fixed at 80 pixels). Can be
            a required field and shows validation messages as a tooltip. Validation failures are
            displayed by changing the background of the field to a light red color.</para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.multiline.text.png"/>
              </imageobject>
            </mediaobject>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center"
                  fileref="images/designer.property.multiline.text.invalid.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.PERIOD</title>
          <para>Creates a structured editor for specifying a period of time by editing amounts of
            each unit with a spinner control. The result is shown below. Can be a required field
            (which is interpreted such that not all values may be 0, so at least 1 part of the
            period must have a non-zero value) and shows validation messages as a tooltip.
            Validation failures are displayed by changing the background of the entire field to a
            light red color. The value of the field is stored as a string of the form 1y 2mo 3w 4d
            5h 6m 7s, which represents 1 year, 2 months, 3 weeks, 4 days, 6 minutes and 7 seconds.
            The entire string is always stored, even if parts are 0.</para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.period.png"/>
              </imageobject>
            </mediaobject>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.period.invalid.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.BOOLEAN_CHOICE</title>
          <para>Creates a single checkbox control for boolean or toggle choices. Note that you can
            specify the <literal>required</literal> attribute on the <literal>Property</literal>
            annotation, but it will not be evaluated because that would leave the user without a
            choice whether to check the box or not. The value stored in the diagram is
            java.lang.Boolean.toString(boolean), which results in "true" or "false".</para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.boolean.choice.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.RADIO_CHOICE</title>
          <para>Creates a group of radio buttons as shown below. Selection of any of the radio
            buttons is mutually exclusive with selection of any of the others (i.e., only one
            selection allowed). Can be a required field and shows validation messages as a tooltip.
            Validation failures are displayed by changing the background of the group to a light red
            color.</para>
          <para>This property type expects the class member you have annotated to also have an
            accompanying <literal>@PropertyItems</literal> annotation (for an example, see below).
            Using this additional annotation, you can specify the list of items that should be
            offered in an array of Strings. Specify the items by adding two array entries for each
            item: first, the label to be shown; second, the value to be stored. </para>
          <para>
            <programlisting>@Property(type = PropertyType.RADIO_CHOICE, displayName = "Withdrawl limit", required = true)
@Help(displayHelpShort = "The maximum daily withdrawl amount ", displayHelpLong = "Choose the maximum daily amount that can be withdrawn from the account.")
@PropertyItems({ LIMIT_LOW_LABEL, LIMIT_LOW_VALUE, LIMIT_MEDIUM_LABEL, LIMIT_MEDIUM_VALUE, LIMIT_HIGH_LABEL, LIMIT_HIGH_VALUE })
private String withdrawlLimit;</programlisting>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.radio.choice.png"/>
              </imageobject>
            </mediaobject>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center"
                  fileref="images/designer.property.radio.choice.invalid.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.COMBOBOX_CHOICE</title>
          <para>Creates a combobox with fixed options as shown below. Can be a required field and
            shows validation messages as a tooltip. Validation failures are displayed by changing
            the background of the combobox to a light red color.</para>
          <para>This property type expects the class member you have annotated to also have an
            accompanying <literal>@PropertyItems</literal> annotation (for an example, see below).
            Using this additional annotation, you can specify the list of items that should be
            offered in an array of Strings. Specify the items by adding two array entries for each
            item: first, the label to be shown; second, the value to be stored. </para>
          <para>
            <programlisting>@Property(type = PropertyType.COMBOBOX_CHOICE, displayName = "Account type", required = true)
@Help(displayHelpShort = "The type of account", displayHelpLong = "Choose a type of account from the list of options")
@PropertyItems({ ACCOUNT_TYPE_SAVINGS_LABEL, ACCOUNT_TYPE_SAVINGS_VALUE, ACCOUNT_TYPE_JUNIOR_LABEL, ACCOUNT_TYPE_JUNIOR_VALUE, ACCOUNT_TYPE_JOINT_LABEL,
  ACCOUNT_TYPE_JOINT_VALUE, ACCOUNT_TYPE_TRANSACTIONAL_LABEL, ACCOUNT_TYPE_TRANSACTIONAL_VALUE, ACCOUNT_TYPE_STUDENT_LABEL, ACCOUNT_TYPE_STUDENT_VALUE,
  ACCOUNT_TYPE_SENIOR_LABEL, ACCOUNT_TYPE_SENIOR_VALUE })
private String accountType;</programlisting>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.combobox.choice.png"/>
              </imageobject>
            </mediaobject>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center"
                  fileref="images/designer.property.combobox.choice.invalid.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.DATE_PICKER</title>
          <para>Creates a date selection control as shown below. Can be a required field and shows
            validation messages as a tooltip (note, that the control used will auto-set the
            selection to the date on the system, so the value is seldom empty). Validation failures
            are displayed by changing the background of the control to a light red color.</para>
          <para>This property type expects the class member you have annotated to also have an
            accompanying <literal>@DatePickerProperty</literal> annotation (for an example, see
            below). Using this additional annotation, you can specify the date time pattern to be
            used to store dates in the diagram and the type of datepicker you would like to be
            shown. Both attributes are optional and have default values that will be used if you
            don't specify them (these are static variables in the
              <literal>DatePickerProperty</literal> annotation). The
              <literal>dateTimePattern</literal> attribute should be used to supply a pattern to the
              <literal>SimpleDateFormat</literal> class. When using the <literal>swtStyle</literal>
            attribute, you should specify an integer value that is supported by
              <literal>SWT</literal>'s <literal>DateTime</literal> control, because this is the
            control that is used to render this type of property.</para>
          <para>
            <programlisting>@Property(type = PropertyType.DATE_PICKER, displayName = "Expiry date", required = true)
@Help(displayHelpShort = "The date the account expires ", displayHelpLong = "Choose the date when the account will expire if no extended before the date.")
@DatePickerProperty(dateTimePattern = "MM-dd-yyyy", swtStyle = 32)
private String expiryDate;</programlisting>
          </para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.date.picker.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
        <section>
          <title>PropertyType.DATA_GRID</title>
          <para>Creates a data grid control as shown below. A data grid can be used to allow the
            user to enter an arbitrary amount of rows of data and enter values for a fixed set of
            columns in each of those rows (each individual combination of row and column is referred
            to as a cell). Rows can be added and removed as the user sees fit.</para>
          <para>This property type expects the class member you have annotated to also have an
            accompanying <literal>@DataGridProperty</literal> annotation (for an example, see
            below). Using this additional annotation, you can specify some specific attributes of
            the data grid. You are required to reference a different class to determine which
            columns go into the grid with the <literal>itemClass</literal> attribute. Activiti
            Designer expects the member type to be a <literal>List</literal>. By convention, you can
            use the class of the <literal>itemClass</literal> attribute as its generic type. If, for
            example, you have a grocery list that you edit in the grid, you would define the columns
            of the grid in the <literal>GroceryListItem</literal> class. From your
              <literal>CustomServiceTask</literal>, you would refer to it like this:</para>
          <para>
            <programlisting>@Property(type = PropertyType.DATA_GRID, displayName = "Grocery List")
@DataGridProperty(itemClass = GroceryListItem.class)
private List&lt;GroceryListItem> groceryList;</programlisting>
          </para>
          <para>The "itemClass" class uses the same annotations you would otherwise use to specify
            fields of a <literal>CustomServiceTask</literal>, with the exception of using a data
            grid. Specifically, <literal>TEXT</literal>, <literal>MULTILINE_TEXT</literal> and
              <literal>PERIOD</literal> are currently supported. You'll notice the grid will create
            single line text controls for each field, regardless of the
              <literal>PropertyType</literal>. This is done on purpose to keep the grid graphically
            appealing and readable. If you consider the regular display mode for a
              <literal>PERIOD</literal>
            <literal>PropertyType</literal> for instance, you can imagine it would never properly
            fit in a grid cell without cluttering the screen. For <literal>MULTILINE_TEXT</literal>
            and <literal>PERIOD</literal>, a double-click mechanism is added to each field which
            pops up a larger editor for the <literal>PropertyType</literal>. The value is stored to
            the field after the user clicks OK and is therefore readable within the grid.</para>
          <para>Required attributes are handled in a similar manner to regular fields of type
              <literal>TEXT</literal> and the entire grid is validated as soon as any field loses
            focus. The background color of the text control in a specific cell of the data grid is
            changed to light red if there are validation failures.</para>
          <para>By default, the component allows the user to add rows, but not to determine the
            order of those rows. If you wish to allow this, you should set the
              <literal>orderable</literal> attribute to true, which enables buttons at the end of
            each row to move it up or down in the grid. <note>
              <para>At the moment, this property type is not correctly injected into your runtime
                class.</para>
            </note></para>
          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.property.datagrid.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </section>
      </section>
      <section>
        <title>Disabling default shapes in the palette</title>
        <para>This customization requires you to include a class in your extension that implements
          the <literal>DefaultPaletteCustomizer</literal> interface. You should not implement this
          interface directly, but subclass the <literal>AbstractDefaultPaletteCustomizer</literal>
          base class. Currently, this class provides no functionality, but future versions of the
            <literal>DefaultPaletteCustomizer</literal> interface will offer more capabilities for
          which this base class will provide some sensible defaults so it's best to subclass so your
          extension will be compatible with future releases. </para>
        <para>Extending the <literal>AbstractDefaultPaletteCustomizer</literal> class requires you
          to implement one method, <literal>disablePaletteEntries()</literal>, from which you must
          return a list of <literal>PaletteEntry</literal> values. For each of the default shapes,
          you can disable it by adding its corresponding <literal>PaletteEntry</literal> value to
          your list. Note that if you remove shapes from the default set and there are no remaining
          shapes in a particular drawer, that drawer will be removed from the palette in its
          entirety. If you wish to disable all of the default shapes, you only need to add
            <literal>PaletteEntry.ALL</literal> to your result. As an example, the code below
          disables the Manual task and Script task shapes in the palette.</para>
        <para>
          <programlisting>public class MyPaletteCustomizer extends AbstractDefaultPaletteCustomizer {

  /*
   * (non-Javadoc)
   *
   * @see org.activiti.designer.integration.palette.DefaultPaletteCustomizer#disablePaletteEntries()
   */
  @Override
  public List&lt;PaletteEntry> disablePaletteEntries() {
    List&lt;PaletteEntry> result = new ArrayList&lt;PaletteEntry>();
    result.add(PaletteEntry.MANUAL_TASK);
    result.add(PaletteEntry.SCRIPT_TASK);
    return result;
  }

}</programlisting>
        </para>
        <para>The result of applying this extension is shown in the picture below. As you can see,
          the manual task and script task shapes are no longer available in the
            <literal>Tasks</literal> drawer.</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center"
                fileref="images/designer.palette.disable.manual.and.script.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>To disable all of the default shapes, you could use something similar to the code
          below.</para>
        <para>
          <programlisting>public class MyPaletteCustomizer extends AbstractDefaultPaletteCustomizer {

  /*
   * (non-Javadoc)
   *
   * @see org.activiti.designer.integration.palette.DefaultPaletteCustomizer#disablePaletteEntries()
   */
  @Override
  public List&lt;PaletteEntry> disablePaletteEntries() {
    List&lt;PaletteEntry> result = new ArrayList&lt;PaletteEntry>();
    result.add(PaletteEntry.ALL);
    return result;
  }

}</programlisting>
        </para>
        <para>The result will look like this (notice that the drawers the default shapes were in are
          no longer in the palette):</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/designer.palette.disable.all.png"/>
            </imageobject>
          </mediaobject>
        </para>
      </section>
    </section>
    <section>
      <title>Validating diagrams and exporting to custom output formats</title>
      <para>Besides customizing the palette, you can also create extensions to Activiti Designer
        that can perform validations and save information from the diagram to custom resources in
        the Eclipse workspace. There are built-in extension points for doing this and this section
        explains how to use them.</para>
      <para>Activiti Designer allows you to write extensions that validate diagrams. There are
        already validations of BPMN constructs in the tool by default, but you can add your own if
        you want to validate additional items such as modeling conventions or the values in
        properties of <literal>CustomServiceTask</literal>s. These extensions are known as
          <literal>Process Validators</literal>.</para>
      <para>You can also Activiti Designer to publish to additional formats when saving diagrams.
        These extensions are called <literal>Export Marshallers</literal> and are invoked
        automatically by Activiti Designer on each save action by the user. This behavior can be
        enabled or disabled by setting a preference in Eclipse's preferences dialog for each format
        to be saved.</para>
      <para>You can compare these extensions to the BPMN 2.0 validation, BPMN 2.0 export and process
        image saving that's performed during save actions by default in Activiti Designer. In fact,
        these functions use exactly the same extension features you can use to save to your own
        formats.</para>
      <para>Often, you will want to combine a <literal>ProcessValidator</literal> and an
          <literal>ExportMarshaller</literal>. Let's say you have a number of
          <literal>CustomServiceTask</literal>s in use that have properties you would like to use in
        the process that gets generated. However, before the process is generated, you want to
        validate some of those values first. Combining a <literal>ProcessValidator</literal> and
          <literal>ExportMarshaller</literal> is the best way to accomplish this and Activiti
        Designer enables you to plug your extensions into the tool seamlessly.</para>
      <para>To create a <literal>ProcessValidator</literal> or an
          <literal>ExportMarshaller</literal>, you need to create a different kind of extension than
        for extending the palette. The reason for this is simple: from your code you will need
        access to more APIs than are offered by the integration library. In particular, you will
        need classes that are available in Eclipse itself. So to get started, you should create an
        Eclipse plugin (which you can do by using Eclipse's PDE support) and package it in a custom
        Eclipse product or feature. It's beyond the scope of this user guide to explain all the
        details involved in developing Eclipse plugins, so the instructions below are limited to the
        functionality for extending Activiti Designer.</para>
      <para>Your bundle should be dependent on the following libraries:</para>
      <para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/designer.export.dependencies.png"/>
          </imageobject>
        </mediaobject>
      </para>
      <para>Both <literal>ProcessValidator</literal>s and <literal>ExportMarshaller</literal>s are
        created by extending a base class. These base classes inherit some useful methods from their
        superclass, the <literal>AbstractDiagramWorker</literal> class. Using these methods you can
        create information, warning and error markers that show up in Eclipse's problems view for
        the user to figure out what's wrong or important. You can also access the diagram through
          <literal>Resources</literal> and <literal>InputStreams</literal> for the diagram's content
        using these methods in the <literal>AbstractDiagramWorker</literal> class.</para>
      <para>It's probably a good idea to invoke <literal>clearMarkers()</literal> as one of the
        first things you do in either a <literal>ProcessValidator</literal> or an
          <literal>ExportMarshaller</literal>; this will clear any previous markers for your worker
        (markers are automatically linked to the worker and clearing markers for one worker leaves
        other markers untouched). For example:</para>
      <para>
        <programlisting>// Clear markers for this diagram first
clearMarkers(getResource(diagram.eResource().getURI()));</programlisting>
      </para>
      <para>You should also use the progress monitor provided to report your progress back to the
        user because validations and/or marshalling actions can take up some time during which the
        user is forced to wait. Reporting progress requires some knowledge of how you should use
        Eclipse's features. Take a look at <ulink
          url="http://www.eclipse.org/articles/Article-Progress-Monitors/article.html">this
          article</ulink> for a thorough explanation of the concepts and usage.</para>
      <section>
        <title>Creating a ProcessValidator extension</title>
        <para>Create an extension to the
            <literal>org.activiti.designer.eclipse.extension.validation.ProcessValidator</literal>
          extension point in your <literal>plugin.xml</literal> file. For this extension point, you
          are required to subclass the <literal>AbstractProcessValidator</literal> class. </para>
        <para>
          <programlisting>&lt;?eclipse version="3.6"?>
&lt;plugin>
  &lt;extension
    point="org.activiti.designer.eclipse.extension.validation.ProcessValidator">
    &lt;ProcessValidator
      class="org.acme.validation.AcmeProcessValidator">
    &lt;/ProcessValidator>
  &lt;/extension>
&lt;/plugin></programlisting>
          <programlisting>public class AcmeProcessValidator extends AbstractProcessValidator {
}</programlisting>
        </para>
        <para>You have to implement a number of methods. Most importantly, implement
            <literal>getValidatorId()</literal> so you return a globally unique ID for your
          validator. This will enable you to invoke it from and <literal>ExportMarshaller</literal>,
          or event let someone <emphasis>else</emphasis> invoke your validator from their
            <literal>ExportMarshaller</literal>. Implement <literal>getValidatorName()</literal> and
          return a logical name for your validator. This name is shown to the user in dialogs. In
            <literal>getFormatName()</literal>, you can return the type of diagram the validator
          typically validates.</para>
        <para>The validation work itself is done in the <literal>validateDiagram()</literal> method.
          From this point on, it's up to your specific functionality what you code here. Typically,
          however, you will want to start by getting hold of the nodes in the diagram's process, so
          you can iterate through them, collect, compare and validate data. This snippet shows you
          how to do this:</para>
        <para>
          <programlisting>final EList&lt;EObject> contents = getResourceForDiagram(diagram).getContents();
for (final EObject object : contents) {
  if (object instanceof StartEvent ) {
  // Perform some validations for StartEvents
  }
  // Other node types and validations
}</programlisting>
        </para>
        <para>Don't forget to invoke <literal>addProblemToDiagram()</literal> and/or
            <literal>addWarningToDiagram()</literal>, etc as you go through your validations. Make
          sure you return a correct boolean result at the end to indicate whether you consider the
          validation as succeeded or failed. This can be used by and invoking
            <literal>ExportMarshaller</literal> to determine the next course of action.</para>
      </section>
      <section>
        <title>Creating an ExportMarshaller extension</title>
        <para>Create an extension to the
            <literal>org.activiti.designer.eclipse.extension.export.ExportMarshaller</literal>
          extension point in your <literal>plugin.xml</literal> file. For this extension point, you
          are required to subclass the <literal>AbstractExportMarshaller</literal> class. This
          abstract base class provides you with a number of useful methods when marshalling to your
          own format, but most importantly it allows you to save resources to the workspace and to
          invoke validators.</para>
        <para>
          <programlisting>&lt;?eclipse version="3.6"?>
&lt;plugin>
  &lt;extension
    point="org.activiti.designer.eclipse.extension.export.ExportMarshaller">
    &lt;ExportMarshaller
      class="org.acme.export.AcmeExportMarshaller">
    &lt;/ExportMarshaller>
  &lt;/extension>
  &lt;/plugin></programlisting>
          <programlisting>public class AcmeExportMarshaller extends AbstractExportMarshaller {
}</programlisting>
        </para>
        <para>You are required to implement some methods, such as
            <literal>getMarshallerName()</literal> and <literal>getFormatName()</literal>. These
          methods are used to display options to the user and to show information in progress
          dialogs, so make sure the descriptions you return reflect the functionality you are
          implementing. </para>
        <para>The bulk of your work is performed in the <literal>marshallDiagram(Diagram diagram,
            IProgressMonitor monitor)</literal> method. You are provided with the diagram object,
          which contains all of the information about the objects in the diagram (BPMN constructs)
          and the graphical representation.</para>
        <para>If you want to perform a certain validation first, you can invoke the validator
          directly from your marshaller. You receive a boolean result from the validator, so you
          know whether validation succeeded. In most cases you won't want to proceed with
          marshalling the diagram if it's not valid, but you might choose to go ahead anyway or even
          create a different resource if validation fails. For example:</para>
        <para>
          <programlisting>final boolean validDiagram = invokeValidator(AcmeConstants.ACME_VALIDATOR_ID, diagram, monitor);
if (!validDiagram) { 
  addProblemToDiagram(diagram, "Marshalling to " + getFormatName() + " format was skipped because validation of the diagram failed.", null);
} else {
  //proceed with marshalling
}</programlisting>
        </para>
        <para>As you can see, here we have chosen to cancel the marshalling if the validator
          (identified by a constant here) returns false as result. We have also added an additional
          marker to the diagram so the user can see an explanation why the file wasn't created. This
          is not required, but seems helpful to the user and shows how you can use these utilities
          from both <literal>ProcessValidator</literal>s and <literal>ExportMarshaller</literal>s. </para>
        <para>Once you have all the data you need, you should invoke the
            <literal>saveResource()</literal> method to create a file containing your data. You can
          invoke <literal>saveResource()</literal> as many times as you wish from a single
            <markup>ExportMarshaller</markup>; a marshaller can therefore be used to create more
          than one output file.</para>
        <para>You can construct a filename for your output resource(s) by using some of the methods
          in the <literal>AbstractDiagramWorker</literal> class. There are a couple of useful
          variables you can have parsed, allowing you to create filenames such as
          &lt;original-filename>_&lt;my-format-name>.xml. These variables are described in the
          Javadocs, but here's an example how to use one of them:</para>
        <para>
          <programlisting>private static final String FILENAME_PATTERN = ExportMarshaller.PLACEHOLDER_ORIGINAL_FILENAME + ".acme.axml";
...
saveResource(getRelativeURIForDiagram(diagram, FILENAME_PATTERN), bais, this.monitor);</programlisting>
        </para>
        <para>What happens here is that a static member is used to describe the filename pattern
          (this is just a best practice, you can specify the string any way you like of course) and
          the pattern uses the <literal>ExportMarshaller.PLACEHOLDER_ORIGINAL_FILENAME</literal>
          constant to insert a variable for the original filename. Later on in the
            <literal>marshallDiagram()</literal> method,
            <literal>getRelativeURIForDiagram()</literal> is invoked and it will parse the filename
          for any variables and substitute them. You provide <literal>saveResource()</literal> with
          an <literal>InputStream</literal> to your data and it will save the data to a resource
          with a relative path to the original diagram.</para>
        <para>Again, you should also use the progress monitor provided to report your progress back
          to the user. How to do this is described in <ulink
            url="http://www.eclipse.org/articles/Article-Progress-Monitors/article.html">this
            article</ulink>.</para>
      </section>
    </section>
  </section>
</chapter>
