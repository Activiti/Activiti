<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="activitiExplorer">

  <title>Activiti Explorer</title>
  
  <para>
    Activiti Explorer is a web application that is included when you download Activiti from the
    Activiti website. The purpose of Explorer is not a finished, end-user ready application, but 
    rather to excersise and show the functionality of Activiti. As such, Explorer is meant as a demo,
    or maybe inspiration for people using Activti in there own applications. Out of the box, Explorer 
    uses an in-memory database, but it is easy to switch to your own database (see the applicationContext files in the WEB-INF folder).
  </para>
  <para> 
    After logging into the application, you will see three large icons that show the main capabilities.
    <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.tabs.png"/></imageobject></mediaobject>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Tasks</emphasis>: Task management functionality.
          Here you can see user tasks from running processes that are assigned to you, or
          see group tasks which you can claim. Explorer allows to relate content, divide
          work into subtasks, involve people in different roles, etc ... Explorer can also be used
          to create standalone tasks that are not related to any process.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Process</emphasis>: shows the deployed process definitions,
          and allows to start new process instances.
        </para>
      </listitem>
       <listitem>
        <para>
          <emphasis role="bold">Reporting</emphasis>: generate reports and view previously 
          saved results. See <link linkend="explorer.reporting">the section on reporting</link> for more details.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Manage</emphasis>: only visible when the logged in user has 
          administrator rights. Allows to administrate the Activiti engine: manage users and groups,
          execute and see stuck jobs, see the database and deploy new process definitions.
        </para>
      </listitem>
    </itemizedlist> 
  </para>
  
  <section>
  
    <title>Process diagram</title>
    
    <para>
      The Explorer includes functionality to dynamically generate an overview of a process definition using the <ulink url="http://raphaeljs.com/">RaphaÃ«l</ulink> Javascript framework.
      This process image can only be generated when the process definition XML contains BPMN DI information. When there's no BPMN DI information in the process definition XML and the deployment contains a process definition image, that image will be shown.
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.process.definition.image.png"/></imageobject></mediaobject>
    </para>
    <para>
      When you don't want to use the Javascript process definition overview you can disable it in the ui.properties file
      <programlisting>activiti.ui.jsdiagram = false</programlisting>
    </para>
    <para>
      In addition to showing the process diagram in the Explorer it's also easy to include the process diagram anywhere you want.
      The following URL will show the process definition image, based on a process definition id: 
      <programlisting>http://localhost:8080/activiti-explorer/diagram-viewer/index.html?processDefinitionId=reviewSaledLead:1:36</programlisting>
      It's also possible to show the current state of a process instance by adding a processInstanceId request parameter like this: 
      <programlisting>http://localhost:8080/activiti-explorer/diagram-viewer/index.html?processDefinitionId=reviewSaledLead:1:36&amp;processInstanceId=41</programlisting>
    </para>
  </section>
  
  <section>
  
    <title>Tasks</title>
    
    <para>
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.tasks.png"/></imageobject></mediaobject>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Inbox:</emphasis> shows the tasks where the logged in user is the assignee.
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">My tasks:</emphasis> shows the tasks where the logged in user is the owner.
            When you create a standalone task, you are automatically made owner of the task.
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">Queued:</emphasis> shows the different groups which you are part
            of. Tasks here must first be claimed before they can be completed.
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">Involved:</emphasis> shows the tasks where the logged in user is
            involved with (i.e. not assignee or owner).
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">Archived</emphasis> contains the past (historical) tasks.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  
  </section>
  
  <section>
  
    <title>Start process instances</title>
    
    <para>
      The <emphasis role="bold">Process definitions</emphasis> tab, allows to see all process definitions
      that are deployed to the Activiti engine. You can start new process instances using the 
      button on the top right. If the process definition has a start <link linkend="forms">form</link>, the form will
      be displayed before starting the process instance.
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.process.definitions.png"/></imageobject></mediaobject>
    </para>
  
  </section>
  
   <section>
  
    <title>My instances</title>
    
    <para>
      The <emphasis role="bold">My instances</emphasis> tab, shows all the process instances 
      where you currently have an uncompleted user task. It also visually shows the current activities
      of the process instance and the stored process variables.
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.my.instances.png"/></imageobject></mediaobject>
    </para>
  
  </section>
  
    <section>
  
    <title>Administration</title>
    
    <para>
      The administration functionality is only available when the logged in user is part
      of the security group <emphasis>admin</emphasis>.
      When clicking the <emphasis>Manage</emphasis> icon, following tabs are available:
      
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Database:</emphasis> Shows the content of the database.
            Extremely useful when developing processes or troubleshooting problems.
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.database.png"/></imageobject></mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Deployments:</emphasis>
            Shows the current deployments of the engine, and see the content of a deployment (process definitions, images, business rules, etc.)
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.deployments.png"/></imageobject></mediaobject>
            You can also upload new deployments when clicking the <emphasis>deployment</emphasis> tab.
            Select a business archive or a bpmn20.xml file from your computer, or simply drag and drop to
            the designated area to deploy the new business processes.
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.upload.deployment.png"/></imageobject></mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Jobs:</emphasis> Shows the current jobs (timers, etc.) on the left
            and allows to manually execute them (e.g. firing a timer before the deadline). Also
            shows any exceptions, if the jobs failed to execute (e.g. mail server could not be reached)
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.jobs.png"/></imageobject></mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Users and Groups:</emphasis> manage the users and groups: create, edit and delete 
            users and groups. Relate users to groups such they have more privileges or they can see
            tasks assigned to specific groups.
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.users.png"/></imageobject></mediaobject>
          </para>
        </listitem>
      </itemizedlist>
       
    </para>
  
  </section>
  
  <section id="explorer.reporting">
  
    <title>Reporting</title>
    
    <para>
      Activiti Explorer ships with some report examples and has the capability to easily
      add new reports to the system. The report functionality is grouped under the 
      main tab <emphasis>'Reports'</emphasis>.
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.reporting.png"/></imageobject></mediaobject>
      <emphasis role="bold">Important</emphasis>: for reporting to work, Explorer needs to 
      be configured with a history level different from none. The default configuration 
      fulfills this requirement.                       
    </para>
    
    <para>
        The reporting tab currently shows two sub-tabs:
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Generate reports</emphasis>: shows a list of all reports
                    known to the system. Allows to run the report generation.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Saved reports</emphasis>: shows a list of all reports
                    that were previously saved. Note that these are personal saved reports only,
                    and it is not possible to see the saved reports of someone else.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    
    <para>
      The data that is used to create lists and charts in the report is generated by a process.
      While this may seem odd at first, using a process to generate the report data has several advantages
      <itemizedlist>
        <listitem>
            <para>
                The process has straight access to the internals of the Activiti engine. It has
                direct access to the database used by the engine.
            </para>
        </listitem>
        <listitem>
            <para>
                The job executor can be used as for any other process. This means that
                you can asynchronously generate the process or only execute certain steps
                asynchronously. It also means you can use timers, eg. to generate the report data
                on certain points in time.
            </para>
        </listitem>
        <listitem>
            <para>
                Creating a new report can be done with known tools and known concepts.
                Also, no new concepts, services or applications are needed. Deploying or
                uploading a new report is the same as deploying a new process.
            </para>
        </listitem>
        <listitem>
            <para>
                It allows to use the BPMN 2.0 constructs. This means that all things like 
                parallel steps, do branching based on data or even request user input during the generation
                are possible out-of-the-box.
            </para>
        </listitem>
      </itemizedlist> 
      
      Process definitions that generate report data need to have <emphasis role="bold">'activiti-report' as category</emphasis> 
      to be seen in the list of known reports in Explorer. A 'report process' can be as simple or as complex as wanted.
      The only requirement to actually be able to see the report, is that the process produces a variable
      called <emphasis role="bold">reportData</emphasis> is created. This variable must be a byte array representation
      of a json object. This variable is stored in the hisory tables of Activiti
      (hence the requirement that history must be enabled for the engine) so it can be retrieved later 
      when the report is saved. 
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.reporting.explained.png"/></imageobject></mediaobject>
    </para>
    
    <section id="explorer.reporting.json">
    
        <title>Report data JSON</title>
        
        <para>
          A report process must generate a variable <emphasis>reportData</emphasis> that is a JSON representation
          of the data that must be displayed to the user. The json should look as follows:
          <programlisting>
{
  &quot;title&quot;: &quot;My Report&quot;,
  &quot;datasets&quot;: [
    {
      &quot;type&quot; : &quot;lineChart&quot;,
      &quot;description&quot; : &quot;My first chart&quot;,
      &quot;xaxis&quot; : &quot;Category&quot;
      &quot;yaxis&quot; : &quot;Total sales&quot;
      &quot;data&quot; : 
      {
        &quot;A&quot; : 50,
        &quot;B&quot; : 33,
        &quot;C&quot; : 17,
        &quot;D&quot; : 87,
      }
    }
  ]
}          
          </programlisting>
          This json will be fetched at runtime in Explorer and will be used to generate 
          charts or lists. The elements in the json are:
          <itemizedlist>
            <listitem>
                <para><emphasis role="bold">title</emphasis>: this is the general title for the whole report</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">datasets</emphasis>: this is an array of datasets corresponding with
                the different charts and lists on the report.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">type</emphasis>Each dataset has a type. This type will be used
                to determine how the data will be rendered. Currently supported values are:
                <emphasis role="bold">pieChart, lineChart, barChart and list.</emphasis></para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">description</emphasis>: each chart can have an optional description
                that will be shown in the report.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">x- and yaxis</emphasis>: only usable for type <emphasis>lineChart</emphasis>.
                Optional parameter that determines the name of the axes of the chart</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">data</emphasis>: this is the actual data. The data is a json 
                object with key-value elements.</para>
            </listitem>
          </itemizedlist>
        </para>
        
    </section>
    
    <section id="explorer.reporting.example">
    
        <title>Example process</title>
        
        <para>
            The following example shows a 'process instance overview' report. The process itself is very easy and
            contains only a script task (besides start and end) that generates the json dataset using javascript. Altough all of the 
            examples in Explorer use scripting, this can very well be done using Java service tasks. The end result of
            running the process should just be the <emphasis>reportData</emphasis> variable that contains the data.
        </para>
        
        <para>
            <emphasis role="bold">Important note:</emphasis> The following example only works on JDK 7+.
            The reason for this is that the javascript engine (<emphasis>Rhino</emphasis>) that is shipped
            with older JDK versions isn't advanced enough to cope with some constructs needed to write
            scripts like the one below. See below for a JDK 6+ compliant example.
        </para>
        
        <para>
            <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
    xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot;
    xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot;
    expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot; 
    targetNamespace=&quot;activiti-report&quot;&gt;

    &lt;process id=&quot;process-instance-overview-report&quot; name=&quot;Process Instance Overview&quot; isExecutable=&quot;true&quot;&gt;
    
        &lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot; /&gt;
        &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;startevent1&quot; targetRef=&quot;generateDataset&quot; /&gt;
        
        &lt;scriptTask id=&quot;generateDataset&quot; name=&quot;Execute script&quot; scriptFormat=&quot;JavaScript&quot; activiti:autoStoreVariables=&quot;false&quot;&gt;
          &lt;script&gt;&lt;![CDATA[
          
               importPackage(java.sql);
               importPackage(java.lang);
               importPackage(org.activiti.explorer.reporting);
               
               var result = ReportingUtil.executeSelectSqlQuery(&quot;SELECT PD.NAME_, PD.VERSION_ , count(*) FROM ACT_HI_PROCINST PI inner join ACT_RE_PROCDEF PD on PI.PROC_DEF_ID_ = PD.ID_ group by PROC_DEF_ID_&quot;);
            
               var reportData = {};
               reportData.datasets = [];
               
               var dataset = {};
               dataset.type = &quot;pieChart&quot;;
               dataset.description = &quot;Process instance overview (&quot; + new java.util.Date() + &quot;)&quot;;
               dataset.data = {};
            
               while (result.next()) { // process results one row at a time
                 var name = result.getString(1);
                 var version = result.getLong(2)
                 var count = result.getLong(3);
                 dataset.data[name + &quot; (v&quot; + version + &quot;)&quot;] = count;
               }
               reportData.datasets.push(dataset);
               
               execution.setVariable(&quot;reportData&quot;, new java.lang.String(JSON.stringify(reportData)).getBytes(&quot;UTF-8&quot;));
          ]]&gt;&lt;/script&gt;
        &lt;/scriptTask&gt;
        &lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;generateDataset&quot; targetRef=&quot;theEnd&quot; /&gt;
        
        &lt;endEvent id=&quot;theEnd&quot; /&gt;
        
    &lt;/process&gt;

&lt;/definitions&gt;            
            </programlisting>
       </para>
       
       <para>    
            Besides the typical XML linea at the top of the process xml, the main difference is that the 
            <emphasis>targetNamespace</emphasis> is set to <emphasis role="bold">activiti-report</emphasis>,
            adding the category with the same name to the deployed process definition.
        </para>
        
        <para>
            The first lines of the script are just some imports to avoid having to type the package names
            all the time. The first line of interest is where the <emphasis>ReportingUtil</emphasis> is used
            to query the Activiti database. The result of that call is a regular <emphasis>JDBC Resultset</emphasis>.
            In the lines following the query, the javascript capabilities to easily create json is used. 
            The json that is produced matches <link linkend="explorer.reporting.json">the requirements</link>.
        </para>
        
        <para>
            The last line of the script may seem a bit odd. The first thing we need to do is to convert
            the json object to a string by using the javascript function <emphasis>JSON.stringify()</emphasis>.
            This string then needs to be stored as a byte array variable. The reason for this is technical:
            a byte array is unlimited in size while the string is not. That is why the javascript string
            must be converted to a Java string which has the capability to get the byte representation.
        </para>
        
        <para>
            The same process which is compatible with JDK 6 (and higher) looks a bit different. The native
            json capabilities cannot be used, hence some helper classes (<emphasis>ReportData</emphasis> and <emphasis>Dataset</emphasis>)
            are provided:
            <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
    xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot;
    xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot;
    expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot; 
    targetNamespace=&quot;activiti-report&quot;&gt;

    &lt;process id=&quot;process-instance-overview-report&quot; name=&quot;Process Instance Overview&quot; isExecutable=&quot;true&quot;&gt;
    
        &lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot; /&gt;
        &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;startevent1&quot; targetRef=&quot;generateDataset&quot; /&gt;
        
        &lt;scriptTask id=&quot;generateDataset&quot; name=&quot;Execute script&quot; scriptFormat=&quot;js&quot; activiti:autoStoreVariables=&quot;false&quot;&gt;
          &lt;script&gt;&lt;![CDATA[
          
               importPackage(java.sql);
               importPackage(java.lang);
               importPackage(org.activiti.explorer.reporting);
               
               var result = ReportingUtil.executeSelectSqlQuery(&quot;SELECT PD.NAME_, PD.VERSION_ , count(*) FROM ACT_HI_PROCINST PI inner join ACT_RE_PROCDEF PD on PI.PROC_DEF_ID_ = PD.ID_ group by PROC_DEF_ID_&quot;);

<emphasis role="bold">            
               var reportData = new ReportData;
               var dataset = reportData.newDataset();
               dataset.type = &quot;pieChart&quot;;
               dataset.description = &quot;Process instance overview (&quot; + new java.util.Date() + &quot;)&quot;
</emphasis>               
               
               while (result.next()) { // process results one row at a time
                 var name = result.getString(1);
                 var version = result.getLong(2);
                 var count = result.getLong(3);
                 <emphasis role="bold">dataset.add(name + &quot; (v&quot; + version + &quot;)&quot;, count);</emphasis>
               }
               
               execution.setVariable(&quot;reportData&quot;, reportData.toBytes());
               
          ]]&gt;&lt;/script&gt;
        &lt;/scriptTask&gt;
        &lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;generateDataset&quot; targetRef=&quot;theEnd&quot; /&gt;
        
        &lt;endEvent id=&quot;theEnd&quot; /&gt;
        
    &lt;/process&gt;

&lt;/definitions&gt;            
            </programlisting>
        </para>
    
    </section>
    
    <section id="explorer.reporting.start.form">
    
        <title>Report start forms</title>
        
        <para>
            As reports are generated by regular processes, the regular form capabilities can be used.
            Simply add a start form to the start event and Explorer will display the form to the user
            before generating the process.
            <programlisting>
&lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot;&gt;
  &lt;extensionElements&gt;
    &lt;activiti:formProperty id=&quot;processDefinition&quot; name=&quot;Select process definition&quot; type=&quot;processDefinition&quot; required=&quot;true&quot; /&gt;
      &lt;activiti:formProperty id=&quot;chartType&quot; name=&quot;Chart type&quot; type=&quot;enum&quot; required=&quot;true&quot;&gt;
        &lt;activiti:value id=&quot;pieChart&quot; name=&quot;Pie chart&quot; /&gt;
        &lt;activiti:value id=&quot;barChart&quot; name=&quot;Bar chart&quot; /&gt;
      &lt;/activiti:formProperty&gt;
  &lt;/extensionElements&gt;
&lt;/startEvent&gt;            
            </programlisting>
            which is rendered to the user as a typical form:
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.reporting.start.form.png"/></imageobject></mediaobject>
            The form properties are submitted when starting the process and they are available
            as normal execution variables that can be used within the script that generates the data:
            <programlisting> var processDefinition = execution.getVariable("processDefinition");</programlisting>
        </para>
    
    </section>
    
    <section id="explorer.reporting.examples">
    
        <title>Example processes</title>
        
        <para>
            By default, Explorer contains four example reports:
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">Employee productivity</emphasis>: this report 
                        demonstrates the use of a line chart and using a a start form.
                        The script in this report is also complexer as in the other examples,
                        as the data that is fetched is interpreted by the script before stored
                        in the report data.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Helpdesk - firstline vs escalated</emphasis>: shows the 
                        use of a pie chart and combines the result of two separate database queries.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Process instance overview</emphasis>: this is an example
                        of a report where multiple datasets are used. The report contains a pie chart
                        and a list view of the same data, thus showing how multiple datasets can be 
                        used to generate a page with several charts.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Task duration</emphasis>: another example of using a start form
                        and using the corresponding variables to build the SQL query dynamically.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    
    </section>
  
  </section>
  
  <section id="explorer.change.database">
    <title>Changing the database</title>  
    <para>
      To change the database that Explorer uses in the demo setup, change the properties file <literal>apps/apache-tomcat-6.x/webapps/activiti-explorer/WEB-INF/classes/db.properties</literal>.
      Also, place a suitable database driver on the classpath (Tomcat shared libs or in <literal>apps/apache-tomcat-6.x/webapps/activiti-explorer/WEB-INF/lib/</literal>).
    </para>
  </section>
  
</chapter>
