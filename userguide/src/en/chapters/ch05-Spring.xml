<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="springintegration">
  <title>Spring integration</title>

  <para>While you can definitely use Activiti without Spring, we've provided some very nice integration features
  that are explained in this chapter.  
  </para>
  
  <section>
    <title>ProcessEngineFactoryBean</title>
    
    <para>
      The <literal>ProcessEngine</literal> can be configured as a regular Spring bean.
      The starting point of the integration is the class
	    <literal>org.activiti.spring.ProcessEngineFactoryBean</literal>. That bean
	    takes a process engine configuration and creates the process engine. 
	    This means that the creation and configuration of properties for Spring is the same as documented in the <link linkend="configuration">configuration section</link>.
	    For Spring integration the configuration and engine beans will look like this:    
    <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
    ...
&lt;/bean&gt;
  
&lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;
  &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;
&lt;/bean&gt;
  </programlisting>
      Note that the <literal>processEngineConfiguration</literal> bean now uses the 
      <literal>org.activiti.spring.SpringProcessEngineConfiguration</literal> class.
    </para>
  </section>

  <section>
    <title>Transactions</title>
    <para>We'll explain the <literal>SpringTransactionIntegrationTest</literal> found in the Spring examples
    of the distribution step by step.  
    Below is the Spring configuration file that we use in this example 
    (you can find it in SpringTransactionIntegrationTest-context.xml). The section shown below 
    contains the dataSource, transactionManager, processEngine and the Activiti
    Engine services.
    </para>
    <para>
      When passing the DataSource to the <literal>SpringProcessEngineConfiguration</literal> (using property "dataSource"), Activiti uses a <literal>org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy</literal> internally, which wraps the passed DataSource.
      This is done to make sure the SQL connections retrieved from the DataSource and the Spring transactions play well together.
      This implies that it's no longer needed to proxy the dataSource yourself in Spring configuration, although it's still allowed to pass a <literal>TransactionAwareDataSourceProxy</literal> into the <literal>SpringProcessEngineConfiguration</literal>.
      In this case no additional wrapping will occur.
    </para>
    <para>
      <emphasis role="bold">Make sure when declaring a <literal>TransactionAwareDataSourceProxy</literal> in Spring configuration yourself, that you don't use it for resources that are already aware of Spring-transactions (e.g. DataSourceTransactionManager and JPATransactionManager need the un-proxied dataSource).</emphasis>
    </para>
    <programlisting>
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;&gt;

  &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.SimpleDriverDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;org.h2.Driver&quot; /&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
    &lt;property name=&quot;username&quot; value=&quot;sa&quot; /&gt;
    &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
  &lt;/bean&gt;
  
  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
  &lt;/bean&gt;
  
  &lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;
    &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;
  &lt;/bean&gt;
  
  &lt;bean id=&quot;repositoryService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getRepositoryService&quot; /&gt;
  &lt;bean id=&quot;runtimeService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getRuntimeService&quot; /&gt;
  &lt;bean id=&quot;taskService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getTaskService&quot; /&gt;
  &lt;bean id=&quot;historyService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getHistoryService&quot; /&gt;
  &lt;bean id=&quot;managementService&quot; factory-bean=&quot;processEngine&quot; factory-method=&quot;getManagementService&quot; /&gt;

...</programlisting>
  <para>The remainder of that Spring configuration file contains the beans and configuration that we'll use in this particular
  example:</para>
  <programlisting>
&lt;beans&gt;  
  ...
  &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;

  &lt;bean id=&quot;userBean&quot; class=&quot;org.activiti.spring.test.UserBean&quot;&gt;
    &lt;property name=&quot;runtimeService&quot; ref=&quot;runtimeService&quot; /&gt;
  &lt;/bean&gt;

  &lt;bean id=&quot;printer&quot; class=&quot;org.activiti.spring.test.Printer&quot; /&gt;

&lt;/beans&gt;</programlisting>
    <para>First the application context is created with any of the Spring ways to do that. In this 
    example you could use a classpath XML resource to configure our Spring application context:
    <programlisting>ClassPathXmlApplicationContext applicationContext = 
    new ClassPathXmlApplicationContext(&quot;org/activiti/examples/spring/SpringTransactionIntegrationTest-context.xml&quot;);</programlisting>
    or, since it is a test:
    <programlisting>@ContextConfiguration(&quot;classpath:org/activiti/spring/test/transaction/SpringTransactionIntegrationTest-context.xml&quot;)</programlisting>
    </para>
    <para>Then we can get the service beans and invoke methods on them.  The ProcessEngineFactoryBean will have 
    added an extra interceptor to the services that applies Propagation.REQUIRED transaction semantics on 
    the Activiti service methods.  So, for example, we can use the repositoryService to deploy
    a process like this:  
    </para>
    <programlisting>RepositoryService repositoryService = (RepositoryService) applicationContext.getBean(&quot;repositoryService&quot;);
String deploymentId = repositoryService
  .createDeployment()
  .addClasspathResource(&quot;org/activiti/spring/test/hello.bpmn20.xml&quot;)
  .deploy()
  .getId();
    </programlisting>
    <para>The other way around also works.  In this case, the Spring transaction will 
    be around the userBean.hello() method and the Activiti service method invocation will join that 
    same transaction. 
    </para>
    <programlisting>UserBean userBean = (UserBean) applicationContext.getBean(&quot;userBean&quot;);
userBean.hello();</programlisting>
    <para>The UserBean looks like this.  Remember from above in the Spring bean configuration we injected the 
    repositoryService into the userBean.</para>
    <programlisting>public class UserBean {

  /** injected by Spring */
  private RuntimeService runtimeService;

  @Transactional
  public void hello() {
    // here you can do transactional stuff in your domain model
    // and it will be combined in the same transaction as 
    // the startProcessInstanceByKey to the Activiti RuntimeService
    runtimeService.startProcessInstanceByKey(&quot;helloProcess&quot;);
  }
  
  public void setRuntimeService(RuntimeService runtimeService) {
    this.runtimeService = runtimeService;
  }
}</programlisting>
  </section>

  <section id="springExpressions">
    <title>Expressions</title>
    <para>When using the ProcessEngineFactoryBean, by default, all <link linkend="apiExpressions">expressions</link> in the BPMN processes
    will also 'see' all the Spring beans. It's possible to limit the beans you want to expose in expressions or even exposing no beans at all using a map that you can configure. 
    The example below exposes a single bean (printer), available to use under the key "printer". 
    <emphasis role="bold">To have NO beans exposed at all, just pass an empty list as 'beans' property on the SpringProcessEngineConfiguration. 
    When no 'beans' property is set, all Spring beans in the context will be available. </emphasis>
    </para>
    <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
  ...
  &lt;property name=&quot;beans&quot;&gt;
    &lt;map&gt;
      &lt;entry key=&quot;printer&quot; value-ref=&quot;printer&quot; /&gt;
    &lt;/map&gt;
  &lt;/property&gt;
&lt;/bean&gt;
  
  &lt;bean id=&quot;printer&quot; class=&quot;org.activiti.examples.spring.Printer&quot; /&gt;
    </programlisting>
    
    <para>Now the exposed beans can be used in expressions: for example, the SpringTransactionIntegrationTest <literal>hello.bpmn20.xml</literal>
    shows how a method on a Spring bean can be invoked using a UEL method expression:
    </para>
    <programlisting>&lt;definitions id=&quot;definitions&quot; ...>
  
  &lt;process id=&quot;helloProcess&quot;&gt;
  
    &lt;startEvent id=&quot;start&quot; /&gt;
    &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;start&quot; targetRef=&quot;print&quot; /&gt;
    
    &lt;serviceTask id=&quot;print&quot; <emphasis role="bold">activiti:expression=&quot;#{printer.printMessage()}&quot;</emphasis> /&gt;
    &lt;sequenceFlow id=&quot;flow2&quot; sourceRef=&quot;print&quot; targetRef=&quot;end&quot; /&gt;
    
    &lt;endEvent id=&quot;end&quot; /&gt;
    
  &lt;/process&gt;

&lt;/definitions&gt;</programlisting>
    <para>Where <literal>Printer</literal> looks like this:</para>
    <programlisting>public class Printer {

  public void printMessage() {
    System.out.println(&quot;hello world&quot;);
  }
}</programlisting>
    <para>And the Spring bean configuration (also shown above) looks like this:</para>
    <programlisting>&lt;beans ...>
  ...

  &lt;bean id=&quot;printer&quot; class=&quot;org.activiti.examples.spring.Printer&quot; /&gt;

&lt;/beans&gt;</programlisting>
  </section>

  <section>
    <title>Automatic resource deployment</title>
    <para>Spring integration also has a special feature for deploying resources.  In the process engine
    configuration, you can specify a set of resources. When the process engine is created,
    all those resources will be scanned and deployed.  There is filtering
    in place that prevents duplicate deployments.  Only when the resources actually have changed, 
    will new deployments be deployed to the Activiti DB. This makes sense in a lot of use case,
    where the Spring container is rebooted often (e.g. testing).
    </para>
    <para>Here's an example:</para>
    <programlisting>
&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;
  ...
  <emphasis role="bold">&lt;property name=&quot;deploymentResources&quot; value=&quot;classpath*:/org/activiti/spring/test/autodeployment/autodeploy.*.bpmn20.xml&quot; /&gt;</emphasis>
&lt;/bean&gt;
  
&lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;
  &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot; /&gt;
&lt;/bean&gt;</programlisting>
  </section>
  
  <section id="springUnitTest">
    <title>Unit testing</title>
    <para>
      When integrating with Spring, business processes can be tested very easily using the
      standard <link linkend="apiUnitTesting">Activiti testing facilities</link>.
      The following example shows how a business process is tested in a typical Spring-based unit test:
      <programlisting>
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(&quot;classpath:org/activiti/spring/test/junit4/springTypicalUsageTest-context.xml&quot;)
public class MyBusinessProcessTest {
  
  @Autowired
  private RuntimeService runtimeService;
  
  @Autowired
  private TaskService taskService;
  
  @Autowired
  @Rule
  public ActivitiRule activitiSpringRule;
  
  @Test
  @Deployment
  public void simpleProcessTest() {
    runtimeService.startProcessInstanceByKey(&quot;simpleProcess&quot;);
    Task task = taskService.createTaskQuery().singleResult();
    assertEquals(&quot;My Task&quot;, task.getName());
  
    taskService.complete(task.getId());
    assertEquals(0, runtimeService.createProcessInstanceQuery().count());
   
  }
}      
      </programlisting>
      Note that for this to work, you need to define a <emphasis>org.activiti.engine.test.ActivitiRule</emphasis>
      bean in the Spring configuration (which is injected by auto-wiring in the example above). 
      <programlisting>
&lt;bean id=&quot;activitiRule&quot; class=&quot;org.activiti.engine.test.ActivitiRule&quot;&gt;
  &lt;property name=&quot;processEngine&quot; ref=&quot;processEngine&quot; /&gt;
&lt;/bean&gt;        
      </programlisting>
    </para>
  </section>
</chapter>
