<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="forms">

	<title>Forms</title>
	
	<para>
	 Activiti provides a convenient and flexible way to add forms for the manual steps of 
	 your business processes.  We support two strategies to work with forms:
	 Build-in form rendering with form properties and external form rendering.
	</para>

<!-- Deprecated, but contains good examples. We should do the same for the form properties.
  
   <section id="buildInFormRendering">
  
    <title>Build-in form rendering</title>

    <para>
      Build-in form rendering is the simplest to get started with.  We'll explain it 
      with an example.
    </para>
    
    <para>
      The demo setup script installs the <emphasis>vacationRequest</emphasis> business process 
      as an example of using task forms through Activiti Explorer. Please check the example
      for the complete source code. The business process diagram looks like this:
      
      <mediaobject><imageobject><imagedata align="center" fileref="images/taskform.vacation.request.model.png"/></imageobject></mediaobject>
      
      To use the build-in rendering, the form files have to be included in the deployment.  
      That can be done programmatically like this:
      
      <programlisting>Deployment deployment = repositoryService.createDeployment()
  .addClasspathResource("org/activiti/examples/taskforms/VacationRequest.bpmn20.xml")
  .addClasspathResource("org/activiti/examples/taskforms/approve.form")
  .addClasspathResource("org/activiti/examples/taskforms/request.form")
  .addClasspathResource("org/activiti/examples/taskforms/adjustRequest.form")
  .deploy();
</programlisting>
      
      Other ways of deploying your processes/forms, can be found in chapter <link linkend="chDeployment">Deployment</link>.
      </para>
      <para> 
      The BPMN 2.0 specification does not specify how tasks or task forms should be rendered, 
      as such forms are defined using Activiti specific constructs.  
      There is the attribute <literal>activiti:formKey</literal> that can be specified on 
      <literal>startEvent</literal>s and <literal>userTask</literal>s.
      
      <programlisting>&lt;startEvent id=&quot;request&quot; 
            <emphasis role="bold">activiti:formKey=&quot;org/activiti/examples/taskforms/request.form</emphasis>&quot; /&gt;

&lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;request&quot; targetRef=&quot;handleRequest&quot; /&gt;
    
&lt;userTask id=&quot;handleRequest&quot; name=&quot;Handle vacation request&quot;
          <emphasis role="bold">activiti:formKey=&quot;org/activiti/examples/taskforms/approve.form&quot;</emphasis> &gt;
  &lt;documentation&gt;
     Vacation request by ${employeeName}
  &lt;/documentation&gt; 
  ...        
 &lt;/userTask&gt;</programlisting>

      The <literal>activiti:formKey</literal> attribute can contain any text value which you use to identify your form in case 
      you do your own form rendering.  But the build-in form rendering 
      expects the <literal>activiti:formKey</literal> to be a reference to a resource in the 
      same business archive (= deployment). The resource is identify by it's full path within the deployment. In our case,
      the form <literal>request.form</literal> was deployed within a Business-archive, in folder <literal>org/activiti/examples/taskforms/</literal>.
    </para>
      
    <para>
      Activiti Explorer uses the build-in form rendering engines.  Currently, there is 
	    only one form rendering engine configured, which is Juel.  So it resolves resource files as 
	    <ulink url="http://download.oracle.com/javaee/5/tutorial/doc/bnahq.html">a Juel expression</ulink> and 
	    the resulting HTML String is sent to the client.  In the future, we 
	    hope to add a FreeMarker form engine, but that will require more library dependencies
	    so we opt for Juel as the default form engine.
	  </para>
	  
	  <para>
      Here is the rendered form defined in resource <literal>org/activiti/examples/taskforms/request.form</literal>.  
      Its a form to capture the data necessary to start a new process instance.

      <mediaobject><imageobject><imagedata align="center" fileref="images/taskform.example.png"/></imageobject></mediaobject>
      
      And here is the contents of that form file:
      
      <programlisting>
&lt;h1&gt;Vacation Request&lt;/h1&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;label&gt;
        Employee name:&lt;br/&gt;
        &lt;input type=&quot;text&quot; name=&quot;employeeName&quot; value=&quot;&quot; /&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;employeeName_required&quot; value=&quot;true&quot; /&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;employeeName_type&quot; value=&quot;User&quot; /&gt;
      &lt;/label&gt;&lt;br/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;  
    &lt;td&gt;
      &lt;label&gt;
        Number of days:&lt;br/&gt;
        &lt;input type=&quot;number&quot; name=&quot;numberOfDays&quot; value=&quot;1&quot; min=&quot;1&quot; /&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;numberOfDays_type&quot; value=&quot;Integer&quot; /&gt;
      &lt;/label&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;label&gt;
         First day of vacation: (YYYY-MM-DD)&lt;br/&gt;
         &lt;input type=&quot;date&quot; name=&quot;startDate&quot;/&gt;
         &lt;input type=&quot;hidden&quot; name=&quot;startDate_type&quot; value=&quot;Date&quot;/&gt;
      &lt;/label&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;label&gt;
         Date of return to work: (YYYY-MM-DD)&lt;br/&gt;
         &lt;input type=&quot;date&quot; name=&quot;returnDate&quot;/&gt;
         &lt;input type=&quot;hidden&quot; name=&quot;returnDate_type&quot; value=&quot;Date&quot;/&gt;
      &lt;/label&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;label&gt;
        &lt;input type=&quot;checkbox&quot; name=&quot;vacationPay&quot;/&gt; Vacation pay requested
        &lt;input type=&quot;hidden&quot; name=&quot;vacationPay_boolean&quot; value=&quot;true&quot;/&gt;
      &lt;/label&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;label&gt;
        Motivation:&lt;br/&gt;
       &lt;textarea name=&quot;vacationMotivation&quot; value=&quot;&quot;&gt;&lt;/textarea&gt;
      &lt;/label&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</programlisting>
    </para>
    
    <para><link linkend="experimental"><emphasis role="bold">&lt;EXPERIMENTAL&gt;</emphasis></link>
    The mechanism of using hidden fields to provide extra information such as type and required
    will be changed in one of the subsequent releases.  In the future this type of metadata will 
    be based on <literal>FormService.getStartFormData</literal> and <literal>FormService.getTaskFormData</literal> 
    </para>
    <para> 
      The hidden 
	    fields provide extra information to the Activiti Explorer client application.
	    So the Javascript in the browser will use the hidden fields and enhance the corresponding 
	    input fields.  For example, it's possible to specify that a certain text field is a date 
	    and Activiti Explorer will add a date picker.
      <itemizedlist>
         <listitem>
          <para>
            Variable names must be camel-cased.
          </para>
        </listitem>
        <listitem>
          <para>
            The default type of the process variable that is stored is <emphasis>string</emphasis>.
            Use a hidden field with the input variable name followed by <emphasis>'_type'</emphasis> to define the type (and hence also the conversion from the HTML
            input to the variable): <programlisting>&lt;input type=&quot;hidden&quot; name=&quot;numberOfDays<emphasis role="bold">_type</emphasis>&quot; value=&quot;Integer&quot; /&gt;</programlisting>
            Currently supported are <emphasis>String, Integer, Boolean, Date</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            Input variables can be made required by adding a hidden field with the input variable name followed
            by '_required':
            <programlisting>&lt;input type=&quot;hidden&quot; name=&quot;employeeName_required&quot; value=&quot;true&quot; /></programlisting>
          </para>
        </listitem>
        <listitem>
          <para>
             In Activiti-Explorer, the <emphasis>Date</emphasis> type validates to ISO 8601 (<emphasis>YYYY-MM-DD</emphasis>). This field will also use any native date picker 
             tools in the browser (using the HTML5 <emphasis>input type="date"</emphasis>) and fall back on a pop-up date picker using the YUI calendar widget. It is, 
             of course still possible to manually enter your own date, which is validated as you type.
          </para> 
        </listitem>
        <listitem>
          <para>
             The Integer form field in the demo has also been enhanced to make use of HTML5 <emphasis>input type=number</emphasis>, which provides native validation and custom input 
         fields in the supported browser(s), although Activiti-Explorer provides client side validation as well.
          </para> 
        </listitem>
      </itemizedlist>
    
      It is expected that Activiti Explorer in the future will use <literal>FormService.getStartFormData</literal>
      instead of these hidden field values to enhance the form input fields.  
	    That's why the 
	    hidden fields part is marked as experimental.  <link linkend="experimental"><emphasis role="bold">&lt;/EXPERIMENTAL&gt;</emphasis></link>
    </para>
    
    
    <para>Use <literal>FormService.getRenderedStartForm</literal> to get the rendered form string with the API, using the default form engine (JUEL):</para>
    
    <programlisting>String FormService.getRenderedStartForm(String processDefinitionId)</programlisting>
  
    <para>Use <literal>FormService.submitStartFormData</literal> to start a new process instance with 
    the properties that the user provided as input for the form:</para>
    
    <programlisting>ProcessDefinition FormService.submitStartFormData(String processDefinitionId, Map&lt;String, String&gt; properties)</programlisting>
    
    <para>To learn about the difference between starting a new process instance with this <literal>FormService</literal> method 
    in comparison with the <literal>ProcessInstance RuntimeService.startProcessInstanceById(String processDefinitionId)</literal>, 
    read <xref linkend="formProperties" /> </para>
  
    <para>
      After submitting the form, a process instance is started and now someone of the
      management team needs to handle the request.   
      <mediaobject><imageobject><imagedata align="center" fileref="images/taskform.vacation.request.management.group.png"/></imageobject></mediaobject>
      The corresponding user task has a task form attached to it, which uses the
      variables which were given as input by the employee in the start form. These variables
      are referenced as expressions and are resolved at runtime to their text representation.
      <programlisting>&lt;h1&gt;Vacation Approval&lt;/h1&gt;
&lt;p&gt;
  ${employeeName} would like to take ${numberOfDays} day(s) of vacation.
&lt;/p&gt;
&lt;p&gt;
  Motivation: ${vacationMotivation}
&lt;/p&gt;
&lt;p&gt;
  Do you approve this?
  &lt;select name=&quot;<emphasis role="bold">vacationApproved</emphasis>&quot;&gt;
    &lt;option value=&quot;true&quot;&gt;Yes&lt;/option&gt;
    &lt;option value=&quot;false&quot;&gt;No&lt;/option&gt;
   &lt;/select&gt;
   &lt;input type=&quot;hidden&quot; name=&quot;vacationApproved_type&quot; value=&quot;Boolean&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;label&gt;
    Motivation:&lt;br/&gt;
    &lt;textarea name=&quot;managerMotivation&quot; value=&quot;&quot;&gt;&lt;/textarea&gt;
  &lt;/label&gt;
&lt;/p&gt;</programlisting>
    </para>
    
    <para>
      The manager will now indicate in the form whether the vacation request is approved or not,
      by selecting the appropriate input in the form. 
      <mediaobject><imageobject><imagedata align="center" fileref="images/taskform.vacation.request.approve.form.png"/></imageobject></mediaobject>
      The result is stored in as a process variable,
      which is then used in the exclusive gateway after the form is submitted.
      <programlisting>
&lt;sequenceFlow id=&quot;flow5&quot; sourceRef=&quot;requestApprovedDecision&quot; targetRef=&quot;adjustVacationRequestTask&quot;&gt;
  &lt;conditionExpression xsi:type=&quot;tFormalExpression&quot;&gt;${!<emphasis role="bold">vacationApproved</emphasis>}&lt;/conditionExpression&gt;
&lt;/sequenceFlow&gt;    
      </programlisting>
    </para>
    
    <para>
      Depending on the input of the manager in the user task, the employee will now
      get a new task in his personal task list, stating that the vacation request was
      disapproved and it needs can be refilled if wanted.
      <mediaobject><imageobject><imagedata align="center" fileref="images/taskform.vacation.request.adjust.form.png"/></imageobject></mediaobject>
      The employee can now choose to resend the vacation request, which brings process
      execution again in the user task for the manager. Or the employee can throw away
      the request, ending the process.
      <programlisting>&lt;h1&gt;Adjust vacation Request&lt;/h1&gt;
&lt;p&gt;
  Your manager has disapproved your vacation request for ${numberOfDays} days. &lt;br/&gt;
  Reason: ${managerMotivation}
&lt;/p&gt;
&lt;p&gt;
  Number of days:&lt;br/&gt;
  &lt;input type=&quot;text&quot; name=&quot;numberOfDays&quot; value=&quot;${numberOfDays}&quot; /&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;numberOfDays_type&quot; value=&quot;Integer&quot; /&gt;
&lt;/p
...</programlisting>
    </para>
  </section>
    
    -->
    
    
  <section id="formProperties">
    <title>Form properties</title>
    
    <para>All information relevant to a business process is either included in the process 
    variables themselves or referenced through the process variables.  Activiti supports
    complex Java objects to be stored as process variables like <literal>Serializable</literal>
    objects, JPA entities or whole XML documents as <literal>String</literal>s.
    </para>
    
    <para>Starting a process and completing user tasks is where people are involved into a process.
    Communicating with people requires forms to be rendered in some UI technology.  
    In order to facilitate multiple UI technologies easy, the process definition 
    can include the logic of transforming of the complex Java typed objects in the process variables 
    to a <literal>Map&lt;String,String&gt;</literal> of <emphasis role="bold">'properties'</emphasis>.
    </para>
    
    <para>Any UI technology can then build a form on top of those properties, using the Activiti API 
    methods that expose the property information.  
    The properties can provide a dedicated (and more limited) view on the process variables.
    The properties needed to display a form are available in the <emphasis role="bold">FormData</emphasis> return values of for example
    <programlisting>StartFormData FormService.getStartFormData(String processDefinitionId)</programlisting>
    or <programlisting>TaskFormdata FormService.getTaskFormData(String taskId)</programlisting>.
    </para>
    
    <para>By default, the build-in form engines, 'sees' the properties as well 
    as the process variables.  So there is no need to declare task form properties 
    if they match 1-1 with the process variables.  For example, with the following 
    declaration:  
    <programlisting>&lt;startEvent id=&quot;start&quot; /&gt;</programlisting>
    All process variables are available when execution arrives in the startEvent, but 
    <programlisting>formService.getStartFormData(String processDefinitionId).getFormProperties()</programlisting>
    will be empty since no specific mapping was defined.
    </para>
    <para>In the above case, all the submitted properties will be stored as process variables.  
    This means that by simply adding a new input field in the form, a new variable can be stored.
    </para>

    <para>Properties are derived from process variables, but they don't have to be stored
    as process variables.  For example, a process variable could be a JPA entity of 
    class Address.  And a form property <literal>StreetName</literal> used by the UI 
    technology could be linked with an expression <literal>#{address.street}</literal>
    </para>

    <para>Analogue, the properties that a user is supposed to submit in a form can be
    stored as a process variable or as a nested property in one of the process variables
    with a UEL value expression like e.g. <literal>#{address.street}</literal> . 
    </para>
    
    <para>Analogue the default behavior of properties that are submitted is that 
    they will be stored as process variables unless a <literal>formProperty</literal> 
    declaration specifies otherwise.</para>

    <para>Also type conversions can be applied as part of the processing between 
    form properties and process variables.</para>
    
    <para>For example:</para>
    
    <programlisting>&lt;userTask id=&quot;task&quot;&gt;
  &lt;extensionElements&gt;
    &lt;activiti:formProperty id=&quot;room&quot; /&gt;
    &lt;activiti:formProperty id=&quot;duration&quot; type=&quot;long&quot;/&gt;
    &lt;activiti:formProperty id=&quot;speaker&quot; variable=&quot;SpeakerName&quot; writable=&quot;false&quot; /&gt;
    &lt;activiti:formProperty id=&quot;street&quot; expression=&quot;#{address.street}&quot; required=&quot;true&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/userTask&gt;</programlisting>

    <itemizedlist>
      <listitem><para>Form property <literal>room</literal> will be mapped to 
      process variable <literal>room</literal> as a String.</para></listitem>
      <listitem><para>Form property <literal>duration</literal> will be mapped to 
      process variable <literal>duration</literal> as a java.lang.Long</para></listitem>
      <listitem><para>Form property <literal>speaker</literal> will be mapped to 
      process variable <literal>SpeakerName</literal>.  It will only be available 
      in the TaskFormData object.  If property speaker is submitted, an ActivitiException will be thrown.
      Analogue, with attribute <literal>readable=&quot;false&quot;</literal>, a 
      property can be excluded from the FormData, but still be processed in the submit.
      </para></listitem>
      <listitem><para>Form property <literal>street</literal> will be mapped to 
      Java bean property <literal>street</literal> in process variable <literal>address</literal>
      as a String.  And required=&quot;true&quot; will throw an exception during the 
      submit if the property is not provided.</para></listitem>
    </itemizedlist>
    
    <para>It's also possible to provide type meta data as part of the FormData that is 
    returned from methods <literal>StartFormData FormService.getStartFormData(String processDefinitionId)</literal>
    and <literal>TaskFormdata FormService.getTaskFormData(String taskId)</literal></para>
    
    <para>We support the following form property types:</para>
    <itemizedlist>
      <listitem><para><literal>string</literal> (org.activiti.engine.impl.form.StringFormType)</para></listitem>
      <listitem><para><literal>long</literal> (org.activiti.engine.impl.form.LongFormType)</para></listitem>
      <listitem><para><literal>enum</literal> (org.activiti.engine.impl.form.EnumFormType)</para></listitem>
      <listitem><para><literal>date</literal> (org.activiti.engine.impl.form.DateFormType)</para></listitem>
      <listitem><para><literal>boolean</literal> (org.activiti.engine.impl.form.BooleanFormType)</para></listitem>
    </itemizedlist>

    <para>For each form property declared, the following <literal>FormProperty</literal>
    information will be made available through 
    <literal>List&lt;FormProperty&gt; formService.getStartFormData(String processDefinitionId).getFormProperties()</literal>
    and <literal>List&lt;FormProperty&gt; formService.getTaskFormData(String taskId).getFormProperties()</literal>
    </para>
    
    <programlisting>public interface FormProperty {
  /** the key used to submit the property in {@link FormService#submitStartFormData(String, java.util.Map)} 
   * or {@link FormService#submitTaskFormData(String, java.util.Map)} */
  String getId();
  /** the display label */
  String getName();
  /** one of the types defined in this interface like e.g. {@link #TYPE_STRING} */
  FormType getType();
  /** optional value that should be used to display in this property */
  String getValue();
  /** is this property read to be displayed in the form and made accessible with the methods 
   * {@link FormService#getStartFormData(String)} and {@link FormService#getTaskFormData(String)}. */
  boolean isReadable();
  /** is this property expected when a user submits the form? */
  boolean isWritable();
  /** is this property a required input field */
  boolean isRequired();
}</programlisting>

    <para>For example:</para>    

    <programlisting>&lt;startEvent id=&quot;start&quot;&gt;
  &lt;extensionElements&gt;
    &lt;activiti:formProperty id=&quot;speaker&quot; 
      name=&quot;Speaker&quot;
      variable=&quot;SpeakerName&quot; 
      type=&quot;string&quot; /&gt;

    &lt;activiti:formProperty id=&quot;start&quot; 
      type=&quot;date&quot; 
      datePattern=&quot;dd-MMM-yyyy&quot; /&gt;

    &lt;activiti:formProperty id=&quot;direction&quot; type=&quot;enum&quot;&gt;
      &lt;activiti:value id=&quot;left&quot; name=&quot;Go Left&quot; /&gt;
      &lt;activiti:value id=&quot;right&quot; name=&quot;Go Right&quot; /&gt;
      &lt;activiti:value id=&quot;up&quot; name=&quot;Go Up&quot; /&gt;
      &lt;activiti:value id=&quot;down&quot; name=&quot;Go Down&quot; /&gt;
    &lt;/activiti:formProperty&gt;
    
  &lt;/extensionElements&gt;
&lt;/startEvent&gt;</programlisting>

    <para>All that information is accessible through the API. The type names can be 
    obtained with  <literal>formProperty.getType().getName()</literal>.  And even the 
    date pattern is available with <literal>formProperty.getType().getInformation(&quot;datePattern&quot;)</literal>
    and the enumeration values are accessible with
    <literal>formProperty.getType().getInformation(&quot;values&quot;)</literal> </para>

    <para>
      Activiti explorer supports the form properties and will render the form accordingly to the form definition.
      The following XML snippet
      <programlisting>
&lt;startEvent ... &gt;
  &lt;extensionElements&gt;
    &lt;activiti:formProperty id=&quot;numberOfDays&quot; name=&quot;Number of days&quot; value=&quot;${numberOfDays}&quot; type=&quot;long&quot; required=&quot;true&quot;/&gt;
    &lt;activiti:formProperty id=&quot;startDate&quot; name=&quot;First day of holiday (dd-MM-yyy)&quot; value=&quot;${startDate}&quot; datePattern=&quot;dd-MM-yyyy hh:mm&quot; type=&quot;date&quot; required=&quot;true&quot; /&gt;
    &lt;activiti:formProperty id=&quot;vacationMotivation&quot; name=&quot;Motivation&quot; value=&quot;${vacationMotivation}&quot; type=&quot;string&quot; /&gt;
  &lt;/extensionElements&gt;
&lt;/userTask&gt;
      </programlisting>
      will render to a process start form when used in Activiti Explorer
     <mediaobject><imageobject><imagedata align="center" fileref="images/forms.explorer.png"/></imageobject></mediaobject>
    </para>

  </section>
  
  <section id="externalFormRendering">
  
    <title>External form rendering</title>
    
    <para>The API also allows for you to perform your 
    own task form rendering outside of the Activiti Engine. These steps explain the hooks that you can use to
    render your task forms yourself.  </para>

    <para>Essentially, all the data that's needed to render a form is assembled in one of these two service methods:
    <literal>StartFormData FormService.getStartFormData(String processDefinitionId)</literal>
    and <literal>TaskFormdata FormService.getTaskFormData(String taskId)</literal>. 
    </para>
    
    <para>Submitting form properties can be done with 
    <literal>ProcessInstance FormService.submitStartFormData(String processDefinitionId, Map&lt;String,String&gt; properties)</literal>
    and <literal>void FormService.submitStartFormData(String taskId, Map&lt;String,String&gt; properties)</literal></para>
    
    <para>To learn about how form properties map to process variables, see <xref linkend="formProperties"/> </para>
    
    <para>You can place any form template resource inside the business archives that you deploy (in case 
    you want to store them versioned with the process).  It will be available as a resource in the deployment, which you can retrieve using: <literal>String ProcessDefinition.getDeploymentId()</literal> and 
    <literal>InputStream RepositoryService.getResourceAsStream(String deploymentId, String resourceName);</literal>
    This could be your template definition file, which you can use to render/show the form in your
    own application.
    </para>
    
    <para>You can use this capability of accessing the deployment resources beyond task forms for any other 
    purposes as well. </para>
    
    <para>The attribute <literal>&lt;userTask activiti:formKey=&quot;...&quot;</literal> is exposed by the API through 
    <literal>String FormService.getStartFormData(String processDefinitionId).getFormKey()</literal>
    and <literal>String FormService.getTaskFormData(String taskId).getFormKey()</literal>. You could use this to
    store the full name of the template within your deployment (e.g. <literal>org/activiti/example/form/my-custom-form.xml</literal>), but this is not required at all.
    For instance, you could also store a generic key in the form 
    attribute and apply an algorithm or transformation to get to the actual template that needs to be used.
    This might be handy when you want to render different forms for different UI technologies like e.g. 
    one form for usage in a web app of normal screen size, one form for mobile phone's small screens and 
    maybe even a template for an IM form or an email form.
    </para>
    
  </section>

</chapter>
